
PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c700  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800c9b0  0800c9b0  0001c9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ceac  0800ceac  0001ceac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ceb4  0800ceb4  0001ceb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ceb8  0800ceb8  0001ceb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  24000000  0800cebc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000368  24000210  0800d0c8  00020210  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000578  0800d0c8  00020578  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016597  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026c0  00000000  00000000  000367d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001188  00000000  00000000  00038e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010a0  00000000  00000000  0003a020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000312ee  00000000  00000000  0003b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000153af  00000000  00000000  0006c3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140fbf  00000000  00000000  0008175d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c271c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005e84  00000000  00000000  001c276c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000210 	.word	0x24000210
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800c998 	.word	0x0800c998

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000214 	.word	0x24000214
 80002ec:	0800c998 	.word	0x0800c998

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b9ac 	b.w	8000a88 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f83e 	bl	80007b8 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__aeabi_d2lz>:
 8000748:	b508      	push	{r3, lr}
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	ec43 2b17 	vmov	d7, r2, r3
 8000752:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d403      	bmi.n	8000764 <__aeabi_d2lz+0x1c>
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000760:	f000 b80a 	b.w	8000778 <__aeabi_d2ulz>
 8000764:	eeb1 7b47 	vneg.f64	d7, d7
 8000768:	ec51 0b17 	vmov	r0, r1, d7
 800076c:	f000 f804 	bl	8000778 <__aeabi_d2ulz>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	bd08      	pop	{r3, pc}

08000778 <__aeabi_d2ulz>:
 8000778:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007a8 <__aeabi_d2ulz+0x30>
 800077c:	ec41 0b17 	vmov	d7, r0, r1
 8000780:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007b0 <__aeabi_d2ulz+0x38>
 8000784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000788:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800078c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000790:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000798:	ee16 1a10 	vmov	r1, s12
 800079c:	ee17 0a90 	vmov	r0, s15
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	3df00000 	.word	0x3df00000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	41f00000 	.word	0x41f00000

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9d08      	ldr	r5, [sp, #32]
 80007be:	4604      	mov	r4, r0
 80007c0:	468e      	mov	lr, r1
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d14d      	bne.n	8000862 <__udivmoddi4+0xaa>
 80007c6:	428a      	cmp	r2, r1
 80007c8:	4694      	mov	ip, r2
 80007ca:	d969      	bls.n	80008a0 <__udivmoddi4+0xe8>
 80007cc:	fab2 f282 	clz	r2, r2
 80007d0:	b152      	cbz	r2, 80007e8 <__udivmoddi4+0x30>
 80007d2:	fa01 f302 	lsl.w	r3, r1, r2
 80007d6:	f1c2 0120 	rsb	r1, r2, #32
 80007da:	fa20 f101 	lsr.w	r1, r0, r1
 80007de:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e2:	ea41 0e03 	orr.w	lr, r1, r3
 80007e6:	4094      	lsls	r4, r2
 80007e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007ec:	0c21      	lsrs	r1, r4, #16
 80007ee:	fbbe f6f8 	udiv	r6, lr, r8
 80007f2:	fa1f f78c 	uxth.w	r7, ip
 80007f6:	fb08 e316 	mls	r3, r8, r6, lr
 80007fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007fe:	fb06 f107 	mul.w	r1, r6, r7
 8000802:	4299      	cmp	r1, r3
 8000804:	d90a      	bls.n	800081c <__udivmoddi4+0x64>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f106 30ff 	add.w	r0, r6, #4294967295
 800080e:	f080 811f 	bcs.w	8000a50 <__udivmoddi4+0x298>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 811c 	bls.w	8000a50 <__udivmoddi4+0x298>
 8000818:	3e02      	subs	r6, #2
 800081a:	4463      	add	r3, ip
 800081c:	1a5b      	subs	r3, r3, r1
 800081e:	b2a4      	uxth	r4, r4
 8000820:	fbb3 f0f8 	udiv	r0, r3, r8
 8000824:	fb08 3310 	mls	r3, r8, r0, r3
 8000828:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800082c:	fb00 f707 	mul.w	r7, r0, r7
 8000830:	42a7      	cmp	r7, r4
 8000832:	d90a      	bls.n	800084a <__udivmoddi4+0x92>
 8000834:	eb1c 0404 	adds.w	r4, ip, r4
 8000838:	f100 33ff 	add.w	r3, r0, #4294967295
 800083c:	f080 810a 	bcs.w	8000a54 <__udivmoddi4+0x29c>
 8000840:	42a7      	cmp	r7, r4
 8000842:	f240 8107 	bls.w	8000a54 <__udivmoddi4+0x29c>
 8000846:	4464      	add	r4, ip
 8000848:	3802      	subs	r0, #2
 800084a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800084e:	1be4      	subs	r4, r4, r7
 8000850:	2600      	movs	r6, #0
 8000852:	b11d      	cbz	r5, 800085c <__udivmoddi4+0xa4>
 8000854:	40d4      	lsrs	r4, r2
 8000856:	2300      	movs	r3, #0
 8000858:	e9c5 4300 	strd	r4, r3, [r5]
 800085c:	4631      	mov	r1, r6
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	428b      	cmp	r3, r1
 8000864:	d909      	bls.n	800087a <__udivmoddi4+0xc2>
 8000866:	2d00      	cmp	r5, #0
 8000868:	f000 80ef 	beq.w	8000a4a <__udivmoddi4+0x292>
 800086c:	2600      	movs	r6, #0
 800086e:	e9c5 0100 	strd	r0, r1, [r5]
 8000872:	4630      	mov	r0, r6
 8000874:	4631      	mov	r1, r6
 8000876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087a:	fab3 f683 	clz	r6, r3
 800087e:	2e00      	cmp	r6, #0
 8000880:	d14a      	bne.n	8000918 <__udivmoddi4+0x160>
 8000882:	428b      	cmp	r3, r1
 8000884:	d302      	bcc.n	800088c <__udivmoddi4+0xd4>
 8000886:	4282      	cmp	r2, r0
 8000888:	f200 80f9 	bhi.w	8000a7e <__udivmoddi4+0x2c6>
 800088c:	1a84      	subs	r4, r0, r2
 800088e:	eb61 0303 	sbc.w	r3, r1, r3
 8000892:	2001      	movs	r0, #1
 8000894:	469e      	mov	lr, r3
 8000896:	2d00      	cmp	r5, #0
 8000898:	d0e0      	beq.n	800085c <__udivmoddi4+0xa4>
 800089a:	e9c5 4e00 	strd	r4, lr, [r5]
 800089e:	e7dd      	b.n	800085c <__udivmoddi4+0xa4>
 80008a0:	b902      	cbnz	r2, 80008a4 <__udivmoddi4+0xec>
 80008a2:	deff      	udf	#255	; 0xff
 80008a4:	fab2 f282 	clz	r2, r2
 80008a8:	2a00      	cmp	r2, #0
 80008aa:	f040 8092 	bne.w	80009d2 <__udivmoddi4+0x21a>
 80008ae:	eba1 010c 	sub.w	r1, r1, ip
 80008b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008b6:	fa1f fe8c 	uxth.w	lr, ip
 80008ba:	2601      	movs	r6, #1
 80008bc:	0c20      	lsrs	r0, r4, #16
 80008be:	fbb1 f3f7 	udiv	r3, r1, r7
 80008c2:	fb07 1113 	mls	r1, r7, r3, r1
 80008c6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ca:	fb0e f003 	mul.w	r0, lr, r3
 80008ce:	4288      	cmp	r0, r1
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x12c>
 80008d2:	eb1c 0101 	adds.w	r1, ip, r1
 80008d6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008da:	d202      	bcs.n	80008e2 <__udivmoddi4+0x12a>
 80008dc:	4288      	cmp	r0, r1
 80008de:	f200 80cb 	bhi.w	8000a78 <__udivmoddi4+0x2c0>
 80008e2:	4643      	mov	r3, r8
 80008e4:	1a09      	subs	r1, r1, r0
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ec:	fb07 1110 	mls	r1, r7, r0, r1
 80008f0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008f4:	fb0e fe00 	mul.w	lr, lr, r0
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d908      	bls.n	800090e <__udivmoddi4+0x156>
 80008fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000900:	f100 31ff 	add.w	r1, r0, #4294967295
 8000904:	d202      	bcs.n	800090c <__udivmoddi4+0x154>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f200 80bb 	bhi.w	8000a82 <__udivmoddi4+0x2ca>
 800090c:	4608      	mov	r0, r1
 800090e:	eba4 040e 	sub.w	r4, r4, lr
 8000912:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000916:	e79c      	b.n	8000852 <__udivmoddi4+0x9a>
 8000918:	f1c6 0720 	rsb	r7, r6, #32
 800091c:	40b3      	lsls	r3, r6
 800091e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000922:	ea4c 0c03 	orr.w	ip, ip, r3
 8000926:	fa20 f407 	lsr.w	r4, r0, r7
 800092a:	fa01 f306 	lsl.w	r3, r1, r6
 800092e:	431c      	orrs	r4, r3
 8000930:	40f9      	lsrs	r1, r7
 8000932:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000936:	fa00 f306 	lsl.w	r3, r0, r6
 800093a:	fbb1 f8f9 	udiv	r8, r1, r9
 800093e:	0c20      	lsrs	r0, r4, #16
 8000940:	fa1f fe8c 	uxth.w	lr, ip
 8000944:	fb09 1118 	mls	r1, r9, r8, r1
 8000948:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800094c:	fb08 f00e 	mul.w	r0, r8, lr
 8000950:	4288      	cmp	r0, r1
 8000952:	fa02 f206 	lsl.w	r2, r2, r6
 8000956:	d90b      	bls.n	8000970 <__udivmoddi4+0x1b8>
 8000958:	eb1c 0101 	adds.w	r1, ip, r1
 800095c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000960:	f080 8088 	bcs.w	8000a74 <__udivmoddi4+0x2bc>
 8000964:	4288      	cmp	r0, r1
 8000966:	f240 8085 	bls.w	8000a74 <__udivmoddi4+0x2bc>
 800096a:	f1a8 0802 	sub.w	r8, r8, #2
 800096e:	4461      	add	r1, ip
 8000970:	1a09      	subs	r1, r1, r0
 8000972:	b2a4      	uxth	r4, r4
 8000974:	fbb1 f0f9 	udiv	r0, r1, r9
 8000978:	fb09 1110 	mls	r1, r9, r0, r1
 800097c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000980:	fb00 fe0e 	mul.w	lr, r0, lr
 8000984:	458e      	cmp	lr, r1
 8000986:	d908      	bls.n	800099a <__udivmoddi4+0x1e2>
 8000988:	eb1c 0101 	adds.w	r1, ip, r1
 800098c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000990:	d26c      	bcs.n	8000a6c <__udivmoddi4+0x2b4>
 8000992:	458e      	cmp	lr, r1
 8000994:	d96a      	bls.n	8000a6c <__udivmoddi4+0x2b4>
 8000996:	3802      	subs	r0, #2
 8000998:	4461      	add	r1, ip
 800099a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800099e:	fba0 9402 	umull	r9, r4, r0, r2
 80009a2:	eba1 010e 	sub.w	r1, r1, lr
 80009a6:	42a1      	cmp	r1, r4
 80009a8:	46c8      	mov	r8, r9
 80009aa:	46a6      	mov	lr, r4
 80009ac:	d356      	bcc.n	8000a5c <__udivmoddi4+0x2a4>
 80009ae:	d053      	beq.n	8000a58 <__udivmoddi4+0x2a0>
 80009b0:	b15d      	cbz	r5, 80009ca <__udivmoddi4+0x212>
 80009b2:	ebb3 0208 	subs.w	r2, r3, r8
 80009b6:	eb61 010e 	sbc.w	r1, r1, lr
 80009ba:	fa01 f707 	lsl.w	r7, r1, r7
 80009be:	fa22 f306 	lsr.w	r3, r2, r6
 80009c2:	40f1      	lsrs	r1, r6
 80009c4:	431f      	orrs	r7, r3
 80009c6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ca:	2600      	movs	r6, #0
 80009cc:	4631      	mov	r1, r6
 80009ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d2:	f1c2 0320 	rsb	r3, r2, #32
 80009d6:	40d8      	lsrs	r0, r3
 80009d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009dc:	fa21 f303 	lsr.w	r3, r1, r3
 80009e0:	4091      	lsls	r1, r2
 80009e2:	4301      	orrs	r1, r0
 80009e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009e8:	fa1f fe8c 	uxth.w	lr, ip
 80009ec:	fbb3 f0f7 	udiv	r0, r3, r7
 80009f0:	fb07 3610 	mls	r6, r7, r0, r3
 80009f4:	0c0b      	lsrs	r3, r1, #16
 80009f6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009fa:	fb00 f60e 	mul.w	r6, r0, lr
 80009fe:	429e      	cmp	r6, r3
 8000a00:	fa04 f402 	lsl.w	r4, r4, r2
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x260>
 8000a06:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a0e:	d22f      	bcs.n	8000a70 <__udivmoddi4+0x2b8>
 8000a10:	429e      	cmp	r6, r3
 8000a12:	d92d      	bls.n	8000a70 <__udivmoddi4+0x2b8>
 8000a14:	3802      	subs	r0, #2
 8000a16:	4463      	add	r3, ip
 8000a18:	1b9b      	subs	r3, r3, r6
 8000a1a:	b289      	uxth	r1, r1
 8000a1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a20:	fb07 3316 	mls	r3, r7, r6, r3
 8000a24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a28:	fb06 f30e 	mul.w	r3, r6, lr
 8000a2c:	428b      	cmp	r3, r1
 8000a2e:	d908      	bls.n	8000a42 <__udivmoddi4+0x28a>
 8000a30:	eb1c 0101 	adds.w	r1, ip, r1
 8000a34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a38:	d216      	bcs.n	8000a68 <__udivmoddi4+0x2b0>
 8000a3a:	428b      	cmp	r3, r1
 8000a3c:	d914      	bls.n	8000a68 <__udivmoddi4+0x2b0>
 8000a3e:	3e02      	subs	r6, #2
 8000a40:	4461      	add	r1, ip
 8000a42:	1ac9      	subs	r1, r1, r3
 8000a44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a48:	e738      	b.n	80008bc <__udivmoddi4+0x104>
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e705      	b.n	800085c <__udivmoddi4+0xa4>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e3      	b.n	800081c <__udivmoddi4+0x64>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6f8      	b.n	800084a <__udivmoddi4+0x92>
 8000a58:	454b      	cmp	r3, r9
 8000a5a:	d2a9      	bcs.n	80009b0 <__udivmoddi4+0x1f8>
 8000a5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7a3      	b.n	80009b0 <__udivmoddi4+0x1f8>
 8000a68:	4646      	mov	r6, r8
 8000a6a:	e7ea      	b.n	8000a42 <__udivmoddi4+0x28a>
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	e794      	b.n	800099a <__udivmoddi4+0x1e2>
 8000a70:	4640      	mov	r0, r8
 8000a72:	e7d1      	b.n	8000a18 <__udivmoddi4+0x260>
 8000a74:	46d0      	mov	r8, sl
 8000a76:	e77b      	b.n	8000970 <__udivmoddi4+0x1b8>
 8000a78:	3b02      	subs	r3, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	e732      	b.n	80008e4 <__udivmoddi4+0x12c>
 8000a7e:	4630      	mov	r0, r6
 8000a80:	e709      	b.n	8000896 <__udivmoddi4+0xde>
 8000a82:	4464      	add	r4, ip
 8000a84:	3802      	subs	r0, #2
 8000a86:	e742      	b.n	800090e <__udivmoddi4+0x156>

08000a88 <__aeabi_idiv0>:
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <init_PID>:
 *  Created on: Dec 17, 2022
 *      Author: Federico Brunella
 */
#include<PID.h>

void init_PID(PID* p, float Tc, float u_max, float u_min){
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a98:	edc7 0a01 	vstr	s1, [r7, #4]
 8000a9c:	ed87 1a00 	vstr	s2, [r7]
	//Set PID parameters
	p->Tc = Tc;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	683a      	ldr	r2, [r7, #0]
 8000ab0:	615a      	str	r2, [r3, #20]
}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <tune_PID>:

//This function sets PID tuning parameters (standard form)
void tune_PID(PID* p, float Kp, float Ki, float Kd){
 8000abe:	b480      	push	{r7}
 8000ac0:	b085      	sub	sp, #20
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	60f8      	str	r0, [r7, #12]
 8000ac6:	ed87 0a02 	vstr	s0, [r7, #8]
 8000aca:	edc7 0a01 	vstr	s1, [r7, #4]
 8000ace:	ed87 1a00 	vstr	s2, [r7]
	//Set tuning parameters (standard form)
	p->Kp = Kp; //gain
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	68ba      	ldr	r2, [r7, #8]
 8000ad6:	601a      	str	r2, [r3, #0]
	p->Ki = Ki; //integral time
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	605a      	str	r2, [r3, #4]
	p->Kd = Kd; //derivative time
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	609a      	str	r2, [r3, #8]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <PID_controller>:

float PID_controller(PID* p, float y, float r){
 8000af0:	b480      	push	{r7}
 8000af2:	b08b      	sub	sp, #44	; 0x2c
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000afc:	edc7 0a01 	vstr	s1, [r7, #4]
	static float e_old = 0, Iterm = 0;
	float u;
	float newIterm;

	float e = r - y;
 8000b00:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b04:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b0c:	edc7 7a08 	vstr	s15, [r7, #32]

	float Pterm = p->Kp *e;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	edd3 7a00 	vldr	s15, [r3]
 8000b16:	ed97 7a08 	vldr	s14, [r7, #32]
 8000b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b1e:	edc7 7a07 	vstr	s15, [r7, #28]
	newIterm = Iterm + (p->Ki)*p->Tc*e_old;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	ed93 7a01 	vldr	s14, [r3, #4]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b32:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <PID_controller+0xf0>)
 8000b34:	edd3 7a00 	vldr	s15, [r3]
 8000b38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b3c:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <PID_controller+0xf4>)
 8000b3e:	edd3 7a00 	vldr	s15, [r3]
 8000b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b46:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dterm = (p->Kd/p->Tc)*(e - e_old);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	edd3 6a02 	vldr	s13, [r3, #8]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <PID_controller+0xf0>)
 8000b5c:	edd3 7a00 	vldr	s15, [r3]
 8000b60:	edd7 6a08 	vldr	s13, [r7, #32]
 8000b64:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b6c:	edc7 7a05 	vstr	s15, [r7, #20]

	e_old = e;
 8000b70:	4a1b      	ldr	r2, [pc, #108]	; (8000be0 <PID_controller+0xf0>)
 8000b72:	6a3b      	ldr	r3, [r7, #32]
 8000b74:	6013      	str	r3, [r2, #0]

	u = Pterm + newIterm + Dterm;
 8000b76:	ed97 7a07 	vldr	s14, [r7, #28]
 8000b7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b82:	ed97 7a05 	vldr	s14, [r7, #20]
 8000b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b8a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if(u > p->u_max){
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b94:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000b98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba0:	dd03      	ble.n	8000baa <PID_controller+0xba>
		u = p->u_max;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	691b      	ldr	r3, [r3, #16]
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ba8:	e010      	b.n	8000bcc <PID_controller+0xdc>
	}else if(u < p->u_min){
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	edd3 7a05 	vldr	s15, [r3, #20]
 8000bb0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000bb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bbc:	d503      	bpl.n	8000bc6 <PID_controller+0xd6>
		u = p->u_min;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc4:	e002      	b.n	8000bcc <PID_controller+0xdc>
	}else{
		Iterm = newIterm; //Clapping anti-windup
 8000bc6:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <PID_controller+0xf4>)
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	6013      	str	r3, [r2, #0]
	}

	return u;
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	ee07 3a90 	vmov	s15, r3
}
 8000bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd6:	372c      	adds	r7, #44	; 0x2c
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	2400022c 	.word	0x2400022c
 8000be4:	24000230 	.word	0x24000230

08000be8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bec:	f001 fb28 	bl	8002240 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bf0:	f000 f8e0 	bl	8000db4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bf4:	f000 fb8e 	bl	8001314 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000bf8:	f000 fb38 	bl	800126c <MX_USART3_UART_Init>
	MX_USB_OTG_HS_USB_Init();
 8000bfc:	f000 fb82 	bl	8001304 <MX_USB_OTG_HS_USB_Init>
	MX_TIM2_Init();
 8000c00:	f000 f9a2 	bl	8000f48 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000c04:	f000 f94c 	bl	8000ea0 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000c08:	f000 f9f2 	bl	8000ff0 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000c0c:	f000 fa3e 	bl	800108c <MX_TIM4_Init>
	MX_TIM13_Init();
 8000c10:	f000 fa92 	bl	8001138 <MX_TIM13_Init>
	MX_USART2_UART_Init();
 8000c14:	f000 fade 	bl	80011d4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);  //Data Aquisition Timer
 8000c18:	4854      	ldr	r0, [pc, #336]	; (8000d6c <main+0x184>)
 8000c1a:	f004 fa07 	bl	800502c <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);  //Sonar Timer (ECHO_Pin pulse Width)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4853      	ldr	r0, [pc, #332]	; (8000d70 <main+0x188>)
 8000c22:	f004 fc43 	bl	80054ac <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);  //Sonar TRIG_Pin Timer
 8000c26:	4853      	ldr	r0, [pc, #332]	; (8000d74 <main+0x18c>)
 8000c28:	f004 fa00 	bl	800502c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);  //Encoder Timer
 8000c2c:	213c      	movs	r1, #60	; 0x3c
 8000c2e:	4852      	ldr	r0, [pc, #328]	; (8000d78 <main+0x190>)
 8000c30:	f004 fe32 	bl	8005898 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1); // PWM Timer
 8000c34:	2100      	movs	r1, #0
 8000c36:	4851      	ldr	r0, [pc, #324]	; (8000d7c <main+0x194>)
 8000c38:	f004 fad2 	bl	80051e0 <HAL_TIM_PWM_Start>

	init_PID(&pid, deltaT, controlUpperLimit, controlLowerLimit);
 8000c3c:	4b50      	ldr	r3, [pc, #320]	; (8000d80 <main+0x198>)
 8000c3e:	ed93 7b00 	vldr	d7, [r3]
 8000c42:	eef7 6bc7 	vcvt.f32.f64	s13, d7
 8000c46:	4b4f      	ldr	r3, [pc, #316]	; (8000d84 <main+0x19c>)
 8000c48:	ed93 7b00 	vldr	d7, [r3]
 8000c4c:	eeb7 6bc7 	vcvt.f32.f64	s12, d7
 8000c50:	4b4d      	ldr	r3, [pc, #308]	; (8000d88 <main+0x1a0>)
 8000c52:	ed93 7b00 	vldr	d7, [r3]
 8000c56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c5a:	eeb0 1a67 	vmov.f32	s2, s15
 8000c5e:	eef0 0a46 	vmov.f32	s1, s12
 8000c62:	eeb0 0a66 	vmov.f32	s0, s13
 8000c66:	4849      	ldr	r0, [pc, #292]	; (8000d8c <main+0x1a4>)
 8000c68:	f7ff ff10 	bl	8000a8c <init_PID>
	tune_PID(&pid, 110, 880, 9.075);   // kp ki kd  //molto buono 325, 2, 7 oppure 400, 765, 4, oppure 300 540 3
 8000c6c:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8000d90 <main+0x1a8>
 8000c70:	eddf 0a48 	vldr	s1, [pc, #288]	; 8000d94 <main+0x1ac>
 8000c74:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8000d98 <main+0x1b0>
 8000c78:	4844      	ldr	r0, [pc, #272]	; (8000d8c <main+0x1a4>)
 8000c7a:	f7ff ff20 	bl	8000abe <tune_PID>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (dataAquisitionFlag == 1) {
 8000c7e:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <main+0x1b4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d1fb      	bne.n	8000c7e <main+0x96>
			x[0]=getPosition();  //la distanza non è la posizione attenzione
 8000c86:	f000 fe39 	bl	80018fc <getPosition>
 8000c8a:	eeb0 7b40 	vmov.f64	d7, d0
 8000c8e:	4b44      	ldr	r3, [pc, #272]	; (8000da0 <main+0x1b8>)
 8000c90:	ed83 7b00 	vstr	d7, [r3]
			x[1]=getLinearSpeed();
 8000c94:	f000 fe50 	bl	8001938 <getLinearSpeed>
 8000c98:	eeb0 7b40 	vmov.f64	d7, d0
 8000c9c:	4b40      	ldr	r3, [pc, #256]	; (8000da0 <main+0x1b8>)
 8000c9e:	ed83 7b02 	vstr	d7, [r3, #8]
			x[2]=getEncoderAngle();
 8000ca2:	f000 fd8d 	bl	80017c0 <getEncoderAngle>
 8000ca6:	eeb0 7b40 	vmov.f64	d7, d0
 8000caa:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <main+0x1b8>)
 8000cac:	ed83 7b04 	vstr	d7, [r3, #16]
			x[3]=getAngularSpeed();
 8000cb0:	f000 fdd2 	bl	8001858 <getAngularSpeed>
 8000cb4:	eeb0 7b40 	vmov.f64	d7, d0
 8000cb8:	4b39      	ldr	r3, [pc, #228]	; (8000da0 <main+0x1b8>)
 8000cba:	ed83 7b06 	vstr	d7, [r3, #24]


			if (startFlag == 1) {
 8000cbe:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <main+0x1bc>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d149      	bne.n	8000d5a <main+0x172>
				timestamp += deltaT;
 8000cc6:	4b38      	ldr	r3, [pc, #224]	; (8000da8 <main+0x1c0>)
 8000cc8:	ed93 6b00 	vldr	d6, [r3]
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <main+0x198>)
 8000cce:	ed93 7b00 	vldr	d7, [r3]
 8000cd2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cd6:	4b34      	ldr	r3, [pc, #208]	; (8000da8 <main+0x1c0>)
 8000cd8:	ed83 7b00 	vstr	d7, [r3]
				u = PID_controller(&pid, x[2], PIDsetPoint);
 8000cdc:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <main+0x1b8>)
 8000cde:	ed93 7b04 	vldr	d7, [r3, #16]
 8000ce2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <main+0x1c4>)
 8000ce8:	ed93 7a00 	vldr	s14, [r3]
 8000cec:	eef0 0a47 	vmov.f32	s1, s14
 8000cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf4:	4825      	ldr	r0, [pc, #148]	; (8000d8c <main+0x1a4>)
 8000cf6:	f7ff fefb 	bl	8000af0 <PID_controller>
 8000cfa:	eef0 7a40 	vmov.f32	s15, s0
 8000cfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d02:	4b2b      	ldr	r3, [pc, #172]	; (8000db0 <main+0x1c8>)
 8000d04:	ed83 7b00 	vstr	d7, [r3]

				if(u == 0)
 8000d08:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <main+0x1c8>)
 8000d0a:	ed93 7b00 	vldr	d7, [r3]
 8000d0e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d16:	d103      	bne.n	8000d20 <main+0x138>
					setMotorDuty(0);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 fe35 	bl	8001988 <setMotorDuty>
 8000d1e:	e00e      	b.n	8000d3e <main+0x156>
				else if (u > 0){
 8000d20:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <main+0x1c8>)
 8000d22:	ed93 7b00 	vldr	d7, [r3]
 8000d26:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2e:	dd03      	ble.n	8000d38 <main+0x150>
					setMotorDir(CCW);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 fe39 	bl	80019a8 <setMotorDir>
 8000d36:	e002      	b.n	8000d3e <main+0x156>
				}
				else{
					setMotorDir(CW);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f000 fe35 	bl	80019a8 <setMotorDir>
				}

				setMotorDuty(abs((int)u));
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <main+0x1c8>)
 8000d40:	ed93 7b00 	vldr	d7, [r3]
 8000d44:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d48:	ee17 3a90 	vmov	r3, s15
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	bfb8      	it	lt
 8000d50:	425b      	neglt	r3, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 fe18 	bl	8001988 <setMotorDuty>
 8000d58:	e002      	b.n	8000d60 <main+0x178>
			} else
				setMotorDuty(0);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f000 fe14 	bl	8001988 <setMotorDuty>

			printTelemetry();
 8000d60:	f000 fe34 	bl	80019cc <printTelemetry>
			dataAquisitionFlag = 0;
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <main+0x1b4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
		if (dataAquisitionFlag == 1) {
 8000d6a:	e788      	b.n	8000c7e <main+0x96>
 8000d6c:	24000234 	.word	0x24000234
 8000d70:	24000280 	.word	0x24000280
 8000d74:	240002cc 	.word	0x240002cc
 8000d78:	24000318 	.word	0x24000318
 8000d7c:	24000364 	.word	0x24000364
 8000d80:	24000010 	.word	0x24000010
 8000d84:	24000018 	.word	0x24000018
 8000d88:	24000020 	.word	0x24000020
 8000d8c:	2400050c 	.word	0x2400050c
 8000d90:	41113333 	.word	0x41113333
 8000d94:	445c0000 	.word	0x445c0000
 8000d98:	42dc0000 	.word	0x42dc0000
 8000d9c:	24000558 	.word	0x24000558
 8000da0:	24000530 	.word	0x24000530
 8000da4:	2400055c 	.word	0x2400055c
 8000da8:	24000528 	.word	0x24000528
 8000dac:	24000524 	.word	0x24000524
 8000db0:	24000550 	.word	0x24000550

08000db4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b09c      	sub	sp, #112	; 0x70
 8000db8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	224c      	movs	r2, #76	; 0x4c
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f007 fa5e 	bl	8008284 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2220      	movs	r2, #32
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f007 fa58 	bl	8008284 <memset>

	/*AXI clock gating */
	RCC->CKGAENR = 0xFFFFFFFF;
 8000dd4:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <SystemClock_Config+0xe4>)
 8000dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000dde:	2004      	movs	r0, #4
 8000de0:	f001 fdb4 	bl	800294c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000de4:	2300      	movs	r3, #0
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <SystemClock_Config+0xe8>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a2b      	ldr	r2, [pc, #172]	; (8000e9c <SystemClock_Config+0xe8>)
 8000dee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <SystemClock_Config+0xe8>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e00:	bf00      	nop
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <SystemClock_Config+0xe8>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e0e:	d1f8      	bne.n	8000e02 <SystemClock_Config+0x4e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e10:	2321      	movs	r3, #33	; 0x21
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e22:	2302      	movs	r3, #2
 8000e24:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000e26:	2301      	movs	r3, #1
 8000e28:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 60;
 8000e2a:	233c      	movs	r3, #60	; 0x3c
 8000e2c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e32:	2304      	movs	r3, #4
 8000e34:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e3a:	230c      	movs	r3, #12
 8000e3c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 fdd8 	bl	8002a00 <HAL_RCC_OscConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8000e56:	f000 fded 	bl	8001a34 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5a:	233f      	movs	r3, #63	; 0x3f
 8000e5c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e6a:	2340      	movs	r3, #64	; 0x40
 8000e6c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e6e:	2340      	movs	r3, #64	; 0x40
 8000e70:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e76:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e78:	2340      	movs	r3, #64	; 0x40
 8000e7a:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2105      	movs	r1, #5
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 f9c1 	bl	8003208 <HAL_RCC_ClockConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0xdc>
	{
		Error_Handler();
 8000e8c:	f000 fdd2 	bl	8001a34 <Error_Handler>
	}
}
 8000e90:	bf00      	nop
 8000e92:	3770      	adds	r7, #112	; 0x70
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	58024400 	.word	0x58024400
 8000e9c:	58024800 	.word	0x58024800

08000ea0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <MX_TIM1_Init+0xa0>)
 8000ec0:	4a20      	ldr	r2, [pc, #128]	; (8000f44 <MX_TIM1_Init+0xa4>)
 8000ec2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 2400-1;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <MX_TIM1_Init+0xa0>)
 8000ec6:	f640 125f 	movw	r2, #2399	; 0x95f
 8000eca:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <MX_TIM1_Init+0xa0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 3000-1;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_TIM1_Init+0xa0>)
 8000ed4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000ed8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <MX_TIM1_Init+0xa0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <MX_TIM1_Init+0xa0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MX_TIM1_Init+0xa0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eec:	4814      	ldr	r0, [pc, #80]	; (8000f40 <MX_TIM1_Init+0xa0>)
 8000eee:	f004 f845 	bl	8004f7c <HAL_TIM_Base_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM1_Init+0x5c>
	{
		Error_Handler();
 8000ef8:	f000 fd9c 	bl	8001a34 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f00:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4619      	mov	r1, r3
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <MX_TIM1_Init+0xa0>)
 8000f0a:	f005 f823 	bl	8005f54 <HAL_TIM_ConfigClockSource>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM1_Init+0x78>
	{
		Error_Handler();
 8000f14:	f000 fd8e 	bl	8001a34 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_TIM1_Init+0xa0>)
 8000f2a:	f005 fecb 	bl	8006cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8000f34:	f000 fd7e 	bl	8001a34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	24000234 	.word	0x24000234
 8000f44:	40010000 	.word	0x40010000

08000f48 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000f68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f6c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 240-1;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000f70:	22ef      	movs	r2, #239	; 0xef
 8000f72:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f80:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f8e:	4817      	ldr	r0, [pc, #92]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000f90:	f004 fa34 	bl	80053fc <HAL_TIM_IC_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8000f9a:	f000 fd4b 	bl	8001a34 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	480f      	ldr	r0, [pc, #60]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000fae:	f005 fe89 	bl	8006cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 8000fb8:	f000 fd3c 	bl	8001a34 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000fd4:	f004 fe0d 	bl	8005bf2 <HAL_TIM_IC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 8000fde:	f000 fd29 	bl	8001a34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	24000280 	.word	0x24000280

08000ff0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_TIM3_Init+0x94>)
 8001010:	4a1d      	ldr	r2, [pc, #116]	; (8001088 <MX_TIM3_Init+0x98>)
 8001012:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 240-1;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_TIM3_Init+0x94>)
 8001016:	22ef      	movs	r2, #239	; 0xef
 8001018:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_TIM3_Init+0x94>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10-1;
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_TIM3_Init+0x94>)
 8001022:	2209      	movs	r2, #9
 8001024:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_TIM3_Init+0x94>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_TIM3_Init+0x94>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001032:	4814      	ldr	r0, [pc, #80]	; (8001084 <MX_TIM3_Init+0x94>)
 8001034:	f003 ffa2 	bl	8004f7c <HAL_TIM_Base_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 800103e:	f000 fcf9 	bl	8001a34 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001046:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4619      	mov	r1, r3
 800104e:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_TIM3_Init+0x94>)
 8001050:	f004 ff80 	bl	8005f54 <HAL_TIM_ConfigClockSource>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 800105a:	f000 fceb 	bl	8001a34 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4619      	mov	r1, r3
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <MX_TIM3_Init+0x94>)
 800106c:	f005 fe2a 	bl	8006cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 8001076:	f000 fcdd 	bl	8001a34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	240002cc 	.word	0x240002cc
 8001088:	40000400 	.word	0x40000400

0800108c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	2224      	movs	r2, #36	; 0x24
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f007 f8f2 	bl	8008284 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a0:	463b      	mov	r3, r7
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_TIM4_Init+0xa4>)
 80010ac:	4a21      	ldr	r2, [pc, #132]	; (8001134 <MX_TIM4_Init+0xa8>)
 80010ae:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_TIM4_Init+0xa4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MX_TIM4_Init+0xa4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 4096-1;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_TIM4_Init+0xa4>)
 80010be:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010c2:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_TIM4_Init+0xa4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_TIM4_Init+0xa4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010d0:	2303      	movs	r3, #3
 80010d2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010d8:	2301      	movs	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010e8:	2301      	movs	r3, #1
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	4619      	mov	r1, r3
 80010fa:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_TIM4_Init+0xa4>)
 80010fc:	f004 fb26 	bl	800574c <HAL_TIM_Encoder_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM4_Init+0x7e>
	{
		Error_Handler();
 8001106:	f000 fc95 	bl	8001a34 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	; (8001130 <MX_TIM4_Init+0xa4>)
 8001118:	f005 fdd4 	bl	8006cc4 <HAL_TIMEx_MasterConfigSynchronization>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM4_Init+0x9a>
	{
		Error_Handler();
 8001122:	f000 fc87 	bl	8001a34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	3730      	adds	r7, #48	; 0x30
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	24000318 	.word	0x24000318
 8001134:	40000800 	.word	0x40000800

08001138 <MX_TIM13_Init>:
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM13_Init 0 */

	/* USER CODE END TIM13_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	615a      	str	r2, [r3, #20]
 800114e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <MX_TIM13_Init+0x94>)
 8001152:	4a1f      	ldr	r2, [pc, #124]	; (80011d0 <MX_TIM13_Init+0x98>)
 8001154:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 240-1;
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <MX_TIM13_Init+0x94>)
 8001158:	22ef      	movs	r2, #239	; 0xef
 800115a:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <MX_TIM13_Init+0x94>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 1000-1;
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_TIM13_Init+0x94>)
 8001164:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001168:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_TIM13_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MX_TIM13_Init+0x94>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001176:	4815      	ldr	r0, [pc, #84]	; (80011cc <MX_TIM13_Init+0x94>)
 8001178:	f003 ff00 	bl	8004f7c <HAL_TIM_Base_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM13_Init+0x4e>
	{
		Error_Handler();
 8001182:	f000 fc57 	bl	8001a34 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001186:	4811      	ldr	r0, [pc, #68]	; (80011cc <MX_TIM13_Init+0x94>)
 8001188:	f003 ffc8 	bl	800511c <HAL_TIM_PWM_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM13_Init+0x5e>
	{
		Error_Handler();
 8001192:	f000 fc4f 	bl	8001a34 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001196:	2360      	movs	r3, #96	; 0x60
 8001198:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	4619      	mov	r1, r3
 80011ac:	4807      	ldr	r0, [pc, #28]	; (80011cc <MX_TIM13_Init+0x94>)
 80011ae:	f004 fdbd 	bl	8005d2c <HAL_TIM_PWM_ConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM13_Init+0x84>
	{
		Error_Handler();
 80011b8:	f000 fc3c 	bl	8001a34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */
	HAL_TIM_MspPostInit(&htim13);
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <MX_TIM13_Init+0x94>)
 80011be:	f000 fd61 	bl	8001c84 <HAL_TIM_MspPostInit>

}
 80011c2:	bf00      	nop
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	24000364 	.word	0x24000364
 80011d0:	40001c00 	.word	0x40001c00

080011d4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <MX_USART2_UART_Init+0x90>)
 80011da:	4a23      	ldr	r2, [pc, #140]	; (8001268 <MX_USART2_UART_Init+0x94>)
 80011dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_USART2_UART_Init+0x90>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_USART2_UART_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_USART2_UART_Init+0x90>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_USART2_UART_Init+0x90>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_USART2_UART_Init+0x90>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_USART2_UART_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_USART2_UART_Init+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_USART2_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_USART2_UART_Init+0x90>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_USART2_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800121c:	4811      	ldr	r0, [pc, #68]	; (8001264 <MX_USART2_UART_Init+0x90>)
 800121e:	f005 fdfd 	bl	8006e1c <HAL_UART_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8001228:	f000 fc04 	bl	8001a34 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800122c:	2100      	movs	r1, #0
 800122e:	480d      	ldr	r0, [pc, #52]	; (8001264 <MX_USART2_UART_Init+0x90>)
 8001230:	f006 ff34 	bl	800809c <HAL_UARTEx_SetTxFifoThreshold>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 800123a:	f000 fbfb 	bl	8001a34 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123e:	2100      	movs	r1, #0
 8001240:	4808      	ldr	r0, [pc, #32]	; (8001264 <MX_USART2_UART_Init+0x90>)
 8001242:	f006 ff69 	bl	8008118 <HAL_UARTEx_SetRxFifoThreshold>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 800124c:	f000 fbf2 	bl	8001a34 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_USART2_UART_Init+0x90>)
 8001252:	f006 feea 	bl	800802a <HAL_UARTEx_DisableFifoMode>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 800125c:	f000 fbea 	bl	8001a34 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	240003b0 	.word	0x240003b0
 8001268:	40004400 	.word	0x40004400

0800126c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001272:	4a23      	ldr	r2, [pc, #140]	; (8001300 <MX_USART3_UART_Init+0x94>)
 8001274:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001276:	4b21      	ldr	r3, [pc, #132]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800127c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_USART3_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_USART3_UART_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80012b4:	4811      	ldr	r0, [pc, #68]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012b6:	f005 fdb1 	bl	8006e1c <HAL_UART_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 80012c0:	f000 fbb8 	bl	8001a34 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c4:	2100      	movs	r1, #0
 80012c6:	480d      	ldr	r0, [pc, #52]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012c8:	f006 fee8 	bl	800809c <HAL_UARTEx_SetTxFifoThreshold>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART3_UART_Init+0x6a>
	{
		Error_Handler();
 80012d2:	f000 fbaf 	bl	8001a34 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d6:	2100      	movs	r1, #0
 80012d8:	4808      	ldr	r0, [pc, #32]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012da:	f006 ff1d 	bl	8008118 <HAL_UARTEx_SetRxFifoThreshold>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_USART3_UART_Init+0x7c>
	{
		Error_Handler();
 80012e4:	f000 fba6 	bl	8001a34 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012ea:	f006 fe9e 	bl	800802a <HAL_UARTEx_DisableFifoMode>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 80012f4:	f000 fb9e 	bl	8001a34 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	24000440 	.word	0x24000440
 8001300:	40004800 	.word	0x40004800

08001304 <MX_USB_OTG_HS_USB_Init>:
 * @brief USB_OTG_HS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_HS_Init 1 */
	/* USER CODE BEGIN USB_OTG_HS_Init 2 */

	/* USER CODE END USB_OTG_HS_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08e      	sub	sp, #56	; 0x38
 8001318:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	4b8e      	ldr	r3, [pc, #568]	; (8001564 <MX_GPIO_Init+0x250>)
 800132c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001330:	4a8c      	ldr	r2, [pc, #560]	; (8001564 <MX_GPIO_Init+0x250>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800133a:	4b8a      	ldr	r3, [pc, #552]	; (8001564 <MX_GPIO_Init+0x250>)
 800133c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	623b      	str	r3, [r7, #32]
 8001346:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001348:	4b86      	ldr	r3, [pc, #536]	; (8001564 <MX_GPIO_Init+0x250>)
 800134a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800134e:	4a85      	ldr	r2, [pc, #532]	; (8001564 <MX_GPIO_Init+0x250>)
 8001350:	f043 0320 	orr.w	r3, r3, #32
 8001354:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001358:	4b82      	ldr	r3, [pc, #520]	; (8001564 <MX_GPIO_Init+0x250>)
 800135a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800135e:	f003 0320 	and.w	r3, r3, #32
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001366:	4b7f      	ldr	r3, [pc, #508]	; (8001564 <MX_GPIO_Init+0x250>)
 8001368:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800136c:	4a7d      	ldr	r2, [pc, #500]	; (8001564 <MX_GPIO_Init+0x250>)
 800136e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001372:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001376:	4b7b      	ldr	r3, [pc, #492]	; (8001564 <MX_GPIO_Init+0x250>)
 8001378:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800137c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b77      	ldr	r3, [pc, #476]	; (8001564 <MX_GPIO_Init+0x250>)
 8001386:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800138a:	4a76      	ldr	r2, [pc, #472]	; (8001564 <MX_GPIO_Init+0x250>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001394:	4b73      	ldr	r3, [pc, #460]	; (8001564 <MX_GPIO_Init+0x250>)
 8001396:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	4b70      	ldr	r3, [pc, #448]	; (8001564 <MX_GPIO_Init+0x250>)
 80013a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013a8:	4a6e      	ldr	r2, [pc, #440]	; (8001564 <MX_GPIO_Init+0x250>)
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013b2:	4b6c      	ldr	r3, [pc, #432]	; (8001564 <MX_GPIO_Init+0x250>)
 80013b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013c0:	4b68      	ldr	r3, [pc, #416]	; (8001564 <MX_GPIO_Init+0x250>)
 80013c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013c6:	4a67      	ldr	r2, [pc, #412]	; (8001564 <MX_GPIO_Init+0x250>)
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013d0:	4b64      	ldr	r3, [pc, #400]	; (8001564 <MX_GPIO_Init+0x250>)
 80013d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80013de:	4b61      	ldr	r3, [pc, #388]	; (8001564 <MX_GPIO_Init+0x250>)
 80013e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013e4:	4a5f      	ldr	r2, [pc, #380]	; (8001564 <MX_GPIO_Init+0x250>)
 80013e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013ee:	4b5d      	ldr	r3, [pc, #372]	; (8001564 <MX_GPIO_Init+0x250>)
 80013f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80013fc:	4b59      	ldr	r3, [pc, #356]	; (8001564 <MX_GPIO_Init+0x250>)
 80013fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001402:	4a58      	ldr	r2, [pc, #352]	; (8001564 <MX_GPIO_Init+0x250>)
 8001404:	f043 0310 	orr.w	r3, r3, #16
 8001408:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800140c:	4b55      	ldr	r3, [pc, #340]	; (8001564 <MX_GPIO_Init+0x250>)
 800140e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, DIR_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8001420:	4851      	ldr	r0, [pc, #324]	; (8001568 <MX_GPIO_Init+0x254>)
 8001422:	f001 fa5f 	bl	80028e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2108      	movs	r1, #8
 800142a:	4850      	ldr	r0, [pc, #320]	; (800156c <MX_GPIO_Init+0x258>)
 800142c:	f001 fa5a 	bl	80028e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f244 0101 	movw	r1, #16385	; 0x4001
 8001436:	484e      	ldr	r0, [pc, #312]	; (8001570 <MX_GPIO_Init+0x25c>)
 8001438:	f001 fa54 	bl	80028e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	2102      	movs	r1, #2
 8001440:	484c      	ldr	r0, [pc, #304]	; (8001574 <MX_GPIO_Init+0x260>)
 8001442:	f001 fa4f 	bl	80028e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BUTTON_Pin */
	GPIO_InitStruct.Pin = BUTTON_Pin;
 8001446:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800144c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	4619      	mov	r1, r3
 800145c:	4846      	ldr	r0, [pc, #280]	; (8001578 <MX_GPIO_Init+0x264>)
 800145e:	f001 f891 	bl	8002584 <HAL_GPIO_Init>

	/*Configure GPIO pins : DIR_Pin USB_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DIR_Pin|USB_FS_PWR_EN_Pin;
 8001462:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001478:	4619      	mov	r1, r3
 800147a:	483b      	ldr	r0, [pc, #236]	; (8001568 <MX_GPIO_Init+0x254>)
 800147c:	f001 f882 	bl	8002584 <HAL_GPIO_Init>

	/*Configure GPIO pin : TRIG_Pin */
	GPIO_InitStruct.Pin = TRIG_Pin;
 8001480:	2308      	movs	r3, #8
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148c:	2302      	movs	r3, #2
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	4835      	ldr	r0, [pc, #212]	; (800156c <MX_GPIO_Init+0x258>)
 8001498:	f001 f874 	bl	8002584 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800149c:	f244 0301 	movw	r3, #16385	; 0x4001
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	482e      	ldr	r0, [pc, #184]	; (8001570 <MX_GPIO_Init+0x25c>)
 80014b6:	f001 f865 	bl	8002584 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014cc:	4619      	mov	r1, r3
 80014ce:	482b      	ldr	r0, [pc, #172]	; (800157c <MX_GPIO_Init+0x268>)
 80014d0:	f001 f858 	bl	8002584 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80014d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014da:	2300      	movs	r3, #0
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e6:	4619      	mov	r1, r3
 80014e8:	4820      	ldr	r0, [pc, #128]	; (800156c <MX_GPIO_Init+0x258>)
 80014ea:	f001 f84b 	bl	8002584 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_ID_Pin */
	GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80014ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001500:	230a      	movs	r3, #10
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001508:	4619      	mov	r1, r3
 800150a:	4818      	ldr	r0, [pc, #96]	; (800156c <MX_GPIO_Init+0x258>)
 800150c:	f001 f83a 	bl	8002584 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
	GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001510:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	4810      	ldr	r0, [pc, #64]	; (800156c <MX_GPIO_Init+0x258>)
 800152a:	f001 f82b 	bl	8002584 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800152e:	2302      	movs	r3, #2
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001542:	4619      	mov	r1, r3
 8001544:	480b      	ldr	r0, [pc, #44]	; (8001574 <MX_GPIO_Init+0x260>)
 8001546:	f001 f81d 	bl	8002584 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	2028      	movs	r0, #40	; 0x28
 8001550:	f000 ffe3 	bl	800251a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001554:	2028      	movs	r0, #40	; 0x28
 8001556:	f000 fffa 	bl	800254e <HAL_NVIC_EnableIRQ>

}
 800155a:	bf00      	nop
 800155c:	3738      	adds	r7, #56	; 0x38
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	58024400 	.word	0x58024400
 8001568:	58021400 	.word	0x58021400
 800156c:	58020000 	.word	0x58020000
 8001570:	58020400 	.word	0x58020400
 8001574:	58021000 	.word	0x58021000
 8001578:	58020800 	.word	0x58020800
 800157c:	58021800 	.word	0x58021800

08001580 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);  //USB
 8001588:	1d39      	adds	r1, r7, #4
 800158a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800158e:	2201      	movs	r2, #1
 8001590:	4807      	ldr	r0, [pc, #28]	; (80015b0 <__io_putchar+0x30>)
 8001592:	f005 fc93 	bl	8006ebc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//telemetry module
 8001596:	1d39      	adds	r1, r7, #4
 8001598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800159c:	2201      	movs	r2, #1
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <__io_putchar+0x34>)
 80015a0:	f005 fc8c 	bl	8006ebc <HAL_UART_Transmit>
	return ch;
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	24000440 	.word	0x24000440
 80015b4:	240003b0 	.word	0x240003b0

080015b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a16      	ldr	r2, [pc, #88]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d11d      	bne.n	8001604 <HAL_TIM_PeriodElapsedCallback+0x4c>
		if (trigFlag == 0)
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d105      	bne.n	80015dc <HAL_TIM_PeriodElapsedCallback+0x24>
			HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2108      	movs	r1, #8
 80015d4:	4813      	ldr	r0, [pc, #76]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80015d6:	f001 f985 	bl	80028e4 <HAL_GPIO_WritePin>
 80015da:	e004      	b.n	80015e6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		else
			HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	2108      	movs	r1, #8
 80015e0:	4810      	ldr	r0, [pc, #64]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80015e2:	f001 f97f 	bl	80028e4 <HAL_GPIO_WritePin>

		if (trigFlag == 2999)  //5999 con timer a 60ms
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d103      	bne.n	80015fa <HAL_TIM_PeriodElapsedCallback+0x42>
			trigFlag = 0;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e004      	b.n	8001604 <HAL_TIM_PeriodElapsedCallback+0x4c>
		else
			trigFlag++;
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001602:	6013      	str	r3, [r2, #0]
	}

	if(htim == &htim1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d102      	bne.n	8001612 <HAL_TIM_PeriodElapsedCallback+0x5a>
		dataAquisitionFlag = 1;
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	240002cc 	.word	0x240002cc
 8001620:	24000508 	.word	0x24000508
 8001624:	58020000 	.word	0x58020000
 8001628:	24000234 	.word	0x24000234
 800162c:	24000558 	.word	0x24000558

08001630 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7f1b      	ldrb	r3, [r3, #28]
 800163c:	2b01      	cmp	r3, #1
 800163e:	f040 8088 	bne.w	8001752 <HAL_TIM_IC_CaptureCallback+0x122>
	{
		if (Is_First_Captured == 0) // if the first value is not captured
 8001642:	4b46      	ldr	r3, [pc, #280]	; (800175c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d11b      	bne.n	8001682 <HAL_TIM_IC_CaptureCallback+0x52>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800164a:	2100      	movs	r1, #0
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f004 fd79 	bl	8006144 <HAL_TIM_ReadCapturedValue>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	4b42      	ldr	r3, [pc, #264]	; (8001760 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001658:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 800165a:	4b40      	ldr	r3, [pc, #256]	; (800175c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6a1a      	ldr	r2, [r3, #32]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 020a 	bic.w	r2, r2, #10
 800166e:	621a      	str	r2, [r3, #32]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6a1a      	ldr	r2, [r3, #32]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0202 	orr.w	r2, r2, #2
 800167e:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 8001680:	e067      	b.n	8001752 <HAL_TIM_IC_CaptureCallback+0x122>
		else if (Is_First_Captured == 1)   // if the first is already captured
 8001682:	4b36      	ldr	r3, [pc, #216]	; (800175c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d163      	bne.n	8001752 <HAL_TIM_IC_CaptureCallback+0x122>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 800168a:	2100      	movs	r1, #0
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f004 fd59 	bl	8006144 <HAL_TIM_ReadCapturedValue>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	4b33      	ldr	r3, [pc, #204]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001698:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 80016a2:	4b30      	ldr	r3, [pc, #192]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x134>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <HAL_TIM_IC_CaptureCallback+0x130>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	dd07      	ble.n	80016be <HAL_TIM_IC_CaptureCallback+0x8e>
				Difference = IC_Val2 - IC_Val1;
 80016ae:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x134>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_TIM_IC_CaptureCallback+0x130>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	4a2b      	ldr	r2, [pc, #172]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x138>)
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	e00f      	b.n	80016de <HAL_TIM_IC_CaptureCallback+0xae>
			else if (IC_Val1 > IC_Val2) {
 80016be:	4b28      	ldr	r3, [pc, #160]	; (8001760 <HAL_TIM_IC_CaptureCallback+0x130>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4b28      	ldr	r3, [pc, #160]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x134>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	dd09      	ble.n	80016de <HAL_TIM_IC_CaptureCallback+0xae>
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x134>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b23      	ldr	r3, [pc, #140]	; (8001760 <HAL_TIM_IC_CaptureCallback+0x130>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	3b01      	subs	r3, #1
 80016d8:	461a      	mov	r2, r3
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x138>)
 80016dc:	601a      	str	r2, [r3, #0]
			float refClock = TIMCLOCK / (PRESCALAR);
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80016e0:	60fb      	str	r3, [r7, #12]
			float mFactor = 1000000 / refClock;
 80016e2:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001770 <HAL_TIM_IC_CaptureCallback+0x140>
 80016e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80016ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ee:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth = (double) Difference * mFactor;
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x138>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001702:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001706:	ee26 7b07 	vmul.f64	d7, d6, d7
 800170a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001710:	edc3 7a00 	vstr	s15, [r3]
			distance = (usWidth / 58)/100;  //prima: senza/100
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001716:	edd3 7a00 	vldr	s15, [r3]
 800171a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001778 <HAL_TIM_IC_CaptureCallback+0x148>
 800171e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001722:	eddf 6a16 	vldr	s13, [pc, #88]	; 800177c <HAL_TIM_IC_CaptureCallback+0x14c>
 8001726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_TIM_IC_CaptureCallback+0x150>)
 800172c:	edc3 7a00 	vstr	s15, [r3]
			Is_First_Captured = 0; // set it back to false
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a1a      	ldr	r2, [r3, #32]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 020a 	bic.w	r2, r2, #10
 8001744:	621a      	str	r2, [r3, #32]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6a12      	ldr	r2, [r2, #32]
 8001750:	621a      	str	r2, [r3, #32]
}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	240004f4 	.word	0x240004f4
 8001760:	240004e8 	.word	0x240004e8
 8001764:	240004ec 	.word	0x240004ec
 8001768:	240004f0 	.word	0x240004f0
 800176c:	49752980 	.word	0x49752980
 8001770:	49742400 	.word	0x49742400
 8001774:	240004f8 	.word	0x240004f8
 8001778:	42680000 	.word	0x42680000
 800177c:	42c80000 	.word	0x42c80000
 8001780:	240004fc 	.word	0x240004fc

08001784 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BUTTON_Pin){
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001794:	d10a      	bne.n	80017ac <HAL_GPIO_EXTI_Callback+0x28>
		if(startFlag == 0)
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_GPIO_EXTI_Callback+0x34>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d103      	bne.n	80017a6 <HAL_GPIO_EXTI_Callback+0x22>
			startFlag=1;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_GPIO_EXTI_Callback+0x34>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
		else
			startFlag=0;
	}
}
 80017a4:	e002      	b.n	80017ac <HAL_GPIO_EXTI_Callback+0x28>
			startFlag=0;
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <HAL_GPIO_EXTI_Callback+0x34>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	2400055c 	.word	0x2400055c
 80017bc:	00000000 	.word	0x00000000

080017c0 <getEncoderAngle>:

double getEncoderAngle(){
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	counts = TIM4 -> CNT;
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <getEncoderAngle+0x88>)
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <getEncoderAngle+0x8c>)
 80017d2:	ed83 7b00 	vstr	d7, [r3]
	degAngle = counts*countsXDeg;
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <getEncoderAngle+0x8c>)
 80017d8:	ed93 6b00 	vldr	d6, [r3]
 80017dc:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <getEncoderAngle+0x90>)
 80017de:	ed93 7b00 	vldr	d7, [r3]
 80017e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <getEncoderAngle+0x94>)
 80017e8:	ed83 7b00 	vstr	d7, [r3]

	if(degAngle >= 180)
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <getEncoderAngle+0x94>)
 80017ee:	ed93 7b00 	vldr	d7, [r3]
 80017f2:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8001830 <getEncoderAngle+0x70>
 80017f6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80017fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fe:	db09      	blt.n	8001814 <getEncoderAngle+0x54>
		degAngle = degAngle - 360;
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <getEncoderAngle+0x94>)
 8001802:	ed93 7b00 	vldr	d7, [r3]
 8001806:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001838 <getEncoderAngle+0x78>
 800180a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <getEncoderAngle+0x94>)
 8001810:	ed83 7b00 	vstr	d7, [r3]

	return degAngle+STARTPOSITION;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <getEncoderAngle+0x94>)
 8001816:	ed93 7b00 	vldr	d7, [r3]
 800181a:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001840 <getEncoderAngle+0x80>
 800181e:	ee37 7b06 	vadd.f64	d7, d7, d6
}
 8001822:	eeb0 0b47 	vmov.f64	d0, d7
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	00000000 	.word	0x00000000
 8001834:	40668000 	.word	0x40668000
 8001838:	00000000 	.word	0x00000000
 800183c:	40768000 	.word	0x40768000
 8001840:	00000000 	.word	0x00000000
 8001844:	40568000 	.word	0x40568000
 8001848:	40000800 	.word	0x40000800
 800184c:	240004d0 	.word	0x240004d0
 8001850:	24000000 	.word	0x24000000
 8001854:	240004d8 	.word	0x240004d8

08001858 <getAngularSpeed>:

double getAngularSpeed(){
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
	double speed = 0;
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	e9c7 2300 	strd	r2, r3, [r7]
	if(prevDegAngle > degAngle)
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <getAngularSpeed+0x98>)
 800186c:	ed93 6b00 	vldr	d6, [r3]
 8001870:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <getAngularSpeed+0x9c>)
 8001872:	ed93 7b00 	vldr	d7, [r3]
 8001876:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	dd11      	ble.n	80018a4 <getAngularSpeed+0x4c>
		speed = ((prevDegAngle-degAngle)/deltaT)*-1;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <getAngularSpeed+0x98>)
 8001882:	ed93 6b00 	vldr	d6, [r3]
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <getAngularSpeed+0x9c>)
 8001888:	ed93 7b00 	vldr	d7, [r3]
 800188c:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <getAngularSpeed+0xa0>)
 8001892:	ed93 6b00 	vldr	d6, [r3]
 8001896:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800189a:	eeb1 7b47 	vneg.f64	d7, d7
 800189e:	ed87 7b00 	vstr	d7, [r7]
 80018a2:	e00e      	b.n	80018c2 <getAngularSpeed+0x6a>
	else
		speed = ((degAngle - prevDegAngle)/deltaT)*1;
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <getAngularSpeed+0x9c>)
 80018a6:	ed93 6b00 	vldr	d6, [r3]
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <getAngularSpeed+0x98>)
 80018ac:	ed93 7b00 	vldr	d7, [r3]
 80018b0:	ee36 5b47 	vsub.f64	d5, d6, d7
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <getAngularSpeed+0xa0>)
 80018b6:	ed93 6b00 	vldr	d6, [r3]
 80018ba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018be:	ed87 7b00 	vstr	d7, [r7]

	//double speed = ((degAngle-prevDegAngle)/deltaT);
	prevDegAngle = degAngle;
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <getAngularSpeed+0x9c>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	4909      	ldr	r1, [pc, #36]	; (80018f0 <getAngularSpeed+0x98>)
 80018ca:	e9c1 2300 	strd	r2, r3, [r1]
	return speed*(M_PI/180);
 80018ce:	ed97 7b00 	vldr	d7, [r7]
 80018d2:	ed9f 6b05 	vldr	d6, [pc, #20]	; 80018e8 <getAngularSpeed+0x90>
 80018d6:	ee27 7b06 	vmul.f64	d7, d7, d6
}
 80018da:	eeb0 0b47 	vmov.f64	d0, d7
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	a2529d39 	.word	0xa2529d39
 80018ec:	3f91df46 	.word	0x3f91df46
 80018f0:	240004e0 	.word	0x240004e0
 80018f4:	240004d8 	.word	0x240004d8
 80018f8:	24000010 	.word	0x24000010

080018fc <getPosition>:

double getPosition(){
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
	double position = referencePosition - (double)distance;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <getPosition+0x34>)
 8001904:	ed93 6b00 	vldr	d6, [r3]
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <getPosition+0x38>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001912:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001916:	ed87 7b00 	vstr	d7, [r7]
	return position;
 800191a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800191e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001922:	eeb0 0b47 	vmov.f64	d0, d7
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	24000008 	.word	0x24000008
 8001934:	240004fc 	.word	0x240004fc

08001938 <getLinearSpeed>:

double getLinearSpeed(){
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
	double currentPos = getPosition();
 800193e:	f7ff ffdd 	bl	80018fc <getPosition>
 8001942:	ed87 0b02 	vstr	d0, [r7, #8]
	double speed = (currentPos - prevPos)/deltaT;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <getLinearSpeed+0x48>)
 8001948:	ed93 7b00 	vldr	d7, [r3]
 800194c:	ed97 6b02 	vldr	d6, [r7, #8]
 8001950:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <getLinearSpeed+0x4c>)
 8001956:	ed93 6b00 	vldr	d6, [r3]
 800195a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800195e:	ed87 7b00 	vstr	d7, [r7]
	prevPos = currentPos;
 8001962:	4907      	ldr	r1, [pc, #28]	; (8001980 <getLinearSpeed+0x48>)
 8001964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001968:	e9c1 2300 	strd	r2, r3, [r1]

	return speed;
 800196c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001970:	ec43 2b17 	vmov	d7, r2, r3
}
 8001974:	eeb0 0b47 	vmov.f64	d0, d7
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	24000500 	.word	0x24000500
 8001984:	24000010 	.word	0x24000010

08001988 <setMotorDuty>:

void setMotorDuty(int duty){
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	TIM13->CCR1 = duty;
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <setMotorDuty+0x1c>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40001c00 	.word	0x40001c00

080019a8 <setMotorDir>:

void setMotorDir(int dir){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, dir);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	2180      	movs	r1, #128	; 0x80
 80019b8:	4803      	ldr	r0, [pc, #12]	; (80019c8 <setMotorDir+0x20>)
 80019ba:	f000 ff93 	bl	80028e4 <HAL_GPIO_WritePin>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	58021400 	.word	0x58021400

080019cc <printTelemetry>:

void printTelemetry(){
 80019cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019d0:	b08d      	sub	sp, #52	; 0x34
 80019d2:	af0a      	add	r7, sp, #40	; 0x28
	//stampa il vettore di stato e la risposta u
	//printf("%f,%f,%f,%f,%f\r\n", x[0], x[1], x[2], x[3], u);
	printf("%f,%f,%f,%f,%f,%f\r\n", timestamp, x[0], x[1], x[2], x[3], u);
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <printTelemetry+0x58>)
 80019d6:	ed93 7b00 	vldr	d7, [r3]
 80019da:	ed87 7b00 	vstr	d7, [r7]
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <printTelemetry+0x5c>)
 80019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e4:	4910      	ldr	r1, [pc, #64]	; (8001a28 <printTelemetry+0x5c>)
 80019e6:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80019ea:	4c0f      	ldr	r4, [pc, #60]	; (8001a28 <printTelemetry+0x5c>)
 80019ec:	e9d4 4504 	ldrd	r4, r5, [r4, #16]
 80019f0:	4e0d      	ldr	r6, [pc, #52]	; (8001a28 <printTelemetry+0x5c>)
 80019f2:	e9d6 8906 	ldrd	r8, r9, [r6, #24]
 80019f6:	4e0d      	ldr	r6, [pc, #52]	; (8001a2c <printTelemetry+0x60>)
 80019f8:	e9d6 ab00 	ldrd	sl, fp, [r6]
 80019fc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001a00:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001a04:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001a0c:	e9cd 2300 	strd	r2, r3, [sp]
 8001a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a14:	4806      	ldr	r0, [pc, #24]	; (8001a30 <printTelemetry+0x64>)
 8001a16:	f007 fa87 	bl	8008f28 <iprintf>

}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a24:	24000528 	.word	0x24000528
 8001a28:	24000530 	.word	0x24000530
 8001a2c:	24000550 	.word	0x24000550
 8001a30:	0800c9b0 	.word	0x0800c9b0

08001a34 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a38:	b672      	cpsid	i
}
 8001a3a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a3c:	e7fe      	b.n	8001a3c <Error_Handler+0x8>
	...

08001a40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_MspInit+0x30>)
 8001a48:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001a4c:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <HAL_MspInit+0x30>)
 8001a4e:	f043 0302 	orr.w	r3, r3, #2
 8001a52:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_MspInit+0x30>)
 8001a58:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	58024400 	.word	0x58024400

08001a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a2b      	ldr	r2, [pc, #172]	; (8001b30 <HAL_TIM_Base_MspInit+0xbc>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d117      	bne.n	8001ab6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a86:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_TIM_Base_MspInit+0xc0>)
 8001a88:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001a8c:	4a29      	ldr	r2, [pc, #164]	; (8001b34 <HAL_TIM_Base_MspInit+0xc0>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <HAL_TIM_Base_MspInit+0xc0>)
 8001a98:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2019      	movs	r0, #25
 8001aaa:	f000 fd36 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001aae:	2019      	movs	r0, #25
 8001ab0:	f000 fd4d 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001ab4:	e038      	b.n	8001b28 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1f      	ldr	r2, [pc, #124]	; (8001b38 <HAL_TIM_Base_MspInit+0xc4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d117      	bne.n	8001af0 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <HAL_TIM_Base_MspInit+0xc0>)
 8001ac2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ac6:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <HAL_TIM_Base_MspInit+0xc0>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_TIM_Base_MspInit+0xc0>)
 8001ad2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	201d      	movs	r0, #29
 8001ae4:	f000 fd19 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ae8:	201d      	movs	r0, #29
 8001aea:	f000 fd30 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 8001aee:	e01b      	b.n	8001b28 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM13)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <HAL_TIM_Base_MspInit+0xc8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d116      	bne.n	8001b28 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_TIM_Base_MspInit+0xc0>)
 8001afc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001b00:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <HAL_TIM_Base_MspInit+0xc0>)
 8001b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b06:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_TIM_Base_MspInit+0xc0>)
 8001b0c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	202c      	movs	r0, #44	; 0x2c
 8001b1e:	f000 fcfc 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001b22:	202c      	movs	r0, #44	; 0x2c
 8001b24:	f000 fd13 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 8001b28:	bf00      	nop
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40010000 	.word	0x40010000
 8001b34:	58024400 	.word	0x58024400
 8001b38:	40000400 	.word	0x40000400
 8001b3c:	40001c00 	.word	0x40001c00

08001b40 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b60:	d135      	bne.n	8001bce <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_TIM_IC_MspInit+0x98>)
 8001b64:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001b68:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <HAL_TIM_IC_MspInit+0x98>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_TIM_IC_MspInit+0x98>)
 8001b74:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_TIM_IC_MspInit+0x98>)
 8001b82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b86:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <HAL_TIM_IC_MspInit+0x98>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_TIM_IC_MspInit+0x98>)
 8001b92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4808      	ldr	r0, [pc, #32]	; (8001bdc <HAL_TIM_IC_MspInit+0x9c>)
 8001bba:	f000 fce3 	bl	8002584 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	201c      	movs	r0, #28
 8001bc4:	f000 fca9 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bc8:	201c      	movs	r0, #28
 8001bca:	f000 fcc0 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bce:	bf00      	nop
 8001bd0:	3728      	adds	r7, #40	; 0x28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	58020000 	.word	0x58020000

08001be0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1e      	ldr	r2, [pc, #120]	; (8001c78 <HAL_TIM_Encoder_MspInit+0x98>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d136      	bne.n	8001c70 <HAL_TIM_Encoder_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001c04:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001c08:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001c14:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001c22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c26:	4a15      	ldr	r2, [pc, #84]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001c32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = CHAN_A_Pin|CHAN_B_Pin;
 8001c3e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c50:	2302      	movs	r3, #2
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4809      	ldr	r0, [pc, #36]	; (8001c80 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001c5c:	f000 fc92 	bl	8002584 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	201e      	movs	r0, #30
 8001c66:	f000 fc58 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c6a:	201e      	movs	r0, #30
 8001c6c:	f000 fc6f 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	; 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40000800 	.word	0x40000800
 8001c7c:	58024400 	.word	0x58024400
 8001c80:	58020c00 	.word	0x58020c00

08001c84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <HAL_TIM_MspPostInit+0x6c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d11f      	bne.n	8001ce6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <HAL_TIM_MspPostInit+0x70>)
 8001ca8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001cac:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <HAL_TIM_MspPostInit+0x70>)
 8001cae:	f043 0320 	orr.w	r3, r3, #32
 8001cb2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_TIM_MspPostInit+0x70>)
 8001cb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8001cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001cd6:	2309      	movs	r3, #9
 8001cd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <HAL_TIM_MspPostInit+0x74>)
 8001ce2:	f000 fc4f 	bl	8002584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3720      	adds	r7, #32
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40001c00 	.word	0x40001c00
 8001cf4:	58024400 	.word	0x58024400
 8001cf8:	58021400 	.word	0x58021400

08001cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b0ba      	sub	sp, #232	; 0xe8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d14:	f107 031c 	add.w	r3, r7, #28
 8001d18:	22b8      	movs	r2, #184	; 0xb8
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f006 fab1 	bl	8008284 <memset>
  if(huart->Instance==USART2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a5b      	ldr	r2, [pc, #364]	; (8001e94 <HAL_UART_MspInit+0x198>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d166      	bne.n	8001dfa <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d36:	f107 031c 	add.w	r3, r7, #28
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f001 fdf0 	bl	8003920 <HAL_RCCEx_PeriphCLKConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d46:	f7ff fe75 	bl	8001a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d4a:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <HAL_UART_MspInit+0x19c>)
 8001d4c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001d50:	4a51      	ldr	r2, [pc, #324]	; (8001e98 <HAL_UART_MspInit+0x19c>)
 8001d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d56:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001d5a:	4b4f      	ldr	r3, [pc, #316]	; (8001e98 <HAL_UART_MspInit+0x19c>)
 8001d5c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	4b4b      	ldr	r3, [pc, #300]	; (8001e98 <HAL_UART_MspInit+0x19c>)
 8001d6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d6e:	4a4a      	ldr	r2, [pc, #296]	; (8001e98 <HAL_UART_MspInit+0x19c>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001d78:	4b47      	ldr	r3, [pc, #284]	; (8001e98 <HAL_UART_MspInit+0x19c>)
 8001d7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d86:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <HAL_UART_MspInit+0x19c>)
 8001d88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d8c:	4a42      	ldr	r2, [pc, #264]	; (8001e98 <HAL_UART_MspInit+0x19c>)
 8001d8e:	f043 0308 	orr.w	r3, r3, #8
 8001d92:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001d96:	4b40      	ldr	r3, [pc, #256]	; (8001e98 <HAL_UART_MspInit+0x19c>)
 8001d98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001da4:	2304      	movs	r3, #4
 8001da6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dbc:	2307      	movs	r3, #7
 8001dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4834      	ldr	r0, [pc, #208]	; (8001e9c <HAL_UART_MspInit+0x1a0>)
 8001dca:	f000 fbdb 	bl	8002584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dce:	2340      	movs	r3, #64	; 0x40
 8001dd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de6:	2307      	movs	r3, #7
 8001de8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001df0:	4619      	mov	r1, r3
 8001df2:	482b      	ldr	r0, [pc, #172]	; (8001ea0 <HAL_UART_MspInit+0x1a4>)
 8001df4:	f000 fbc6 	bl	8002584 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001df8:	e047      	b.n	8001e8a <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART3)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a29      	ldr	r2, [pc, #164]	; (8001ea4 <HAL_UART_MspInit+0x1a8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d142      	bne.n	8001e8a <HAL_UART_MspInit+0x18e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e04:	2302      	movs	r3, #2
 8001e06:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	4618      	mov	r0, r3
 8001e14:	f001 fd84 	bl	8003920 <HAL_RCCEx_PeriphCLKConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_UART_MspInit+0x126>
      Error_Handler();
 8001e1e:	f7ff fe09 	bl	8001a34 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e22:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_UART_MspInit+0x19c>)
 8001e24:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e28:	4a1b      	ldr	r2, [pc, #108]	; (8001e98 <HAL_UART_MspInit+0x19c>)
 8001e2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e2e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_UART_MspInit+0x19c>)
 8001e34:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e40:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <HAL_UART_MspInit+0x19c>)
 8001e42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e46:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <HAL_UART_MspInit+0x19c>)
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <HAL_UART_MspInit+0x19c>)
 8001e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001e5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e78:	2307      	movs	r3, #7
 8001e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4806      	ldr	r0, [pc, #24]	; (8001ea0 <HAL_UART_MspInit+0x1a4>)
 8001e86:	f000 fb7d 	bl	8002584 <HAL_GPIO_Init>
}
 8001e8a:	bf00      	nop
 8001e8c:	37e8      	adds	r7, #232	; 0xe8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40004400 	.word	0x40004400
 8001e98:	58024400 	.word	0x58024400
 8001e9c:	58020000 	.word	0x58020000
 8001ea0:	58020c00 	.word	0x58020c00
 8001ea4:	40004800 	.word	0x40004800

08001ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <NMI_Handler+0x4>

08001eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <HardFault_Handler+0x4>

08001eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <MemManage_Handler+0x4>

08001eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <BusFault_Handler+0x4>

08001ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <UsageFault_Handler+0x4>

08001ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef4:	f000 fa16 	bl	8002324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}

08001efc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <TIM1_UP_IRQHandler+0x10>)
 8001f02:	f003 fd57 	bl	80059b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	24000234 	.word	0x24000234

08001f10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f14:	4802      	ldr	r0, [pc, #8]	; (8001f20 <TIM2_IRQHandler+0x10>)
 8001f16:	f003 fd4d 	bl	80059b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	24000280 	.word	0x24000280

08001f24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <TIM3_IRQHandler+0x10>)
 8001f2a:	f003 fd43 	bl	80059b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	240002cc 	.word	0x240002cc

08001f38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <TIM4_IRQHandler+0x10>)
 8001f3e:	f003 fd39 	bl	80059b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	24000318 	.word	0x24000318

08001f4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001f50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f54:	f000 fcdf 	bl	8002916 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001f62:	f003 fd27 	bl	80059b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	24000364 	.word	0x24000364

08001f70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
	return 1;
 8001f74:	2301      	movs	r3, #1
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <_kill>:

int _kill(int pid, int sig)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f8a:	f006 f951 	bl	8008230 <__errno>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2216      	movs	r2, #22
 8001f92:	601a      	str	r2, [r3, #0]
	return -1;
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <_exit>:

void _exit (int status)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ffe7 	bl	8001f80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fb2:	e7fe      	b.n	8001fb2 <_exit+0x12>

08001fb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	e00a      	b.n	8001fdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fc6:	f3af 8000 	nop.w
 8001fca:	4601      	mov	r1, r0
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	60ba      	str	r2, [r7, #8]
 8001fd2:	b2ca      	uxtb	r2, r1
 8001fd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	dbf0      	blt.n	8001fc6 <_read+0x12>
	}

return len;
 8001fe4:	687b      	ldr	r3, [r7, #4]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	e009      	b.n	8002014 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	60ba      	str	r2, [r7, #8]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fab9 	bl	8001580 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3301      	adds	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	429a      	cmp	r2, r3
 800201a:	dbf1      	blt.n	8002000 <_write+0x12>
	}
	return len;
 800201c:	687b      	ldr	r3, [r7, #4]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <_close>:

int _close(int file)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
	return -1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800204e:	605a      	str	r2, [r3, #4]
	return 0;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <_isatty>:

int _isatty(int file)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
	return 1;
 8002066:	2301      	movs	r3, #1
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
	return 0;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002098:	4a14      	ldr	r2, [pc, #80]	; (80020ec <_sbrk+0x5c>)
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <_sbrk+0x60>)
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <_sbrk+0x64>)
 80020ae:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <_sbrk+0x68>)
 80020b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d207      	bcs.n	80020d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c0:	f006 f8b6 	bl	8008230 <__errno>
 80020c4:	4603      	mov	r3, r0
 80020c6:	220c      	movs	r2, #12
 80020c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
 80020ce:	e009      	b.n	80020e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <_sbrk+0x64>)
 80020e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	24100000 	.word	0x24100000
 80020f0:	00000400 	.word	0x00000400
 80020f4:	24000560 	.word	0x24000560
 80020f8:	24000578 	.word	0x24000578

080020fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002100:	4b32      	ldr	r3, [pc, #200]	; (80021cc <SystemInit+0xd0>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	4a31      	ldr	r2, [pc, #196]	; (80021cc <SystemInit+0xd0>)
 8002108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800210c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002110:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <SystemInit+0xd4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	2b02      	cmp	r3, #2
 800211a:	d807      	bhi.n	800212c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800211c:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <SystemInit+0xd4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f023 030f 	bic.w	r3, r3, #15
 8002124:	4a2a      	ldr	r2, [pc, #168]	; (80021d0 <SystemInit+0xd4>)
 8002126:	f043 0303 	orr.w	r3, r3, #3
 800212a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800212c:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <SystemInit+0xd8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a28      	ldr	r2, [pc, #160]	; (80021d4 <SystemInit+0xd8>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002138:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <SystemInit+0xd8>)
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800213e:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <SystemInit+0xd8>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	4924      	ldr	r1, [pc, #144]	; (80021d4 <SystemInit+0xd8>)
 8002144:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <SystemInit+0xdc>)
 8002146:	4013      	ands	r3, r2
 8002148:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800214a:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <SystemInit+0xd4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <SystemInit+0xd4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 030f 	bic.w	r3, r3, #15
 800215e:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <SystemInit+0xd4>)
 8002160:	f043 0303 	orr.w	r3, r3, #3
 8002164:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <SystemInit+0xd8>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <SystemInit+0xd8>)
 800216e:	2200      	movs	r2, #0
 8002170:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <SystemInit+0xd8>)
 8002174:	2200      	movs	r2, #0
 8002176:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002178:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <SystemInit+0xd8>)
 800217a:	4a18      	ldr	r2, [pc, #96]	; (80021dc <SystemInit+0xe0>)
 800217c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <SystemInit+0xd8>)
 8002180:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <SystemInit+0xe4>)
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <SystemInit+0xd8>)
 8002186:	4a17      	ldr	r2, [pc, #92]	; (80021e4 <SystemInit+0xe8>)
 8002188:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <SystemInit+0xd8>)
 800218c:	2200      	movs	r2, #0
 800218e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002190:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <SystemInit+0xd8>)
 8002192:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <SystemInit+0xe8>)
 8002194:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <SystemInit+0xd8>)
 8002198:	2200      	movs	r2, #0
 800219a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800219c:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <SystemInit+0xd8>)
 800219e:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <SystemInit+0xe8>)
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <SystemInit+0xd8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <SystemInit+0xd8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <SystemInit+0xd8>)
 80021ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021b4:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <SystemInit+0xd8>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <SystemInit+0xec>)
 80021bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80021c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00
 80021d0:	52002000 	.word	0x52002000
 80021d4:	58024400 	.word	0x58024400
 80021d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80021dc:	02020200 	.word	0x02020200
 80021e0:	01ff0000 	.word	0x01ff0000
 80021e4:	01010280 	.word	0x01010280
 80021e8:	52004000 	.word	0x52004000

080021ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002224 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021f0:	f7ff ff84 	bl	80020fc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021f4:	480c      	ldr	r0, [pc, #48]	; (8002228 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021f6:	490d      	ldr	r1, [pc, #52]	; (800222c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021f8:	4a0d      	ldr	r2, [pc, #52]	; (8002230 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021fc:	e002      	b.n	8002204 <LoopCopyDataInit>

080021fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002202:	3304      	adds	r3, #4

08002204 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002208:	d3f9      	bcc.n	80021fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800220c:	4c0a      	ldr	r4, [pc, #40]	; (8002238 <LoopFillZerobss+0x22>)
  movs r3, #0
 800220e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002210:	e001      	b.n	8002216 <LoopFillZerobss>

08002212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002214:	3204      	adds	r2, #4

08002216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002218:	d3fb      	bcc.n	8002212 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800221a:	f006 f80f 	bl	800823c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800221e:	f7fe fce3 	bl	8000be8 <main>
  bx  lr
 8002222:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002224:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002228:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800222c:	2400020c 	.word	0x2400020c
  ldr r2, =_sidata
 8002230:	0800cebc 	.word	0x0800cebc
  ldr r2, =_sbss
 8002234:	24000210 	.word	0x24000210
  ldr r4, =_ebss
 8002238:	24000578 	.word	0x24000578

0800223c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800223c:	e7fe      	b.n	800223c <ADC_IRQHandler>
	...

08002240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002246:	2003      	movs	r0, #3
 8002248:	f000 f95c 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800224c:	f001 f992 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_Init+0x68>)
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	4913      	ldr	r1, [pc, #76]	; (80022ac <HAL_Init+0x6c>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
 8002268:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_Init+0x68>)
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <HAL_Init+0x6c>)
 8002274:	5cd3      	ldrb	r3, [r2, r3]
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
 8002280:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <HAL_Init+0x70>)
 8002282:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002284:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <HAL_Init+0x74>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800228a:	2000      	movs	r0, #0
 800228c:	f000 f814 	bl	80022b8 <HAL_InitTick>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e002      	b.n	80022a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800229a:	f7ff fbd1 	bl	8001a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	58024400 	.word	0x58024400
 80022ac:	0800c9c4 	.word	0x0800c9c4
 80022b0:	2400002c 	.word	0x2400002c
 80022b4:	24000028 	.word	0x24000028

080022b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80022c0:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_InitTick+0x60>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e021      	b.n	8002310 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <HAL_InitTick+0x64>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_InitTick+0x60>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022da:	fbb3 f3f1 	udiv	r3, r3, r1
 80022de:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f941 	bl	800256a <HAL_SYSTICK_Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00e      	b.n	8002310 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b0f      	cmp	r3, #15
 80022f6:	d80a      	bhi.n	800230e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f8:	2200      	movs	r2, #0
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002300:	f000 f90b 	bl	800251a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002304:	4a06      	ldr	r2, [pc, #24]	; (8002320 <HAL_InitTick+0x68>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	e000      	b.n	8002310 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	24000034 	.word	0x24000034
 800231c:	24000028 	.word	0x24000028
 8002320:	24000030 	.word	0x24000030

08002324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x20>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_IncTick+0x24>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4413      	add	r3, r2
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_IncTick+0x24>)
 8002336:	6013      	str	r3, [r2, #0]
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	24000034 	.word	0x24000034
 8002348:	24000564 	.word	0x24000564

0800234c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return uwTick;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_GetTick+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	24000564 	.word	0x24000564

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	4313      	orrs	r3, r2
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00
 80023a8:	05fa0000 	.word	0x05fa0000

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4907      	ldr	r1, [pc, #28]	; (8002400 <__NVIC_EnableIRQ+0x38>)
 80023e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	; (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
         );
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	; 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d0:	d301      	bcc.n	80024d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00f      	b.n	80024f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <SysTick_Config+0x40>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024de:	210f      	movs	r1, #15
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f7ff ff8e 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <SysTick_Config+0x40>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <SysTick_Config+0x40>)
 80024f0:	2207      	movs	r2, #7
 80024f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff29 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002528:	f7ff ff40 	bl	80023ac <__NVIC_GetPriorityGrouping>
 800252c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff90 	bl	8002458 <NVIC_EncodePriority>
 8002538:	4602      	mov	r2, r0
 800253a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff5f 	bl	8002404 <__NVIC_SetPriority>
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff33 	bl	80023c8 <__NVIC_EnableIRQ>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffa4 	bl	80024c0 <SysTick_Config>
 8002578:	4603      	mov	r3, r0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002592:	4b89      	ldr	r3, [pc, #548]	; (80027b8 <HAL_GPIO_Init+0x234>)
 8002594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002596:	e194      	b.n	80028c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8186 	beq.w	80028bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d005      	beq.n	80025c8 <HAL_GPIO_Init+0x44>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d130      	bne.n	800262a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025fe:	2201      	movs	r2, #1
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	091b      	lsrs	r3, r3, #4
 8002614:	f003 0201 	and.w	r2, r3, #1
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b03      	cmp	r3, #3
 8002634:	d017      	beq.n	8002666 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d123      	bne.n	80026ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	08da      	lsrs	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3208      	adds	r2, #8
 800267a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	220f      	movs	r2, #15
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	08da      	lsrs	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3208      	adds	r2, #8
 80026b4:	69b9      	ldr	r1, [r7, #24]
 80026b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0203 	and.w	r2, r3, #3
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80e0 	beq.w	80028bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fc:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <HAL_GPIO_Init+0x238>)
 80026fe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002702:	4a2e      	ldr	r2, [pc, #184]	; (80027bc <HAL_GPIO_Init+0x238>)
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800270c:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <HAL_GPIO_Init+0x238>)
 800270e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800271a:	4a29      	ldr	r2, [pc, #164]	; (80027c0 <HAL_GPIO_Init+0x23c>)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	220f      	movs	r2, #15
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a20      	ldr	r2, [pc, #128]	; (80027c4 <HAL_GPIO_Init+0x240>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d052      	beq.n	80027ec <HAL_GPIO_Init+0x268>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a1f      	ldr	r2, [pc, #124]	; (80027c8 <HAL_GPIO_Init+0x244>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d031      	beq.n	80027b2 <HAL_GPIO_Init+0x22e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a1e      	ldr	r2, [pc, #120]	; (80027cc <HAL_GPIO_Init+0x248>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d02b      	beq.n	80027ae <HAL_GPIO_Init+0x22a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <HAL_GPIO_Init+0x24c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d025      	beq.n	80027aa <HAL_GPIO_Init+0x226>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <HAL_GPIO_Init+0x250>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d01f      	beq.n	80027a6 <HAL_GPIO_Init+0x222>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a1b      	ldr	r2, [pc, #108]	; (80027d8 <HAL_GPIO_Init+0x254>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d019      	beq.n	80027a2 <HAL_GPIO_Init+0x21e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a1a      	ldr	r2, [pc, #104]	; (80027dc <HAL_GPIO_Init+0x258>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_GPIO_Init+0x21a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <HAL_GPIO_Init+0x25c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00d      	beq.n	800279a <HAL_GPIO_Init+0x216>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a18      	ldr	r2, [pc, #96]	; (80027e4 <HAL_GPIO_Init+0x260>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d007      	beq.n	8002796 <HAL_GPIO_Init+0x212>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_GPIO_Init+0x264>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d101      	bne.n	8002792 <HAL_GPIO_Init+0x20e>
 800278e:	2309      	movs	r3, #9
 8002790:	e02d      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 8002792:	230a      	movs	r3, #10
 8002794:	e02b      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 8002796:	2308      	movs	r3, #8
 8002798:	e029      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 800279a:	2307      	movs	r3, #7
 800279c:	e027      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 800279e:	2306      	movs	r3, #6
 80027a0:	e025      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 80027a2:	2305      	movs	r3, #5
 80027a4:	e023      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 80027a6:	2304      	movs	r3, #4
 80027a8:	e021      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 80027aa:	2303      	movs	r3, #3
 80027ac:	e01f      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e01d      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e01b      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 80027b6:	bf00      	nop
 80027b8:	58000080 	.word	0x58000080
 80027bc:	58024400 	.word	0x58024400
 80027c0:	58000400 	.word	0x58000400
 80027c4:	58020000 	.word	0x58020000
 80027c8:	58020400 	.word	0x58020400
 80027cc:	58020800 	.word	0x58020800
 80027d0:	58020c00 	.word	0x58020c00
 80027d4:	58021000 	.word	0x58021000
 80027d8:	58021400 	.word	0x58021400
 80027dc:	58021800 	.word	0x58021800
 80027e0:	58021c00 	.word	0x58021c00
 80027e4:	58022000 	.word	0x58022000
 80027e8:	58022400 	.word	0x58022400
 80027ec:	2300      	movs	r3, #0
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	f002 0203 	and.w	r2, r2, #3
 80027f4:	0092      	lsls	r2, r2, #2
 80027f6:	4093      	lsls	r3, r2
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027fe:	4938      	ldr	r1, [pc, #224]	; (80028e0 <HAL_GPIO_Init+0x35c>)
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	3302      	adds	r3, #2
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800280c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800283a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	3301      	adds	r3, #1
 80028c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f47f ae63 	bne.w	8002598 <HAL_GPIO_Init+0x14>
  }
}
 80028d2:	bf00      	nop
 80028d4:	bf00      	nop
 80028d6:	3724      	adds	r7, #36	; 0x24
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	58000400 	.word	0x58000400

080028e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	807b      	strh	r3, [r7, #2]
 80028f0:	4613      	mov	r3, r2
 80028f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028f4:	787b      	ldrb	r3, [r7, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002900:	e003      	b.n	800290a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	041a      	lsls	r2, r3, #16
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	619a      	str	r2, [r3, #24]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002924:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe ff21 	bl	8001784 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002954:	4b29      	ldr	r3, [pc, #164]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	2b06      	cmp	r3, #6
 800295e:	d00a      	beq.n	8002976 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002960:	4b26      	ldr	r3, [pc, #152]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	429a      	cmp	r2, r3
 800296c:	d001      	beq.n	8002972 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e040      	b.n	80029f4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e03e      	b.n	80029f4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002976:	4b21      	ldr	r3, [pc, #132]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800297e:	491f      	ldr	r1, [pc, #124]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4313      	orrs	r3, r2
 8002984:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002986:	f7ff fce1 	bl	800234c <HAL_GetTick>
 800298a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800298c:	e009      	b.n	80029a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800298e:	f7ff fcdd 	bl	800234c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800299c:	d901      	bls.n	80029a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e028      	b.n	80029f4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029a2:	4b16      	ldr	r3, [pc, #88]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ae:	d1ee      	bne.n	800298e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b1e      	cmp	r3, #30
 80029b4:	d008      	beq.n	80029c8 <HAL_PWREx_ConfigSupply+0x7c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b2e      	cmp	r3, #46	; 0x2e
 80029ba:	d005      	beq.n	80029c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b1d      	cmp	r3, #29
 80029c0:	d002      	beq.n	80029c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b2d      	cmp	r3, #45	; 0x2d
 80029c6:	d114      	bne.n	80029f2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80029c8:	f7ff fcc0 	bl	800234c <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80029ce:	e009      	b.n	80029e4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029d0:	f7ff fcbc 	bl	800234c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029de:	d901      	bls.n	80029e4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e007      	b.n	80029f4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f0:	d1ee      	bne.n	80029d0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	58024800 	.word	0x58024800

08002a00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08c      	sub	sp, #48	; 0x30
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e3f4      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 80b3 	beq.w	8002b86 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a20:	4b95      	ldr	r3, [pc, #596]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a2a:	4b93      	ldr	r3, [pc, #588]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d007      	beq.n	8002a46 <HAL_RCC_OscConfig+0x46>
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	2b18      	cmp	r3, #24
 8002a3a:	d112      	bne.n	8002a62 <HAL_RCC_OscConfig+0x62>
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d10d      	bne.n	8002a62 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a46:	4b8c      	ldr	r3, [pc, #560]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8098 	beq.w	8002b84 <HAL_RCC_OscConfig+0x184>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f040 8093 	bne.w	8002b84 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e3cc      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_OscConfig+0x7a>
 8002a6c:	4b82      	ldr	r3, [pc, #520]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a81      	ldr	r2, [pc, #516]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	e058      	b.n	8002b2c <HAL_RCC_OscConfig+0x12c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d112      	bne.n	8002aa8 <HAL_RCC_OscConfig+0xa8>
 8002a82:	4b7d      	ldr	r3, [pc, #500]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a7c      	ldr	r2, [pc, #496]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b7a      	ldr	r3, [pc, #488]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a79      	ldr	r2, [pc, #484]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	4b77      	ldr	r3, [pc, #476]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a76      	ldr	r2, [pc, #472]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e041      	b.n	8002b2c <HAL_RCC_OscConfig+0x12c>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab0:	d112      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xd8>
 8002ab2:	4b71      	ldr	r3, [pc, #452]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a70      	ldr	r2, [pc, #448]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b6e      	ldr	r3, [pc, #440]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a6d      	ldr	r2, [pc, #436]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002ac4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4b6b      	ldr	r3, [pc, #428]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a6a      	ldr	r2, [pc, #424]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e029      	b.n	8002b2c <HAL_RCC_OscConfig+0x12c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002ae0:	d112      	bne.n	8002b08 <HAL_RCC_OscConfig+0x108>
 8002ae2:	4b65      	ldr	r3, [pc, #404]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a64      	ldr	r2, [pc, #400]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b62      	ldr	r3, [pc, #392]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a61      	ldr	r2, [pc, #388]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b5f      	ldr	r3, [pc, #380]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a5e      	ldr	r2, [pc, #376]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e011      	b.n	8002b2c <HAL_RCC_OscConfig+0x12c>
 8002b08:	4b5b      	ldr	r3, [pc, #364]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a5a      	ldr	r2, [pc, #360]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	4b58      	ldr	r3, [pc, #352]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a57      	ldr	r2, [pc, #348]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b55      	ldr	r3, [pc, #340]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a54      	ldr	r2, [pc, #336]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7ff fc0a 	bl	800234c <HAL_GetTick>
 8002b38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7ff fc06 	bl	800234c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e356      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b4e:	4b4a      	ldr	r3, [pc, #296]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x13c>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7ff fbf6 	bl	800234c <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b64:	f7ff fbf2 	bl	800234c <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	; 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e342      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b76:	4b40      	ldr	r3, [pc, #256]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x164>
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 808d 	beq.w	8002cae <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b94:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b9e:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <HAL_RCC_OscConfig+0x1ba>
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	2b18      	cmp	r3, #24
 8002bae:	d137      	bne.n	8002c20 <HAL_RCC_OscConfig+0x220>
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d132      	bne.n	8002c20 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bba:	4b2f      	ldr	r3, [pc, #188]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1d2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e314      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bd2:	4b29      	ldr	r3, [pc, #164]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 0219 	bic.w	r2, r3, #25
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	4926      	ldr	r1, [pc, #152]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002be4:	f7ff fbb2 	bl	800234c <HAL_GetTick>
 8002be8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bec:	f7ff fbae 	bl	800234c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e2fe      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bfe:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	061b      	lsls	r3, r3, #24
 8002c18:	4917      	ldr	r1, [pc, #92]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c1e:	e046      	b.n	8002cae <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d029      	beq.n	8002c7c <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c28:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f023 0219 	bic.w	r2, r3, #25
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	4910      	ldr	r1, [pc, #64]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7ff fb87 	bl	800234c <HAL_GetTick>
 8002c3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c42:	f7ff fb83 	bl	800234c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e2d3      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	061b      	lsls	r3, r3, #24
 8002c6e:	4902      	ldr	r1, [pc, #8]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]
 8002c74:	e01b      	b.n	8002cae <HAL_RCC_OscConfig+0x2ae>
 8002c76:	bf00      	nop
 8002c78:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c7c:	4b97      	ldr	r3, [pc, #604]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a96      	ldr	r2, [pc, #600]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7ff fb60 	bl	800234c <HAL_GetTick>
 8002c8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c90:	f7ff fb5c 	bl	800234c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e2ac      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ca2:	4b8e      	ldr	r3, [pc, #568]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d06a      	beq.n	8002d90 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cba:	4b88      	ldr	r3, [pc, #544]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cc2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cc4:	4b85      	ldr	r3, [pc, #532]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d007      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x2e0>
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b18      	cmp	r3, #24
 8002cd4:	d11b      	bne.n	8002d0e <HAL_RCC_OscConfig+0x30e>
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d116      	bne.n	8002d0e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ce0:	4b7e      	ldr	r3, [pc, #504]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x2f8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	2b80      	cmp	r3, #128	; 0x80
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e281      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cf8:	4b78      	ldr	r3, [pc, #480]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	061b      	lsls	r3, r3, #24
 8002d06:	4975      	ldr	r1, [pc, #468]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d0c:	e040      	b.n	8002d90 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d023      	beq.n	8002d5e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d16:	4b71      	ldr	r3, [pc, #452]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a70      	ldr	r2, [pc, #448]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7ff fb13 	bl	800234c <HAL_GetTick>
 8002d26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d2a:	f7ff fb0f 	bl	800234c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e25f      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d3c:	4b67      	ldr	r3, [pc, #412]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d48:	4b64      	ldr	r3, [pc, #400]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	061b      	lsls	r3, r3, #24
 8002d56:	4961      	ldr	r1, [pc, #388]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60cb      	str	r3, [r1, #12]
 8002d5c:	e018      	b.n	8002d90 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d5e:	4b5f      	ldr	r3, [pc, #380]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a5e      	ldr	r2, [pc, #376]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6a:	f7ff faef 	bl	800234c <HAL_GetTick>
 8002d6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d72:	f7ff faeb 	bl	800234c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e23b      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d84:	4b55      	ldr	r3, [pc, #340]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d036      	beq.n	8002e0a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d019      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da4:	4b4d      	ldr	r3, [pc, #308]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da8:	4a4c      	ldr	r2, [pc, #304]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7ff facc 	bl	800234c <HAL_GetTick>
 8002db4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db8:	f7ff fac8 	bl	800234c <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e218      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dca:	4b44      	ldr	r3, [pc, #272]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0x3b8>
 8002dd6:	e018      	b.n	8002e0a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd8:	4b40      	ldr	r3, [pc, #256]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ddc:	4a3f      	ldr	r2, [pc, #252]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002dde:	f023 0301 	bic.w	r3, r3, #1
 8002de2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7ff fab2 	bl	800234c <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dec:	f7ff faae 	bl	800234c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e1fe      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dfe:	4b37      	ldr	r3, [pc, #220]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d036      	beq.n	8002e84 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d019      	beq.n	8002e52 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e1e:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a2e      	ldr	r2, [pc, #184]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e2a:	f7ff fa8f 	bl	800234c <HAL_GetTick>
 8002e2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e32:	f7ff fa8b 	bl	800234c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e1db      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e44:	4b25      	ldr	r3, [pc, #148]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x432>
 8002e50:	e018      	b.n	8002e84 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e52:	4b22      	ldr	r3, [pc, #136]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a21      	ldr	r2, [pc, #132]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e5e:	f7ff fa75 	bl	800234c <HAL_GetTick>
 8002e62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e66:	f7ff fa71 	bl	800234c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e1c1      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e78:	4b18      	ldr	r3, [pc, #96]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f0      	bne.n	8002e66 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80af 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_RCC_OscConfig+0x4e0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <HAL_RCC_OscConfig+0x4e0>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e9e:	f7ff fa55 	bl	800234c <HAL_GetTick>
 8002ea2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ea6:	f7ff fa51 	bl	800234c <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b64      	cmp	r3, #100	; 0x64
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e1a1      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_RCC_OscConfig+0x4e0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d10b      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4e4>
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	4a02      	ldr	r2, [pc, #8]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed8:	e05b      	b.n	8002f92 <HAL_RCC_OscConfig+0x592>
 8002eda:	bf00      	nop
 8002edc:	58024400 	.word	0x58024400
 8002ee0:	58024800 	.word	0x58024800
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d112      	bne.n	8002f12 <HAL_RCC_OscConfig+0x512>
 8002eec:	4b9d      	ldr	r3, [pc, #628]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a9c      	ldr	r2, [pc, #624]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	4b9a      	ldr	r3, [pc, #616]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a99      	ldr	r2, [pc, #612]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
 8002f04:	4b97      	ldr	r3, [pc, #604]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	4a96      	ldr	r2, [pc, #600]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f0a:	f023 0304 	bic.w	r3, r3, #4
 8002f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f10:	e03f      	b.n	8002f92 <HAL_RCC_OscConfig+0x592>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	d112      	bne.n	8002f40 <HAL_RCC_OscConfig+0x540>
 8002f1a:	4b92      	ldr	r3, [pc, #584]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	4a91      	ldr	r2, [pc, #580]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	6713      	str	r3, [r2, #112]	; 0x70
 8002f26:	4b8f      	ldr	r3, [pc, #572]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	4a8e      	ldr	r2, [pc, #568]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f30:	6713      	str	r3, [r2, #112]	; 0x70
 8002f32:	4b8c      	ldr	r3, [pc, #560]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	4a8b      	ldr	r2, [pc, #556]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3e:	e028      	b.n	8002f92 <HAL_RCC_OscConfig+0x592>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b85      	cmp	r3, #133	; 0x85
 8002f46:	d112      	bne.n	8002f6e <HAL_RCC_OscConfig+0x56e>
 8002f48:	4b86      	ldr	r3, [pc, #536]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	4a85      	ldr	r2, [pc, #532]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	6713      	str	r3, [r2, #112]	; 0x70
 8002f54:	4b83      	ldr	r3, [pc, #524]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	4a82      	ldr	r2, [pc, #520]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f60:	4b80      	ldr	r3, [pc, #512]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	4a7f      	ldr	r2, [pc, #508]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6c:	e011      	b.n	8002f92 <HAL_RCC_OscConfig+0x592>
 8002f6e:	4b7d      	ldr	r3, [pc, #500]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a7c      	ldr	r2, [pc, #496]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7a:	4b7a      	ldr	r3, [pc, #488]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	4a79      	ldr	r2, [pc, #484]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f80:	f023 0304 	bic.w	r3, r3, #4
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70
 8002f86:	4b77      	ldr	r3, [pc, #476]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	4a76      	ldr	r2, [pc, #472]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d015      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9a:	f7ff f9d7 	bl	800234c <HAL_GetTick>
 8002f9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7ff f9d3 	bl	800234c <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e121      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fb8:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ee      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x5a2>
 8002fc4:	e014      	b.n	8002ff0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc6:	f7ff f9c1 	bl	800234c <HAL_GetTick>
 8002fca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fcc:	e00a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fce:	f7ff f9bd 	bl	800234c <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e10b      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fe4:	4b5f      	ldr	r3, [pc, #380]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1ee      	bne.n	8002fce <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8100 	beq.w	80031fa <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ffa:	4b5a      	ldr	r3, [pc, #360]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003002:	2b18      	cmp	r3, #24
 8003004:	f000 80bb 	beq.w	800317e <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	2b02      	cmp	r3, #2
 800300e:	f040 8095 	bne.w	800313c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003012:	4b54      	ldr	r3, [pc, #336]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a53      	ldr	r2, [pc, #332]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8003018:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800301c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7ff f995 	bl	800234c <HAL_GetTick>
 8003022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003026:	f7ff f991 	bl	800234c <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e0e1      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003038:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f0      	bne.n	8003026 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003044:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8003046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003048:	4b47      	ldr	r3, [pc, #284]	; (8003168 <HAL_RCC_OscConfig+0x768>)
 800304a:	4013      	ands	r3, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003054:	0112      	lsls	r2, r2, #4
 8003056:	430a      	orrs	r2, r1
 8003058:	4942      	ldr	r1, [pc, #264]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 800305a:	4313      	orrs	r3, r2
 800305c:	628b      	str	r3, [r1, #40]	; 0x28
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	3b01      	subs	r3, #1
 8003064:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306c:	3b01      	subs	r3, #1
 800306e:	025b      	lsls	r3, r3, #9
 8003070:	b29b      	uxth	r3, r3
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	3b01      	subs	r3, #1
 800307a:	041b      	lsls	r3, r3, #16
 800307c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	3b01      	subs	r3, #1
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800308e:	4935      	ldr	r1, [pc, #212]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8003090:	4313      	orrs	r3, r2
 8003092:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003094:	4b33      	ldr	r3, [pc, #204]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	4a32      	ldr	r2, [pc, #200]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030a0:	4b30      	ldr	r3, [pc, #192]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a4:	4b31      	ldr	r3, [pc, #196]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030ac:	00d2      	lsls	r2, r2, #3
 80030ae:	492d      	ldr	r1, [pc, #180]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80030b4:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	f023 020c 	bic.w	r2, r3, #12
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	4928      	ldr	r1, [pc, #160]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030c6:	4b27      	ldr	r3, [pc, #156]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	f023 0202 	bic.w	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	4924      	ldr	r1, [pc, #144]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030d8:	4b22      	ldr	r3, [pc, #136]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	4a21      	ldr	r2, [pc, #132]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030e4:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030f0:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	4a1b      	ldr	r2, [pc, #108]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003108:	4b16      	ldr	r3, [pc, #88]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a15      	ldr	r2, [pc, #84]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 800310e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7ff f91a 	bl	800234c <HAL_GetTick>
 8003118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311c:	f7ff f916 	bl	800234c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e066      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0x71c>
 800313a:	e05e      	b.n	80031fa <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a08      	ldr	r2, [pc, #32]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8003142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7ff f900 	bl	800234c <HAL_GetTick>
 800314c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800314e:	e00f      	b.n	8003170 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003150:	f7ff f8fc 	bl	800234c <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d908      	bls.n	8003170 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e04c      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
 8003162:	bf00      	nop
 8003164:	58024400 	.word	0x58024400
 8003168:	fffffc0c 	.word	0xfffffc0c
 800316c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003170:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_RCC_OscConfig+0x804>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e9      	bne.n	8003150 <HAL_RCC_OscConfig+0x750>
 800317c:	e03d      	b.n	80031fa <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800317e:	4b21      	ldr	r3, [pc, #132]	; (8003204 <HAL_RCC_OscConfig+0x804>)
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003184:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <HAL_RCC_OscConfig+0x804>)
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	2b01      	cmp	r3, #1
 8003190:	d031      	beq.n	80031f6 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f003 0203 	and.w	r2, r3, #3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d12a      	bne.n	80031f6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d122      	bne.n	80031f6 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d11a      	bne.n	80031f6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	0a5b      	lsrs	r3, r3, #9
 80031c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031cc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d111      	bne.n	80031f6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	0c1b      	lsrs	r3, r3, #16
 80031d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d108      	bne.n	80031f6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	0e1b      	lsrs	r3, r3, #24
 80031e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d001      	beq.n	80031fa <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3730      	adds	r7, #48	; 0x30
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	58024400 	.word	0x58024400

08003208 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e19c      	b.n	8003556 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800321c:	4b8a      	ldr	r3, [pc, #552]	; (8003448 <HAL_RCC_ClockConfig+0x240>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d910      	bls.n	800324c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b87      	ldr	r3, [pc, #540]	; (8003448 <HAL_RCC_ClockConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 020f 	bic.w	r2, r3, #15
 8003232:	4985      	ldr	r1, [pc, #532]	; (8003448 <HAL_RCC_ClockConfig+0x240>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b83      	ldr	r3, [pc, #524]	; (8003448 <HAL_RCC_ClockConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e184      	b.n	8003556 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d010      	beq.n	800327a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	4b7b      	ldr	r3, [pc, #492]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003264:	429a      	cmp	r2, r3
 8003266:	d908      	bls.n	800327a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003268:	4b78      	ldr	r3, [pc, #480]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	4975      	ldr	r1, [pc, #468]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 8003276:	4313      	orrs	r3, r2
 8003278:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d010      	beq.n	80032a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	4b70      	ldr	r3, [pc, #448]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003292:	429a      	cmp	r2, r3
 8003294:	d908      	bls.n	80032a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003296:	4b6d      	ldr	r3, [pc, #436]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	496a      	ldr	r1, [pc, #424]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d010      	beq.n	80032d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699a      	ldr	r2, [r3, #24]
 80032b8:	4b64      	ldr	r3, [pc, #400]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d908      	bls.n	80032d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032c4:	4b61      	ldr	r3, [pc, #388]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	495e      	ldr	r1, [pc, #376]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d010      	beq.n	8003304 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	4b59      	ldr	r3, [pc, #356]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d908      	bls.n	8003304 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032f2:	4b56      	ldr	r3, [pc, #344]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	4953      	ldr	r1, [pc, #332]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 8003300:	4313      	orrs	r3, r2
 8003302:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d010      	beq.n	8003332 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	4b4d      	ldr	r3, [pc, #308]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	429a      	cmp	r2, r3
 800331e:	d908      	bls.n	8003332 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003320:	4b4a      	ldr	r3, [pc, #296]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f023 020f 	bic.w	r2, r3, #15
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4947      	ldr	r1, [pc, #284]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 800332e:	4313      	orrs	r3, r2
 8003330:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d055      	beq.n	80033ea <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800333e:	4b43      	ldr	r3, [pc, #268]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	4940      	ldr	r1, [pc, #256]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 800334c:	4313      	orrs	r3, r2
 800334e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d107      	bne.n	8003368 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003358:	4b3c      	ldr	r3, [pc, #240]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d121      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0f6      	b.n	8003556 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b03      	cmp	r3, #3
 800336e:	d107      	bne.n	8003380 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003370:	4b36      	ldr	r3, [pc, #216]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d115      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0ea      	b.n	8003556 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d107      	bne.n	8003398 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003388:	4b30      	ldr	r3, [pc, #192]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d109      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0de      	b.n	8003556 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003398:	4b2c      	ldr	r3, [pc, #176]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0d6      	b.n	8003556 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033a8:	4b28      	ldr	r3, [pc, #160]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f023 0207 	bic.w	r2, r3, #7
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4925      	ldr	r1, [pc, #148]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe ffc7 	bl	800234c <HAL_GetTick>
 80033be:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c2:	f7fe ffc3 	bl	800234c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e0be      	b.n	8003556 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d8:	4b1c      	ldr	r3, [pc, #112]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d1eb      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d010      	beq.n	8003418 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	4b14      	ldr	r3, [pc, #80]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	429a      	cmp	r2, r3
 8003404:	d208      	bcs.n	8003418 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003406:	4b11      	ldr	r3, [pc, #68]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f023 020f 	bic.w	r2, r3, #15
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	490e      	ldr	r1, [pc, #56]	; (800344c <HAL_RCC_ClockConfig+0x244>)
 8003414:	4313      	orrs	r3, r2
 8003416:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_ClockConfig+0x240>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d214      	bcs.n	8003450 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <HAL_RCC_ClockConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 020f 	bic.w	r2, r3, #15
 800342e:	4906      	ldr	r1, [pc, #24]	; (8003448 <HAL_RCC_ClockConfig+0x240>)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003436:	4b04      	ldr	r3, [pc, #16]	; (8003448 <HAL_RCC_ClockConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d005      	beq.n	8003450 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e086      	b.n	8003556 <HAL_RCC_ClockConfig+0x34e>
 8003448:	52002000 	.word	0x52002000
 800344c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d010      	beq.n	800347e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	4b3f      	ldr	r3, [pc, #252]	; (8003560 <HAL_RCC_ClockConfig+0x358>)
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003468:	429a      	cmp	r2, r3
 800346a:	d208      	bcs.n	800347e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800346c:	4b3c      	ldr	r3, [pc, #240]	; (8003560 <HAL_RCC_ClockConfig+0x358>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	4939      	ldr	r1, [pc, #228]	; (8003560 <HAL_RCC_ClockConfig+0x358>)
 800347a:	4313      	orrs	r3, r2
 800347c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d010      	beq.n	80034ac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	4b34      	ldr	r3, [pc, #208]	; (8003560 <HAL_RCC_ClockConfig+0x358>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003496:	429a      	cmp	r2, r3
 8003498:	d208      	bcs.n	80034ac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800349a:	4b31      	ldr	r3, [pc, #196]	; (8003560 <HAL_RCC_ClockConfig+0x358>)
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	492e      	ldr	r1, [pc, #184]	; (8003560 <HAL_RCC_ClockConfig+0x358>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d010      	beq.n	80034da <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699a      	ldr	r2, [r3, #24]
 80034bc:	4b28      	ldr	r3, [pc, #160]	; (8003560 <HAL_RCC_ClockConfig+0x358>)
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d208      	bcs.n	80034da <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034c8:	4b25      	ldr	r3, [pc, #148]	; (8003560 <HAL_RCC_ClockConfig+0x358>)
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	4922      	ldr	r1, [pc, #136]	; (8003560 <HAL_RCC_ClockConfig+0x358>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d010      	beq.n	8003508 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69da      	ldr	r2, [r3, #28]
 80034ea:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <HAL_RCC_ClockConfig+0x358>)
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d208      	bcs.n	8003508 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80034f6:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <HAL_RCC_ClockConfig+0x358>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	4917      	ldr	r1, [pc, #92]	; (8003560 <HAL_RCC_ClockConfig+0x358>)
 8003504:	4313      	orrs	r3, r2
 8003506:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003508:	f000 f834 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b14      	ldr	r3, [pc, #80]	; (8003560 <HAL_RCC_ClockConfig+0x358>)
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	0a1b      	lsrs	r3, r3, #8
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	4912      	ldr	r1, [pc, #72]	; (8003564 <HAL_RCC_ClockConfig+0x35c>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
 8003524:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003526:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <HAL_RCC_ClockConfig+0x358>)
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	4a0d      	ldr	r2, [pc, #52]	; (8003564 <HAL_RCC_ClockConfig+0x35c>)
 8003530:	5cd3      	ldrb	r3, [r2, r3]
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
 800353c:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <HAL_RCC_ClockConfig+0x360>)
 800353e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003540:	4a0a      	ldr	r2, [pc, #40]	; (800356c <HAL_RCC_ClockConfig+0x364>)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003546:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <HAL_RCC_ClockConfig+0x368>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe feb4 	bl	80022b8 <HAL_InitTick>
 8003550:	4603      	mov	r3, r0
 8003552:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	58024400 	.word	0x58024400
 8003564:	0800c9c4 	.word	0x0800c9c4
 8003568:	2400002c 	.word	0x2400002c
 800356c:	24000028 	.word	0x24000028
 8003570:	24000030 	.word	0x24000030

08003574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003574:	b480      	push	{r7}
 8003576:	b089      	sub	sp, #36	; 0x24
 8003578:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800357a:	4bb3      	ldr	r3, [pc, #716]	; (8003848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003582:	2b18      	cmp	r3, #24
 8003584:	f200 8155 	bhi.w	8003832 <HAL_RCC_GetSysClockFreq+0x2be>
 8003588:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <HAL_RCC_GetSysClockFreq+0x1c>)
 800358a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358e:	bf00      	nop
 8003590:	080035f5 	.word	0x080035f5
 8003594:	08003833 	.word	0x08003833
 8003598:	08003833 	.word	0x08003833
 800359c:	08003833 	.word	0x08003833
 80035a0:	08003833 	.word	0x08003833
 80035a4:	08003833 	.word	0x08003833
 80035a8:	08003833 	.word	0x08003833
 80035ac:	08003833 	.word	0x08003833
 80035b0:	0800361b 	.word	0x0800361b
 80035b4:	08003833 	.word	0x08003833
 80035b8:	08003833 	.word	0x08003833
 80035bc:	08003833 	.word	0x08003833
 80035c0:	08003833 	.word	0x08003833
 80035c4:	08003833 	.word	0x08003833
 80035c8:	08003833 	.word	0x08003833
 80035cc:	08003833 	.word	0x08003833
 80035d0:	08003621 	.word	0x08003621
 80035d4:	08003833 	.word	0x08003833
 80035d8:	08003833 	.word	0x08003833
 80035dc:	08003833 	.word	0x08003833
 80035e0:	08003833 	.word	0x08003833
 80035e4:	08003833 	.word	0x08003833
 80035e8:	08003833 	.word	0x08003833
 80035ec:	08003833 	.word	0x08003833
 80035f0:	08003627 	.word	0x08003627
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035f4:	4b94      	ldr	r3, [pc, #592]	; (8003848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d009      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003600:	4b91      	ldr	r3, [pc, #580]	; (8003848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	08db      	lsrs	r3, r3, #3
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	4a90      	ldr	r2, [pc, #576]	; (800384c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
 8003610:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003612:	e111      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003614:	4b8d      	ldr	r3, [pc, #564]	; (800384c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003616:	61bb      	str	r3, [r7, #24]
    break;
 8003618:	e10e      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800361a:	4b8d      	ldr	r3, [pc, #564]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800361c:	61bb      	str	r3, [r7, #24]
    break;
 800361e:	e10b      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003620:	4b8c      	ldr	r3, [pc, #560]	; (8003854 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003622:	61bb      	str	r3, [r7, #24]
    break;
 8003624:	e108      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003626:	4b88      	ldr	r3, [pc, #544]	; (8003848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003630:	4b85      	ldr	r3, [pc, #532]	; (8003848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800363a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800363c:	4b82      	ldr	r3, [pc, #520]	; (8003848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003646:	4b80      	ldr	r3, [pc, #512]	; (8003848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364a:	08db      	lsrs	r3, r3, #3
 800364c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	fb02 f303 	mul.w	r3, r2, r3
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80e1 	beq.w	800382c <HAL_RCC_GetSysClockFreq+0x2b8>
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b02      	cmp	r3, #2
 800366e:	f000 8083 	beq.w	8003778 <HAL_RCC_GetSysClockFreq+0x204>
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b02      	cmp	r3, #2
 8003676:	f200 80a1 	bhi.w	80037bc <HAL_RCC_GetSysClockFreq+0x248>
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x114>
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d056      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003686:	e099      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003688:	4b6f      	ldr	r3, [pc, #444]	; (8003848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b00      	cmp	r3, #0
 8003692:	d02d      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003694:	4b6c      	ldr	r3, [pc, #432]	; (8003848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	08db      	lsrs	r3, r3, #3
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	4a6b      	ldr	r2, [pc, #428]	; (800384c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
 80036a4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	ee07 3a90 	vmov	s15, r3
 80036ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036be:	4b62      	ldr	r3, [pc, #392]	; (8003848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80036d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003858 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80036ee:	e087      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800385c <HAL_RCC_GetSysClockFreq+0x2e8>
 80036fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003702:	4b51      	ldr	r3, [pc, #324]	; (8003848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003712:	ed97 6a02 	vldr	s12, [r7, #8]
 8003716:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003858 <HAL_RCC_GetSysClockFreq+0x2e4>
 800371a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800371e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800372a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800372e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003732:	e065      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800373e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003860 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003746:	4b40      	ldr	r3, [pc, #256]	; (8003848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003756:	ed97 6a02 	vldr	s12, [r7, #8]
 800375a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003858 <HAL_RCC_GetSysClockFreq+0x2e4>
 800375e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800376a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800376e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003776:	e043      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	ee07 3a90 	vmov	s15, r3
 800377e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003782:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003864 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800378a:	4b2f      	ldr	r3, [pc, #188]	; (8003848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800379a:	ed97 6a02 	vldr	s12, [r7, #8]
 800379e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003858 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037ba:	e021      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003860 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ce:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037de:	ed97 6a02 	vldr	s12, [r7, #8]
 80037e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003858 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037fe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003800:	4b11      	ldr	r3, [pc, #68]	; (8003848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	0a5b      	lsrs	r3, r3, #9
 8003806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800380a:	3301      	adds	r3, #1
 800380c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	ee07 3a90 	vmov	s15, r3
 8003814:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003818:	edd7 6a07 	vldr	s13, [r7, #28]
 800381c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003824:	ee17 3a90 	vmov	r3, s15
 8003828:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800382a:	e005      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]
    break;
 8003830:	e002      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003832:	4b07      	ldr	r3, [pc, #28]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003834:	61bb      	str	r3, [r7, #24]
    break;
 8003836:	bf00      	nop
  }

  return sysclockfreq;
 8003838:	69bb      	ldr	r3, [r7, #24]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3724      	adds	r7, #36	; 0x24
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	58024400 	.word	0x58024400
 800384c:	03d09000 	.word	0x03d09000
 8003850:	003d0900 	.word	0x003d0900
 8003854:	007a1200 	.word	0x007a1200
 8003858:	46000000 	.word	0x46000000
 800385c:	4c742400 	.word	0x4c742400
 8003860:	4a742400 	.word	0x4a742400
 8003864:	4af42400 	.word	0x4af42400

08003868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800386e:	f7ff fe81 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 8003872:	4602      	mov	r2, r0
 8003874:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	0a1b      	lsrs	r3, r3, #8
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	490f      	ldr	r1, [pc, #60]	; (80038bc <HAL_RCC_GetHCLKFreq+0x54>)
 8003880:	5ccb      	ldrb	r3, [r1, r3]
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	fa22 f303 	lsr.w	r3, r2, r3
 800388a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	4a09      	ldr	r2, [pc, #36]	; (80038bc <HAL_RCC_GetHCLKFreq+0x54>)
 8003896:	5cd3      	ldrb	r3, [r2, r3]
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	4a07      	ldr	r2, [pc, #28]	; (80038c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80038a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038a6:	4a07      	ldr	r2, [pc, #28]	; (80038c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80038ac:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	58024400 	.word	0x58024400
 80038bc:	0800c9c4 	.word	0x0800c9c4
 80038c0:	2400002c 	.word	0x2400002c
 80038c4:	24000028 	.word	0x24000028

080038c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80038cc:	f7ff ffcc 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b06      	ldr	r3, [pc, #24]	; (80038ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4904      	ldr	r1, [pc, #16]	; (80038f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	58024400 	.word	0x58024400
 80038f0:	0800c9c4 	.word	0x0800c9c4

080038f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80038f8:	f7ff ffb6 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 80038fc:	4602      	mov	r2, r0
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	4904      	ldr	r1, [pc, #16]	; (800391c <HAL_RCC_GetPCLK2Freq+0x28>)
 800390a:	5ccb      	ldrb	r3, [r1, r3]
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	58024400 	.word	0x58024400
 800391c:	0800c9c4 	.word	0x0800c9c4

08003920 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003928:	2300      	movs	r3, #0
 800392a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800392c:	2300      	movs	r3, #0
 800392e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d03f      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003940:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003944:	d02a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003946:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800394a:	d824      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800394c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003950:	d018      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003956:	d81e      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800395c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003960:	d007      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003962:	e018      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003964:	4b9f      	ldr	r3, [pc, #636]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	4a9e      	ldr	r2, [pc, #632]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800396a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003970:	e015      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3304      	adds	r3, #4
 8003976:	2102      	movs	r1, #2
 8003978:	4618      	mov	r0, r3
 800397a:	f001 f99b 	bl	8004cb4 <RCCEx_PLL2_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003982:	e00c      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3324      	adds	r3, #36	; 0x24
 8003988:	2102      	movs	r1, #2
 800398a:	4618      	mov	r0, r3
 800398c:	f001 fa44 	bl	8004e18 <RCCEx_PLL3_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003994:	e003      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
      break;
 800399a:	e000      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800399c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800399e:	7dfb      	ldrb	r3, [r7, #23]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80039a4:	4b8f      	ldr	r3, [pc, #572]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039b0:	498c      	ldr	r1, [pc, #560]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	650b      	str	r3, [r1, #80]	; 0x50
 80039b6:	e001      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
 80039ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d03d      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d826      	bhi.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80039d0:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d6:	bf00      	nop
 80039d8:	080039ed 	.word	0x080039ed
 80039dc:	080039fb 	.word	0x080039fb
 80039e0:	08003a0d 	.word	0x08003a0d
 80039e4:	08003a25 	.word	0x08003a25
 80039e8:	08003a25 	.word	0x08003a25
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ec:	4b7d      	ldr	r3, [pc, #500]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	4a7c      	ldr	r2, [pc, #496]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039f8:	e015      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3304      	adds	r3, #4
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f001 f957 	bl	8004cb4 <RCCEx_PLL2_Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a0a:	e00c      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3324      	adds	r3, #36	; 0x24
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f001 fa00 	bl	8004e18 <RCCEx_PLL3_Config>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a1c:	e003      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
      break;
 8003a22:	e000      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d109      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a2c:	4b6d      	ldr	r3, [pc, #436]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a30:	f023 0207 	bic.w	r2, r3, #7
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a38:	496a      	ldr	r1, [pc, #424]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	650b      	str	r3, [r1, #80]	; 0x50
 8003a3e:	e001      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a40:	7dfb      	ldrb	r3, [r7, #23]
 8003a42:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d04a      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003a58:	d031      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003a5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003a5e:	d82b      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a64:	d02d      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a6a:	d825      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003a6c:	2bc0      	cmp	r3, #192	; 0xc0
 8003a6e:	d02a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a70:	2bc0      	cmp	r3, #192	; 0xc0
 8003a72:	d821      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003a74:	2b80      	cmp	r3, #128	; 0x80
 8003a76:	d016      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003a78:	2b80      	cmp	r3, #128	; 0x80
 8003a7a:	d81d      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003a80:	2b40      	cmp	r3, #64	; 0x40
 8003a82:	d007      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003a84:	e018      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a86:	4b57      	ldr	r3, [pc, #348]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	4a56      	ldr	r2, [pc, #344]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003a92:	e019      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f001 f90a 	bl	8004cb4 <RCCEx_PLL2_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003aa4:	e010      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3324      	adds	r3, #36	; 0x24
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 f9b3 	bl	8004e18 <RCCEx_PLL3_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003ab6:	e007      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
      break;
 8003abc:	e004      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e002      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003ac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003ace:	4b45      	ldr	r3, [pc, #276]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	4942      	ldr	r1, [pc, #264]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	650b      	str	r3, [r1, #80]	; 0x50
 8003ae0:	e001      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
 8003ae4:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d04f      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003afa:	d036      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003afc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003b00:	d830      	bhi.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b06:	d032      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0c:	d82a      	bhi.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003b0e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b12:	d02e      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003b14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b18:	d824      	bhi.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1e:	d018      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b24:	d81e      	bhi.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b2e:	d007      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003b30:	e018      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b32:	4b2c      	ldr	r3, [pc, #176]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	4a2b      	ldr	r2, [pc, #172]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003b3e:	e019      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3304      	adds	r3, #4
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 f8b4 	bl	8004cb4 <RCCEx_PLL2_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003b50:	e010      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3324      	adds	r3, #36	; 0x24
 8003b56:	2100      	movs	r1, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f001 f95d 	bl	8004e18 <RCCEx_PLL3_Config>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003b62:	e007      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	75fb      	strb	r3, [r7, #23]
      break;
 8003b68:	e004      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003b6a:	bf00      	nop
 8003b6c:	e002      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e000      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003b7a:	4b1a      	ldr	r3, [pc, #104]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b86:	4917      	ldr	r1, [pc, #92]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	650b      	str	r3, [r1, #80]	; 0x50
 8003b8c:	e001      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d034      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba2:	2b30      	cmp	r3, #48	; 0x30
 8003ba4:	d01c      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003ba6:	2b30      	cmp	r3, #48	; 0x30
 8003ba8:	d817      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d00c      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d813      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d018      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d10f      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003bc6:	e010      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	2102      	movs	r1, #2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f001 f870 	bl	8004cb4 <RCCEx_PLL2_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003bd8:	e007      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8003bde:	e004      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8003be0:	bf00      	nop
 8003be2:	e002      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003be4:	58024400 	.word	0x58024400
      break;
 8003be8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003bf0:	4b9b      	ldr	r3, [pc, #620]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfc:	4998      	ldr	r1, [pc, #608]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c02:	e001      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d047      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c1c:	d030      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003c1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c22:	d82a      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003c24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c28:	d02c      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003c2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c2e:	d824      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c34:	d018      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c3a:	d81e      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c44:	d007      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003c46:	e018      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c48:	4b85      	ldr	r3, [pc, #532]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	4a84      	ldr	r2, [pc, #528]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c54:	e017      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f001 f829 	bl	8004cb4 <RCCEx_PLL2_Config>
 8003c62:	4603      	mov	r3, r0
 8003c64:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c66:	e00e      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3324      	adds	r3, #36	; 0x24
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 f8d2 	bl	8004e18 <RCCEx_PLL3_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c78:	e005      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c7e:	e002      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003c80:	bf00      	nop
 8003c82:	e000      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003c84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c86:	7dfb      	ldrb	r3, [r7, #23]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c8c:	4b74      	ldr	r3, [pc, #464]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c90:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c98:	4971      	ldr	r1, [pc, #452]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	650b      	str	r3, [r1, #80]	; 0x50
 8003c9e:	e001      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
 8003ca2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d049      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb8:	d02e      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003cba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cbe:	d828      	bhi.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003cc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cc4:	d02a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003cc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cca:	d822      	bhi.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003ccc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cd0:	d026      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003cd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cd6:	d81c      	bhi.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003cd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cdc:	d010      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003cde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ce2:	d816      	bhi.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01d      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cec:	d111      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 ffdd 	bl	8004cb4 <RCCEx_PLL2_Config>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003cfe:	e012      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3324      	adds	r3, #36	; 0x24
 8003d04:	2101      	movs	r1, #1
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 f886 	bl	8004e18 <RCCEx_PLL3_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d10:	e009      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	75fb      	strb	r3, [r7, #23]
      break;
 8003d16:	e006      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003d18:	bf00      	nop
 8003d1a:	e004      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003d1c:	bf00      	nop
 8003d1e:	e002      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003d20:	bf00      	nop
 8003d22:	e000      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d109      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d2c:	4b4c      	ldr	r3, [pc, #304]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d30:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d38:	4949      	ldr	r1, [pc, #292]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	650b      	str	r3, [r1, #80]	; 0x50
 8003d3e:	e001      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d053      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d56:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003d5a:	d034      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003d5c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003d60:	d82e      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d66:	d030      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d6c:	d828      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d72:	d02c      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d78:	d822      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003d7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d7e:	d028      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003d80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d84:	d81c      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003d86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d8a:	d010      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d90:	d816      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d01f      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003d96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d9a:	d111      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	2101      	movs	r1, #1
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 ff86 	bl	8004cb4 <RCCEx_PLL2_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003dac:	e014      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3324      	adds	r3, #36	; 0x24
 8003db2:	2101      	movs	r1, #1
 8003db4:	4618      	mov	r0, r3
 8003db6:	f001 f82f 	bl	8004e18 <RCCEx_PLL3_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003dbe:	e00b      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003dc6:	bf00      	nop
 8003dc8:	e006      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e004      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e002      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e000      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd8:	7dfb      	ldrb	r3, [r7, #23]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003dec:	491c      	ldr	r1, [pc, #112]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	658b      	str	r3, [r1, #88]	; 0x58
 8003df2:	e001      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d031      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e0c:	d00e      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e12:	d814      	bhi.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d015      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003e18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e1c:	d10f      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e1e:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	4a0f      	ldr	r2, [pc, #60]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e2a:	e00c      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	2101      	movs	r1, #1
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 ff3e 	bl	8004cb4 <RCCEx_PLL2_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e3c:	e003      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	75fb      	strb	r3, [r7, #23]
      break;
 8003e42:	e000      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10b      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e4c:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e58:	4901      	ldr	r1, [pc, #4]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	650b      	str	r3, [r1, #80]	; 0x50
 8003e5e:	e003      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8003e60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d032      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d81b      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003e7c:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e82:	bf00      	nop
 8003e84:	08003ebb 	.word	0x08003ebb
 8003e88:	08003e95 	.word	0x08003e95
 8003e8c:	08003ea3 	.word	0x08003ea3
 8003e90:	08003ebb 	.word	0x08003ebb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e94:	4bb2      	ldr	r3, [pc, #712]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	4ab1      	ldr	r2, [pc, #708]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ea0:	e00c      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 ff03 	bl	8004cb4 <RCCEx_PLL2_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003eb2:	e003      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb8:	e000      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ec2:	4ba7      	ldr	r3, [pc, #668]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec6:	f023 0203 	bic.w	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	49a4      	ldr	r1, [pc, #656]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ed4:	e001      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 8086 	beq.w	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ee8:	4b9e      	ldr	r3, [pc, #632]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a9d      	ldr	r2, [pc, #628]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ef4:	f7fe fa2a 	bl	800234c <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003efa:	e009      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efc:	f7fe fa26 	bl	800234c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b64      	cmp	r3, #100	; 0x64
 8003f08:	d902      	bls.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	75fb      	strb	r3, [r7, #23]
        break;
 8003f0e:	e005      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f10:	4b94      	ldr	r3, [pc, #592]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0ef      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d166      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f22:	4b8f      	ldr	r3, [pc, #572]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003f24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f2c:	4053      	eors	r3, r2
 8003f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d013      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f36:	4b8a      	ldr	r3, [pc, #552]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f3e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f40:	4b87      	ldr	r3, [pc, #540]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	4a86      	ldr	r2, [pc, #536]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f4c:	4b84      	ldr	r3, [pc, #528]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	4a83      	ldr	r2, [pc, #524]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f56:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f58:	4a81      	ldr	r2, [pc, #516]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f68:	d115      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6a:	f7fe f9ef 	bl	800234c <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f70:	e00b      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fe f9eb 	bl	800234c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d902      	bls.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	75fb      	strb	r3, [r7, #23]
            break;
 8003f88:	e005      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f8a:	4b75      	ldr	r3, [pc, #468]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0ed      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8003f96:	7dfb      	ldrb	r3, [r7, #23]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d126      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003faa:	d10d      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8003fac:	4b6c      	ldr	r3, [pc, #432]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fba:	0919      	lsrs	r1, r3, #4
 8003fbc:	4b6a      	ldr	r3, [pc, #424]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fbe:	400b      	ands	r3, r1
 8003fc0:	4967      	ldr	r1, [pc, #412]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	610b      	str	r3, [r1, #16]
 8003fc6:	e005      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8003fc8:	4b65      	ldr	r3, [pc, #404]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	4a64      	ldr	r2, [pc, #400]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003fce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003fd2:	6113      	str	r3, [r2, #16]
 8003fd4:	4b62      	ldr	r3, [pc, #392]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003fd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe2:	495f      	ldr	r1, [pc, #380]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	670b      	str	r3, [r1, #112]	; 0x70
 8003fe8:	e004      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fea:	7dfb      	ldrb	r3, [r7, #23]
 8003fec:	75bb      	strb	r3, [r7, #22]
 8003fee:	e001      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d07f      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004006:	2b28      	cmp	r3, #40	; 0x28
 8004008:	d866      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 800400a:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	080040df 	.word	0x080040df
 8004014:	080040d9 	.word	0x080040d9
 8004018:	080040d9 	.word	0x080040d9
 800401c:	080040d9 	.word	0x080040d9
 8004020:	080040d9 	.word	0x080040d9
 8004024:	080040d9 	.word	0x080040d9
 8004028:	080040d9 	.word	0x080040d9
 800402c:	080040d9 	.word	0x080040d9
 8004030:	080040b5 	.word	0x080040b5
 8004034:	080040d9 	.word	0x080040d9
 8004038:	080040d9 	.word	0x080040d9
 800403c:	080040d9 	.word	0x080040d9
 8004040:	080040d9 	.word	0x080040d9
 8004044:	080040d9 	.word	0x080040d9
 8004048:	080040d9 	.word	0x080040d9
 800404c:	080040d9 	.word	0x080040d9
 8004050:	080040c7 	.word	0x080040c7
 8004054:	080040d9 	.word	0x080040d9
 8004058:	080040d9 	.word	0x080040d9
 800405c:	080040d9 	.word	0x080040d9
 8004060:	080040d9 	.word	0x080040d9
 8004064:	080040d9 	.word	0x080040d9
 8004068:	080040d9 	.word	0x080040d9
 800406c:	080040d9 	.word	0x080040d9
 8004070:	080040df 	.word	0x080040df
 8004074:	080040d9 	.word	0x080040d9
 8004078:	080040d9 	.word	0x080040d9
 800407c:	080040d9 	.word	0x080040d9
 8004080:	080040d9 	.word	0x080040d9
 8004084:	080040d9 	.word	0x080040d9
 8004088:	080040d9 	.word	0x080040d9
 800408c:	080040d9 	.word	0x080040d9
 8004090:	080040df 	.word	0x080040df
 8004094:	080040d9 	.word	0x080040d9
 8004098:	080040d9 	.word	0x080040d9
 800409c:	080040d9 	.word	0x080040d9
 80040a0:	080040d9 	.word	0x080040d9
 80040a4:	080040d9 	.word	0x080040d9
 80040a8:	080040d9 	.word	0x080040d9
 80040ac:	080040d9 	.word	0x080040d9
 80040b0:	080040df 	.word	0x080040df
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	2101      	movs	r1, #1
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fdfa 	bl	8004cb4 <RCCEx_PLL2_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80040c4:	e00c      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3324      	adds	r3, #36	; 0x24
 80040ca:	2101      	movs	r1, #1
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fea3 	bl	8004e18 <RCCEx_PLL3_Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80040d6:	e003      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	75fb      	strb	r3, [r7, #23]
      break;
 80040dc:	e000      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80040de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e0:	7dfb      	ldrb	r3, [r7, #23]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80040e6:	4b1e      	ldr	r3, [pc, #120]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040f4:	491a      	ldr	r1, [pc, #104]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	654b      	str	r3, [r1, #84]	; 0x54
 80040fa:	e001      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d03f      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004110:	2b05      	cmp	r3, #5
 8004112:	d821      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004114:	a201      	add	r2, pc, #4	; (adr r2, 800411c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	0800416d 	.word	0x0800416d
 8004120:	08004135 	.word	0x08004135
 8004124:	08004147 	.word	0x08004147
 8004128:	0800416d 	.word	0x0800416d
 800412c:	0800416d 	.word	0x0800416d
 8004130:	0800416d 	.word	0x0800416d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3304      	adds	r3, #4
 8004138:	2101      	movs	r1, #1
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fdba 	bl	8004cb4 <RCCEx_PLL2_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004144:	e013      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3324      	adds	r3, #36	; 0x24
 800414a:	2101      	movs	r1, #1
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fe63 	bl	8004e18 <RCCEx_PLL3_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004156:	e00a      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	75fb      	strb	r3, [r7, #23]
      break;
 800415c:	e007      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800415e:	bf00      	nop
 8004160:	58024400 	.word	0x58024400
 8004164:	58024800 	.word	0x58024800
 8004168:	00ffffcf 	.word	0x00ffffcf
      break;
 800416c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800416e:	7dfb      	ldrb	r3, [r7, #23]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d109      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004174:	4b9f      	ldr	r3, [pc, #636]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004178:	f023 0207 	bic.w	r2, r3, #7
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004180:	499c      	ldr	r1, [pc, #624]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004182:	4313      	orrs	r3, r2
 8004184:	654b      	str	r3, [r1, #84]	; 0x54
 8004186:	e001      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d039      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800419e:	2b05      	cmp	r3, #5
 80041a0:	d820      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80041a2:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80041a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a8:	080041eb 	.word	0x080041eb
 80041ac:	080041c1 	.word	0x080041c1
 80041b0:	080041d3 	.word	0x080041d3
 80041b4:	080041eb 	.word	0x080041eb
 80041b8:	080041eb 	.word	0x080041eb
 80041bc:	080041eb 	.word	0x080041eb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3304      	adds	r3, #4
 80041c4:	2101      	movs	r1, #1
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fd74 	bl	8004cb4 <RCCEx_PLL2_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80041d0:	e00c      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3324      	adds	r3, #36	; 0x24
 80041d6:	2101      	movs	r1, #1
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fe1d 	bl	8004e18 <RCCEx_PLL3_Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80041e2:	e003      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	75fb      	strb	r3, [r7, #23]
      break;
 80041e8:	e000      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80041ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ec:	7dfb      	ldrb	r3, [r7, #23]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041f2:	4b80      	ldr	r3, [pc, #512]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	f023 0207 	bic.w	r2, r3, #7
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004200:	497c      	ldr	r1, [pc, #496]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004202:	4313      	orrs	r3, r2
 8004204:	658b      	str	r3, [r1, #88]	; 0x58
 8004206:	e001      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d04b      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004222:	d02e      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004228:	d828      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800422a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422e:	d02a      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004234:	d822      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004236:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800423a:	d026      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800423c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004240:	d81c      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004246:	d010      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8004248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800424c:	d816      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d01d      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004256:	d111      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	2100      	movs	r1, #0
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fd28 	bl	8004cb4 <RCCEx_PLL2_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004268:	e012      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3324      	adds	r3, #36	; 0x24
 800426e:	2102      	movs	r1, #2
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fdd1 	bl	8004e18 <RCCEx_PLL3_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800427a:	e009      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	75fb      	strb	r3, [r7, #23]
      break;
 8004280:	e006      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004282:	bf00      	nop
 8004284:	e004      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004286:	bf00      	nop
 8004288:	e002      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800428a:	bf00      	nop
 800428c:	e000      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800428e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004290:	7dfb      	ldrb	r3, [r7, #23]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10a      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004296:	4b57      	ldr	r3, [pc, #348]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a4:	4953      	ldr	r1, [pc, #332]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	654b      	str	r3, [r1, #84]	; 0x54
 80042aa:	e001      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ac:	7dfb      	ldrb	r3, [r7, #23]
 80042ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d04b      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042c6:	d02e      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80042c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042cc:	d828      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80042ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d2:	d02a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80042d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d8:	d822      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80042da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042de:	d026      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80042e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042e4:	d81c      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80042e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ea:	d010      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80042ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f0:	d816      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01d      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80042f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fa:	d111      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fcd6 	bl	8004cb4 <RCCEx_PLL2_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800430c:	e012      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3324      	adds	r3, #36	; 0x24
 8004312:	2102      	movs	r1, #2
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fd7f 	bl	8004e18 <RCCEx_PLL3_Config>
 800431a:	4603      	mov	r3, r0
 800431c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800431e:	e009      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	75fb      	strb	r3, [r7, #23]
      break;
 8004324:	e006      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004326:	bf00      	nop
 8004328:	e004      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800432a:	bf00      	nop
 800432c:	e002      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004334:	7dfb      	ldrb	r3, [r7, #23]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800433a:	4b2e      	ldr	r3, [pc, #184]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800433c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004348:	492a      	ldr	r1, [pc, #168]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800434a:	4313      	orrs	r3, r2
 800434c:	658b      	str	r3, [r1, #88]	; 0x58
 800434e:	e001      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	7dfb      	ldrb	r3, [r7, #23]
 8004352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435c:	2b00      	cmp	r3, #0
 800435e:	d04d      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004366:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800436a:	d02e      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800436c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004370:	d828      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004376:	d02a      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437c:	d822      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800437e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004382:	d026      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004384:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004388:	d81c      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800438a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800438e:	d010      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004394:	d816      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d01d      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800439a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800439e:	d111      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fc84 	bl	8004cb4 <RCCEx_PLL2_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80043b0:	e012      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3324      	adds	r3, #36	; 0x24
 80043b6:	2102      	movs	r1, #2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fd2d 	bl	8004e18 <RCCEx_PLL3_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80043c2:	e009      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	75fb      	strb	r3, [r7, #23]
      break;
 80043c8:	e006      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80043ca:	bf00      	nop
 80043cc:	e004      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80043ce:	bf00      	nop
 80043d0:	e002      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80043d2:	bf00      	nop
 80043d4:	e000      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80043d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043ec:	4901      	ldr	r1, [pc, #4]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	658b      	str	r3, [r1, #88]	; 0x58
 80043f2:	e003      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80043f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
 80043fa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b00      	cmp	r3, #0
 8004406:	d01a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004412:	d10a      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3324      	adds	r3, #36	; 0x24
 8004418:	2102      	movs	r1, #2
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fcfc 	bl	8004e18 <RCCEx_PLL3_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800442a:	4b8c      	ldr	r3, [pc, #560]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800442c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004438:	4988      	ldr	r1, [pc, #544]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01a      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004454:	d10a      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3324      	adds	r3, #36	; 0x24
 800445a:	2102      	movs	r1, #2
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fcdb 	bl	8004e18 <RCCEx_PLL3_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800446c:	4b7b      	ldr	r3, [pc, #492]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800446e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800447a:	4978      	ldr	r1, [pc, #480]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800447c:	4313      	orrs	r3, r2
 800447e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d034      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004492:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004496:	d01d      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800449c:	d817      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80044a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a6:	d009      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80044a8:	e011      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3304      	adds	r3, #4
 80044ae:	2100      	movs	r1, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fbff 	bl	8004cb4 <RCCEx_PLL2_Config>
 80044b6:	4603      	mov	r3, r0
 80044b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80044ba:	e00c      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3324      	adds	r3, #36	; 0x24
 80044c0:	2102      	movs	r1, #2
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fca8 	bl	8004e18 <RCCEx_PLL3_Config>
 80044c8:	4603      	mov	r3, r0
 80044ca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80044cc:	e003      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
      break;
 80044d2:	e000      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80044d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044dc:	4b5f      	ldr	r3, [pc, #380]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80044de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044ea:	495c      	ldr	r1, [pc, #368]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	658b      	str	r3, [r1, #88]	; 0x58
 80044f0:	e001      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f2:	7dfb      	ldrb	r3, [r7, #23]
 80044f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d033      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004508:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800450c:	d01c      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800450e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004512:	d816      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004514:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004518:	d003      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800451a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800451e:	d007      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004520:	e00f      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004522:	4b4e      	ldr	r3, [pc, #312]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	4a4d      	ldr	r2, [pc, #308]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800452c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800452e:	e00c      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3324      	adds	r3, #36	; 0x24
 8004534:	2101      	movs	r1, #1
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fc6e 	bl	8004e18 <RCCEx_PLL3_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004540:	e003      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	75fb      	strb	r3, [r7, #23]
      break;
 8004546:	e000      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800454a:	7dfb      	ldrb	r3, [r7, #23]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10a      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004550:	4b42      	ldr	r3, [pc, #264]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004554:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800455e:	493f      	ldr	r1, [pc, #252]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004560:	4313      	orrs	r3, r2
 8004562:	654b      	str	r3, [r1, #84]	; 0x54
 8004564:	e001      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004566:	7dfb      	ldrb	r3, [r7, #23]
 8004568:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d029      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800457e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004582:	d007      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004584:	e00f      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004586:	4b35      	ldr	r3, [pc, #212]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	4a34      	ldr	r2, [pc, #208]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800458c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004590:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004592:	e00b      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	2102      	movs	r1, #2
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fb8a 	bl	8004cb4 <RCCEx_PLL2_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80045a4:	e002      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	75fb      	strb	r3, [r7, #23]
      break;
 80045aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045b2:	4b2a      	ldr	r3, [pc, #168]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80045b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045be:	4927      	ldr	r1, [pc, #156]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80045c4:	e001      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
 80045c8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3324      	adds	r3, #36	; 0x24
 80045da:	2102      	movs	r1, #2
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fc1b 	bl	8004e18 <RCCEx_PLL3_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d035      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004602:	d017      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004608:	d811      	bhi.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800460a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800460e:	d013      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004614:	d80b      	bhi.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d010      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800461a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800461e:	d106      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004620:	4b0e      	ldr	r3, [pc, #56]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	4a0d      	ldr	r2, [pc, #52]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800462a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800462c:	e007      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	75fb      	strb	r3, [r7, #23]
      break;
 8004632:	e004      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004634:	bf00      	nop
 8004636:	e002      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004638:	bf00      	nop
 800463a:	e000      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800463c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800463e:	7dfb      	ldrb	r3, [r7, #23]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10d      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004652:	4902      	ldr	r1, [pc, #8]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004654:	4313      	orrs	r3, r2
 8004656:	654b      	str	r3, [r1, #84]	; 0x54
 8004658:	e004      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800465a:	bf00      	nop
 800465c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	7dfb      	ldrb	r3, [r7, #23]
 8004662:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004670:	4b30      	ldr	r3, [pc, #192]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004674:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800467c:	492d      	ldr	r1, [pc, #180]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800467e:	4313      	orrs	r3, r2
 8004680:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800468e:	4b29      	ldr	r3, [pc, #164]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004692:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800469a:	4926      	ldr	r1, [pc, #152]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800469c:	4313      	orrs	r3, r2
 800469e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80046ac:	4b21      	ldr	r3, [pc, #132]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b8:	491e      	ldr	r1, [pc, #120]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00d      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046ca:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	4a19      	ldr	r2, [pc, #100]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80046d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046d4:	6113      	str	r3, [r2, #16]
 80046d6:	4b17      	ldr	r3, [pc, #92]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046e0:	4914      	ldr	r1, [pc, #80]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	da08      	bge.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046ee:	4b11      	ldr	r3, [pc, #68]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80046f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fa:	490e      	ldr	r1, [pc, #56]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800470c:	4b09      	ldr	r3, [pc, #36]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800470e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004710:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471a:	4906      	ldr	r1, [pc, #24]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800471c:	4313      	orrs	r3, r2
 800471e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004720:	7dbb      	ldrb	r3, [r7, #22]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	e000      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	58024400 	.word	0x58024400

08004738 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800473c:	f7ff f894 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	4904      	ldr	r1, [pc, #16]	; (8004760 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004758:	4618      	mov	r0, r3
 800475a:	bd80      	pop	{r7, pc}
 800475c:	58024400 	.word	0x58024400
 8004760:	0800c9c4 	.word	0x0800c9c4

08004764 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004764:	b480      	push	{r7}
 8004766:	b089      	sub	sp, #36	; 0x24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800476c:	4ba1      	ldr	r3, [pc, #644]	; (80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004776:	4b9f      	ldr	r3, [pc, #636]	; (80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	0b1b      	lsrs	r3, r3, #12
 800477c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004780:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004782:	4b9c      	ldr	r3, [pc, #624]	; (80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	091b      	lsrs	r3, r3, #4
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800478e:	4b99      	ldr	r3, [pc, #612]	; (80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004792:	08db      	lsrs	r3, r3, #3
 8004794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	fb02 f303 	mul.w	r3, r2, r3
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 8111 	beq.w	80049d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	f000 8083 	beq.w	80048c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	f200 80a1 	bhi.w	8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d056      	beq.n	800487c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80047ce:	e099      	b.n	8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047d0:	4b88      	ldr	r3, [pc, #544]	; (80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d02d      	beq.n	8004838 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047dc:	4b85      	ldr	r3, [pc, #532]	; (80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	08db      	lsrs	r3, r3, #3
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	4a84      	ldr	r2, [pc, #528]	; (80049f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	ee07 3a90 	vmov	s15, r3
 80047f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004806:	4b7b      	ldr	r3, [pc, #492]	; (80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004816:	ed97 6a03 	vldr	s12, [r7, #12]
 800481a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800481e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800482a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800482e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004832:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004836:	e087      	b.n	8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004842:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800484a:	4b6a      	ldr	r3, [pc, #424]	; (80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485a:	ed97 6a03 	vldr	s12, [r7, #12]
 800485e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800486e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004876:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800487a:	e065      	b.n	8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004886:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800488a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488e:	4b59      	ldr	r3, [pc, #356]	; (80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489e:	ed97 6a03 	vldr	s12, [r7, #12]
 80048a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048be:	e043      	b.n	8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80048ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d2:	4b48      	ldr	r3, [pc, #288]	; (80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004902:	e021      	b.n	8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004916:	4b37      	ldr	r3, [pc, #220]	; (80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004926:	ed97 6a03 	vldr	s12, [r7, #12]
 800492a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800492e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800493a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800493e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004942:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004946:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004948:	4b2a      	ldr	r3, [pc, #168]	; (80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	0a5b      	lsrs	r3, r3, #9
 800494e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800495e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004962:	edd7 6a07 	vldr	s13, [r7, #28]
 8004966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800496a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800496e:	ee17 2a90 	vmov	r2, s15
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004976:	4b1f      	ldr	r3, [pc, #124]	; (80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	0c1b      	lsrs	r3, r3, #16
 800497c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800498c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004990:	edd7 6a07 	vldr	s13, [r7, #28]
 8004994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800499c:	ee17 2a90 	vmov	r2, s15
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80049a4:	4b13      	ldr	r3, [pc, #76]	; (80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	0e1b      	lsrs	r3, r3, #24
 80049aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049be:	edd7 6a07 	vldr	s13, [r7, #28]
 80049c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ca:	ee17 2a90 	vmov	r2, s15
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049d2:	e008      	b.n	80049e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	609a      	str	r2, [r3, #8]
}
 80049e6:	bf00      	nop
 80049e8:	3724      	adds	r7, #36	; 0x24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	58024400 	.word	0x58024400
 80049f8:	03d09000 	.word	0x03d09000
 80049fc:	46000000 	.word	0x46000000
 8004a00:	4c742400 	.word	0x4c742400
 8004a04:	4a742400 	.word	0x4a742400
 8004a08:	4af42400 	.word	0x4af42400

08004a0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b089      	sub	sp, #36	; 0x24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a14:	4ba1      	ldr	r3, [pc, #644]	; (8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	f003 0303 	and.w	r3, r3, #3
 8004a1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004a1e:	4b9f      	ldr	r3, [pc, #636]	; (8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	0d1b      	lsrs	r3, r3, #20
 8004a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a2a:	4b9c      	ldr	r3, [pc, #624]	; (8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	0a1b      	lsrs	r3, r3, #8
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004a36:	4b99      	ldr	r3, [pc, #612]	; (8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3a:	08db      	lsrs	r3, r3, #3
 8004a3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	fb02 f303 	mul.w	r3, r2, r3
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8111 	beq.w	8004c7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	f000 8083 	beq.w	8004b68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	f200 80a1 	bhi.w	8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d056      	beq.n	8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a76:	e099      	b.n	8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a78:	4b88      	ldr	r3, [pc, #544]	; (8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d02d      	beq.n	8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a84:	4b85      	ldr	r3, [pc, #532]	; (8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	08db      	lsrs	r3, r3, #3
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	4a84      	ldr	r2, [pc, #528]	; (8004ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
 8004a94:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	ee07 3a90 	vmov	s15, r3
 8004a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aae:	4b7b      	ldr	r3, [pc, #492]	; (8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ac2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ada:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ade:	e087      	b.n	8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af2:	4b6a      	ldr	r3, [pc, #424]	; (8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b22:	e065      	b.n	8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b36:	4b59      	ldr	r3, [pc, #356]	; (8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b66:	e043      	b.n	8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7a:	4b48      	ldr	r3, [pc, #288]	; (8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004baa:	e021      	b.n	8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bbe:	4b37      	ldr	r3, [pc, #220]	; (8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004bf0:	4b2a      	ldr	r3, [pc, #168]	; (8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	0a5b      	lsrs	r3, r3, #9
 8004bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c16:	ee17 2a90 	vmov	r2, s15
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004c1e:	4b1f      	ldr	r3, [pc, #124]	; (8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	0c1b      	lsrs	r3, r3, #16
 8004c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c28:	ee07 3a90 	vmov	s15, r3
 8004c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c44:	ee17 2a90 	vmov	r2, s15
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004c4c:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	0e1b      	lsrs	r3, r3, #24
 8004c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c72:	ee17 2a90 	vmov	r2, s15
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c7a:	e008      	b.n	8004c8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	609a      	str	r2, [r3, #8]
}
 8004c8e:	bf00      	nop
 8004c90:	3724      	adds	r7, #36	; 0x24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	58024400 	.word	0x58024400
 8004ca0:	03d09000 	.word	0x03d09000
 8004ca4:	46000000 	.word	0x46000000
 8004ca8:	4c742400 	.word	0x4c742400
 8004cac:	4a742400 	.word	0x4a742400
 8004cb0:	4af42400 	.word	0x4af42400

08004cb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cc2:	4b53      	ldr	r3, [pc, #332]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d101      	bne.n	8004cd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e099      	b.n	8004e06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004cd2:	4b4f      	ldr	r3, [pc, #316]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a4e      	ldr	r2, [pc, #312]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004cd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cde:	f7fd fb35 	bl	800234c <HAL_GetTick>
 8004ce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ce4:	e008      	b.n	8004cf8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004ce6:	f7fd fb31 	bl	800234c <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e086      	b.n	8004e06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cf8:	4b45      	ldr	r3, [pc, #276]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1f0      	bne.n	8004ce6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d04:	4b42      	ldr	r3, [pc, #264]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	031b      	lsls	r3, r3, #12
 8004d12:	493f      	ldr	r1, [pc, #252]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	628b      	str	r3, [r1, #40]	; 0x28
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	025b      	lsls	r3, r3, #9
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	041b      	lsls	r3, r3, #16
 8004d36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	061b      	lsls	r3, r3, #24
 8004d44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d48:	4931      	ldr	r1, [pc, #196]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d4e:	4b30      	ldr	r3, [pc, #192]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	492d      	ldr	r1, [pc, #180]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d60:	4b2b      	ldr	r3, [pc, #172]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	f023 0220 	bic.w	r2, r3, #32
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	4928      	ldr	r1, [pc, #160]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d72:	4b27      	ldr	r3, [pc, #156]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	4a26      	ldr	r2, [pc, #152]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004d78:	f023 0310 	bic.w	r3, r3, #16
 8004d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d7e:	4b24      	ldr	r3, [pc, #144]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004d80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d82:	4b24      	ldr	r3, [pc, #144]	; (8004e14 <RCCEx_PLL2_Config+0x160>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	69d2      	ldr	r2, [r2, #28]
 8004d8a:	00d2      	lsls	r2, r2, #3
 8004d8c:	4920      	ldr	r1, [pc, #128]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d92:	4b1f      	ldr	r3, [pc, #124]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	4a1e      	ldr	r2, [pc, #120]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004d98:	f043 0310 	orr.w	r3, r3, #16
 8004d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d106      	bne.n	8004db2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004da4:	4b1a      	ldr	r3, [pc, #104]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	4a19      	ldr	r2, [pc, #100]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004daa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004db0:	e00f      	b.n	8004dd2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d106      	bne.n	8004dc6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004db8:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	4a14      	ldr	r2, [pc, #80]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004dbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004dc4:	e005      	b.n	8004dd2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004dc6:	4b12      	ldr	r3, [pc, #72]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	4a11      	ldr	r2, [pc, #68]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004dcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a0e      	ldr	r2, [pc, #56]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004dd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dde:	f7fd fab5 	bl	800234c <HAL_GetTick>
 8004de2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004de4:	e008      	b.n	8004df8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004de6:	f7fd fab1 	bl	800234c <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e006      	b.n	8004e06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <RCCEx_PLL2_Config+0x15c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	58024400 	.word	0x58024400
 8004e14:	ffff0007 	.word	0xffff0007

08004e18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e26:	4b53      	ldr	r3, [pc, #332]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d101      	bne.n	8004e36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e099      	b.n	8004f6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e36:	4b4f      	ldr	r3, [pc, #316]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a4e      	ldr	r2, [pc, #312]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e42:	f7fd fa83 	bl	800234c <HAL_GetTick>
 8004e46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e48:	e008      	b.n	8004e5c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e4a:	f7fd fa7f 	bl	800234c <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e086      	b.n	8004f6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e5c:	4b45      	ldr	r3, [pc, #276]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f0      	bne.n	8004e4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e68:	4b42      	ldr	r3, [pc, #264]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	051b      	lsls	r3, r3, #20
 8004e76:	493f      	ldr	r1, [pc, #252]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	628b      	str	r3, [r1, #40]	; 0x28
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	025b      	lsls	r3, r3, #9
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	041b      	lsls	r3, r3, #16
 8004e9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	061b      	lsls	r3, r3, #24
 8004ea8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004eac:	4931      	ldr	r1, [pc, #196]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004eb2:	4b30      	ldr	r3, [pc, #192]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	492d      	ldr	r1, [pc, #180]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ec4:	4b2b      	ldr	r3, [pc, #172]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	4928      	ldr	r1, [pc, #160]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ed6:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eda:	4a26      	ldr	r2, [pc, #152]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ee2:	4b24      	ldr	r3, [pc, #144]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ee6:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <RCCEx_PLL3_Config+0x160>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	69d2      	ldr	r2, [r2, #28]
 8004eee:	00d2      	lsls	r2, r2, #3
 8004ef0:	4920      	ldr	r1, [pc, #128]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ef6:	4b1f      	ldr	r3, [pc, #124]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	4a1e      	ldr	r2, [pc, #120]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d106      	bne.n	8004f16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f08:	4b1a      	ldr	r3, [pc, #104]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	4a19      	ldr	r2, [pc, #100]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004f0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f14:	e00f      	b.n	8004f36 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d106      	bne.n	8004f2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f1c:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	4a14      	ldr	r2, [pc, #80]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004f22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f28:	e005      	b.n	8004f36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f2a:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	4a11      	ldr	r2, [pc, #68]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004f30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f36:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a0e      	ldr	r2, [pc, #56]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f42:	f7fd fa03 	bl	800234c <HAL_GetTick>
 8004f46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f48:	e008      	b.n	8004f5c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004f4a:	f7fd f9ff 	bl	800234c <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e006      	b.n	8004f6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f5c:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <RCCEx_PLL3_Config+0x15c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0f0      	beq.n	8004f4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	58024400 	.word	0x58024400
 8004f78:	ffff0007 	.word	0xffff0007

08004f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e049      	b.n	8005022 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fc fd66 	bl	8001a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f001 f924 	bl	8006208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	d001      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e054      	b.n	80050ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a26      	ldr	r2, [pc, #152]	; (80050fc <HAL_TIM_Base_Start_IT+0xd0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d022      	beq.n	80050ac <HAL_TIM_Base_Start_IT+0x80>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506e:	d01d      	beq.n	80050ac <HAL_TIM_Base_Start_IT+0x80>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a22      	ldr	r2, [pc, #136]	; (8005100 <HAL_TIM_Base_Start_IT+0xd4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d018      	beq.n	80050ac <HAL_TIM_Base_Start_IT+0x80>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a21      	ldr	r2, [pc, #132]	; (8005104 <HAL_TIM_Base_Start_IT+0xd8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d013      	beq.n	80050ac <HAL_TIM_Base_Start_IT+0x80>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1f      	ldr	r2, [pc, #124]	; (8005108 <HAL_TIM_Base_Start_IT+0xdc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00e      	beq.n	80050ac <HAL_TIM_Base_Start_IT+0x80>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1e      	ldr	r2, [pc, #120]	; (800510c <HAL_TIM_Base_Start_IT+0xe0>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d009      	beq.n	80050ac <HAL_TIM_Base_Start_IT+0x80>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <HAL_TIM_Base_Start_IT+0xe4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d004      	beq.n	80050ac <HAL_TIM_Base_Start_IT+0x80>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1b      	ldr	r2, [pc, #108]	; (8005114 <HAL_TIM_Base_Start_IT+0xe8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d115      	bne.n	80050d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	4b19      	ldr	r3, [pc, #100]	; (8005118 <HAL_TIM_Base_Start_IT+0xec>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b06      	cmp	r3, #6
 80050bc:	d015      	beq.n	80050ea <HAL_TIM_Base_Start_IT+0xbe>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c4:	d011      	beq.n	80050ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0201 	orr.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d6:	e008      	b.n	80050ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	e000      	b.n	80050ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40010000 	.word	0x40010000
 8005100:	40000400 	.word	0x40000400
 8005104:	40000800 	.word	0x40000800
 8005108:	40000c00 	.word	0x40000c00
 800510c:	40010400 	.word	0x40010400
 8005110:	40001800 	.word	0x40001800
 8005114:	40014000 	.word	0x40014000
 8005118:	00010007 	.word	0x00010007

0800511c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e049      	b.n	80051c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f841 	bl	80051ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f001 f854 	bl	8006208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d109      	bne.n	8005204 <HAL_TIM_PWM_Start+0x24>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	bf14      	ite	ne
 80051fc:	2301      	movne	r3, #1
 80051fe:	2300      	moveq	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	e03c      	b.n	800527e <HAL_TIM_PWM_Start+0x9e>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2b04      	cmp	r3, #4
 8005208:	d109      	bne.n	800521e <HAL_TIM_PWM_Start+0x3e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b01      	cmp	r3, #1
 8005214:	bf14      	ite	ne
 8005216:	2301      	movne	r3, #1
 8005218:	2300      	moveq	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	e02f      	b.n	800527e <HAL_TIM_PWM_Start+0x9e>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b08      	cmp	r3, #8
 8005222:	d109      	bne.n	8005238 <HAL_TIM_PWM_Start+0x58>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	bf14      	ite	ne
 8005230:	2301      	movne	r3, #1
 8005232:	2300      	moveq	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	e022      	b.n	800527e <HAL_TIM_PWM_Start+0x9e>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b0c      	cmp	r3, #12
 800523c:	d109      	bne.n	8005252 <HAL_TIM_PWM_Start+0x72>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b01      	cmp	r3, #1
 8005248:	bf14      	ite	ne
 800524a:	2301      	movne	r3, #1
 800524c:	2300      	moveq	r3, #0
 800524e:	b2db      	uxtb	r3, r3
 8005250:	e015      	b.n	800527e <HAL_TIM_PWM_Start+0x9e>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b10      	cmp	r3, #16
 8005256:	d109      	bne.n	800526c <HAL_TIM_PWM_Start+0x8c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	bf14      	ite	ne
 8005264:	2301      	movne	r3, #1
 8005266:	2300      	moveq	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	e008      	b.n	800527e <HAL_TIM_PWM_Start+0x9e>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	bf14      	ite	ne
 8005278:	2301      	movne	r3, #1
 800527a:	2300      	moveq	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e0a1      	b.n	80053ca <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <HAL_TIM_PWM_Start+0xb6>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005294:	e023      	b.n	80052de <HAL_TIM_PWM_Start+0xfe>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b04      	cmp	r3, #4
 800529a:	d104      	bne.n	80052a6 <HAL_TIM_PWM_Start+0xc6>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a4:	e01b      	b.n	80052de <HAL_TIM_PWM_Start+0xfe>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_PWM_Start+0xd6>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052b4:	e013      	b.n	80052de <HAL_TIM_PWM_Start+0xfe>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b0c      	cmp	r3, #12
 80052ba:	d104      	bne.n	80052c6 <HAL_TIM_PWM_Start+0xe6>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052c4:	e00b      	b.n	80052de <HAL_TIM_PWM_Start+0xfe>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d104      	bne.n	80052d6 <HAL_TIM_PWM_Start+0xf6>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052d4:	e003      	b.n	80052de <HAL_TIM_PWM_Start+0xfe>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2202      	movs	r2, #2
 80052da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2201      	movs	r2, #1
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 fcc6 	bl	8006c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a38      	ldr	r2, [pc, #224]	; (80053d4 <HAL_TIM_PWM_Start+0x1f4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d013      	beq.n	800531e <HAL_TIM_PWM_Start+0x13e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a37      	ldr	r2, [pc, #220]	; (80053d8 <HAL_TIM_PWM_Start+0x1f8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00e      	beq.n	800531e <HAL_TIM_PWM_Start+0x13e>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a35      	ldr	r2, [pc, #212]	; (80053dc <HAL_TIM_PWM_Start+0x1fc>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d009      	beq.n	800531e <HAL_TIM_PWM_Start+0x13e>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a34      	ldr	r2, [pc, #208]	; (80053e0 <HAL_TIM_PWM_Start+0x200>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d004      	beq.n	800531e <HAL_TIM_PWM_Start+0x13e>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a32      	ldr	r2, [pc, #200]	; (80053e4 <HAL_TIM_PWM_Start+0x204>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d101      	bne.n	8005322 <HAL_TIM_PWM_Start+0x142>
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <HAL_TIM_PWM_Start+0x144>
 8005322:	2300      	movs	r3, #0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005336:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a25      	ldr	r2, [pc, #148]	; (80053d4 <HAL_TIM_PWM_Start+0x1f4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d022      	beq.n	8005388 <HAL_TIM_PWM_Start+0x1a8>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534a:	d01d      	beq.n	8005388 <HAL_TIM_PWM_Start+0x1a8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a25      	ldr	r2, [pc, #148]	; (80053e8 <HAL_TIM_PWM_Start+0x208>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d018      	beq.n	8005388 <HAL_TIM_PWM_Start+0x1a8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a24      	ldr	r2, [pc, #144]	; (80053ec <HAL_TIM_PWM_Start+0x20c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d013      	beq.n	8005388 <HAL_TIM_PWM_Start+0x1a8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a22      	ldr	r2, [pc, #136]	; (80053f0 <HAL_TIM_PWM_Start+0x210>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00e      	beq.n	8005388 <HAL_TIM_PWM_Start+0x1a8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1a      	ldr	r2, [pc, #104]	; (80053d8 <HAL_TIM_PWM_Start+0x1f8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d009      	beq.n	8005388 <HAL_TIM_PWM_Start+0x1a8>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a1e      	ldr	r2, [pc, #120]	; (80053f4 <HAL_TIM_PWM_Start+0x214>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d004      	beq.n	8005388 <HAL_TIM_PWM_Start+0x1a8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a16      	ldr	r2, [pc, #88]	; (80053dc <HAL_TIM_PWM_Start+0x1fc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d115      	bne.n	80053b4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <HAL_TIM_PWM_Start+0x218>)
 8005390:	4013      	ands	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b06      	cmp	r3, #6
 8005398:	d015      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x1e6>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a0:	d011      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 0201 	orr.w	r2, r2, #1
 80053b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b2:	e008      	b.n	80053c6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e000      	b.n	80053c8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40010000 	.word	0x40010000
 80053d8:	40010400 	.word	0x40010400
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40014400 	.word	0x40014400
 80053e4:	40014800 	.word	0x40014800
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40000800 	.word	0x40000800
 80053f0:	40000c00 	.word	0x40000c00
 80053f4:	40001800 	.word	0x40001800
 80053f8:	00010007 	.word	0x00010007

080053fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e049      	b.n	80054a2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d106      	bne.n	8005428 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7fc fb8c 	bl	8001b40 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3304      	adds	r3, #4
 8005438:	4619      	mov	r1, r3
 800543a:	4610      	mov	r0, r2
 800543c:	f000 fee4 	bl	8006208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d104      	bne.n	80054ca <HAL_TIM_IC_Start_IT+0x1e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	e023      	b.n	8005512 <HAL_TIM_IC_Start_IT+0x66>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d104      	bne.n	80054da <HAL_TIM_IC_Start_IT+0x2e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	e01b      	b.n	8005512 <HAL_TIM_IC_Start_IT+0x66>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d104      	bne.n	80054ea <HAL_TIM_IC_Start_IT+0x3e>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	e013      	b.n	8005512 <HAL_TIM_IC_Start_IT+0x66>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b0c      	cmp	r3, #12
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_IC_Start_IT+0x4e>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	e00b      	b.n	8005512 <HAL_TIM_IC_Start_IT+0x66>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	d104      	bne.n	800550a <HAL_TIM_IC_Start_IT+0x5e>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005506:	b2db      	uxtb	r3, r3
 8005508:	e003      	b.n	8005512 <HAL_TIM_IC_Start_IT+0x66>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005510:	b2db      	uxtb	r3, r3
 8005512:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d104      	bne.n	8005524 <HAL_TIM_IC_Start_IT+0x78>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005520:	b2db      	uxtb	r3, r3
 8005522:	e013      	b.n	800554c <HAL_TIM_IC_Start_IT+0xa0>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b04      	cmp	r3, #4
 8005528:	d104      	bne.n	8005534 <HAL_TIM_IC_Start_IT+0x88>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005530:	b2db      	uxtb	r3, r3
 8005532:	e00b      	b.n	800554c <HAL_TIM_IC_Start_IT+0xa0>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b08      	cmp	r3, #8
 8005538:	d104      	bne.n	8005544 <HAL_TIM_IC_Start_IT+0x98>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005540:	b2db      	uxtb	r3, r3
 8005542:	e003      	b.n	800554c <HAL_TIM_IC_Start_IT+0xa0>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800554a:	b2db      	uxtb	r3, r3
 800554c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800554e:	7bbb      	ldrb	r3, [r7, #14]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d102      	bne.n	800555a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005554:	7b7b      	ldrb	r3, [r7, #13]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d001      	beq.n	800555e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e0e2      	b.n	8005724 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d104      	bne.n	800556e <HAL_TIM_IC_Start_IT+0xc2>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800556c:	e023      	b.n	80055b6 <HAL_TIM_IC_Start_IT+0x10a>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b04      	cmp	r3, #4
 8005572:	d104      	bne.n	800557e <HAL_TIM_IC_Start_IT+0xd2>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800557c:	e01b      	b.n	80055b6 <HAL_TIM_IC_Start_IT+0x10a>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b08      	cmp	r3, #8
 8005582:	d104      	bne.n	800558e <HAL_TIM_IC_Start_IT+0xe2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800558c:	e013      	b.n	80055b6 <HAL_TIM_IC_Start_IT+0x10a>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b0c      	cmp	r3, #12
 8005592:	d104      	bne.n	800559e <HAL_TIM_IC_Start_IT+0xf2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800559c:	e00b      	b.n	80055b6 <HAL_TIM_IC_Start_IT+0x10a>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b10      	cmp	r3, #16
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_IC_Start_IT+0x102>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055ac:	e003      	b.n	80055b6 <HAL_TIM_IC_Start_IT+0x10a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2202      	movs	r2, #2
 80055b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d104      	bne.n	80055c6 <HAL_TIM_IC_Start_IT+0x11a>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c4:	e013      	b.n	80055ee <HAL_TIM_IC_Start_IT+0x142>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d104      	bne.n	80055d6 <HAL_TIM_IC_Start_IT+0x12a>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055d4:	e00b      	b.n	80055ee <HAL_TIM_IC_Start_IT+0x142>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d104      	bne.n	80055e6 <HAL_TIM_IC_Start_IT+0x13a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055e4:	e003      	b.n	80055ee <HAL_TIM_IC_Start_IT+0x142>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2202      	movs	r2, #2
 80055ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b0c      	cmp	r3, #12
 80055f2:	d841      	bhi.n	8005678 <HAL_TIM_IC_Start_IT+0x1cc>
 80055f4:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <HAL_TIM_IC_Start_IT+0x150>)
 80055f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fa:	bf00      	nop
 80055fc:	08005631 	.word	0x08005631
 8005600:	08005679 	.word	0x08005679
 8005604:	08005679 	.word	0x08005679
 8005608:	08005679 	.word	0x08005679
 800560c:	08005643 	.word	0x08005643
 8005610:	08005679 	.word	0x08005679
 8005614:	08005679 	.word	0x08005679
 8005618:	08005679 	.word	0x08005679
 800561c:	08005655 	.word	0x08005655
 8005620:	08005679 	.word	0x08005679
 8005624:	08005679 	.word	0x08005679
 8005628:	08005679 	.word	0x08005679
 800562c:	08005667 	.word	0x08005667
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0202 	orr.w	r2, r2, #2
 800563e:	60da      	str	r2, [r3, #12]
      break;
 8005640:	e01d      	b.n	800567e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0204 	orr.w	r2, r2, #4
 8005650:	60da      	str	r2, [r3, #12]
      break;
 8005652:	e014      	b.n	800567e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0208 	orr.w	r2, r2, #8
 8005662:	60da      	str	r2, [r3, #12]
      break;
 8005664:	e00b      	b.n	800567e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0210 	orr.w	r2, r2, #16
 8005674:	60da      	str	r2, [r3, #12]
      break;
 8005676:	e002      	b.n	800567e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	73fb      	strb	r3, [r7, #15]
      break;
 800567c:	bf00      	nop
  }

  if (status == HAL_OK)
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d14e      	bne.n	8005722 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2201      	movs	r2, #1
 800568a:	6839      	ldr	r1, [r7, #0]
 800568c:	4618      	mov	r0, r3
 800568e:	f001 faf3 	bl	8006c78 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a25      	ldr	r2, [pc, #148]	; (800572c <HAL_TIM_IC_Start_IT+0x280>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d022      	beq.n	80056e2 <HAL_TIM_IC_Start_IT+0x236>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a4:	d01d      	beq.n	80056e2 <HAL_TIM_IC_Start_IT+0x236>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a21      	ldr	r2, [pc, #132]	; (8005730 <HAL_TIM_IC_Start_IT+0x284>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d018      	beq.n	80056e2 <HAL_TIM_IC_Start_IT+0x236>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1f      	ldr	r2, [pc, #124]	; (8005734 <HAL_TIM_IC_Start_IT+0x288>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <HAL_TIM_IC_Start_IT+0x236>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1e      	ldr	r2, [pc, #120]	; (8005738 <HAL_TIM_IC_Start_IT+0x28c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00e      	beq.n	80056e2 <HAL_TIM_IC_Start_IT+0x236>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1c      	ldr	r2, [pc, #112]	; (800573c <HAL_TIM_IC_Start_IT+0x290>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d009      	beq.n	80056e2 <HAL_TIM_IC_Start_IT+0x236>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1b      	ldr	r2, [pc, #108]	; (8005740 <HAL_TIM_IC_Start_IT+0x294>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_TIM_IC_Start_IT+0x236>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a19      	ldr	r2, [pc, #100]	; (8005744 <HAL_TIM_IC_Start_IT+0x298>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d115      	bne.n	800570e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	4b17      	ldr	r3, [pc, #92]	; (8005748 <HAL_TIM_IC_Start_IT+0x29c>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b06      	cmp	r3, #6
 80056f2:	d015      	beq.n	8005720 <HAL_TIM_IC_Start_IT+0x274>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fa:	d011      	beq.n	8005720 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570c:	e008      	b.n	8005720 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0201 	orr.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	e000      	b.n	8005722 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005720:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005722:	7bfb      	ldrb	r3, [r7, #15]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40010000 	.word	0x40010000
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800
 8005738:	40000c00 	.word	0x40000c00
 800573c:	40010400 	.word	0x40010400
 8005740:	40001800 	.word	0x40001800
 8005744:	40014000 	.word	0x40014000
 8005748:	00010007 	.word	0x00010007

0800574c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e08f      	b.n	8005880 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7fc fa33 	bl	8001be0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2202      	movs	r2, #2
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6899      	ldr	r1, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	4b3e      	ldr	r3, [pc, #248]	; (8005888 <HAL_TIM_Encoder_Init+0x13c>)
 800578e:	400b      	ands	r3, r1
 8005790:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3304      	adds	r3, #4
 800579a:	4619      	mov	r1, r3
 800579c:	4610      	mov	r0, r2
 800579e:	f000 fd33 	bl	8006208 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4b31      	ldr	r3, [pc, #196]	; (800588c <HAL_TIM_Encoder_Init+0x140>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	4313      	orrs	r3, r2
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4b2b      	ldr	r3, [pc, #172]	; (8005890 <HAL_TIM_Encoder_Init+0x144>)
 80057e2:	4013      	ands	r3, r2
 80057e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4b2a      	ldr	r3, [pc, #168]	; (8005894 <HAL_TIM_Encoder_Init+0x148>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	4313      	orrs	r3, r2
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	011a      	lsls	r2, r3, #4
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	031b      	lsls	r3, r3, #12
 800580c:	4313      	orrs	r3, r2
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005822:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	4313      	orrs	r3, r2
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	fffebff8 	.word	0xfffebff8
 800588c:	fffffcfc 	.word	0xfffffcfc
 8005890:	fffff3f3 	.word	0xfffff3f3
 8005894:	ffff0f0f 	.word	0xffff0f0f

08005898 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d110      	bne.n	80058ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d102      	bne.n	80058d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058ce:	7b7b      	ldrb	r3, [r7, #13]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d001      	beq.n	80058d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e069      	b.n	80059ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058e8:	e031      	b.n	800594e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d110      	bne.n	8005912 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058f0:	7bbb      	ldrb	r3, [r7, #14]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d102      	bne.n	80058fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058f6:	7b3b      	ldrb	r3, [r7, #12]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d001      	beq.n	8005900 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e055      	b.n	80059ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005910:	e01d      	b.n	800594e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d108      	bne.n	800592a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005918:	7bbb      	ldrb	r3, [r7, #14]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d105      	bne.n	800592a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800591e:	7b7b      	ldrb	r3, [r7, #13]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d102      	bne.n	800592a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005924:	7b3b      	ldrb	r3, [r7, #12]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d001      	beq.n	800592e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e03e      	b.n	80059ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2202      	movs	r2, #2
 8005932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2202      	movs	r2, #2
 8005942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2202      	movs	r2, #2
 800594a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <HAL_TIM_Encoder_Start+0xc4>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b04      	cmp	r3, #4
 8005958:	d008      	beq.n	800596c <HAL_TIM_Encoder_Start+0xd4>
 800595a:	e00f      	b.n	800597c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2201      	movs	r2, #1
 8005962:	2100      	movs	r1, #0
 8005964:	4618      	mov	r0, r3
 8005966:	f001 f987 	bl	8006c78 <TIM_CCxChannelCmd>
      break;
 800596a:	e016      	b.n	800599a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2201      	movs	r2, #1
 8005972:	2104      	movs	r1, #4
 8005974:	4618      	mov	r0, r3
 8005976:	f001 f97f 	bl	8006c78 <TIM_CCxChannelCmd>
      break;
 800597a:	e00e      	b.n	800599a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2201      	movs	r2, #1
 8005982:	2100      	movs	r1, #0
 8005984:	4618      	mov	r0, r3
 8005986:	f001 f977 	bl	8006c78 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2201      	movs	r2, #1
 8005990:	2104      	movs	r1, #4
 8005992:	4618      	mov	r0, r3
 8005994:	f001 f970 	bl	8006c78 <TIM_CCxChannelCmd>
      break;
 8005998:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0201 	orr.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d122      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d11b      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0202 	mvn.w	r2, #2
 80059e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fb fe1a 	bl	8001630 <HAL_TIM_IC_CaptureCallback>
 80059fc:	e005      	b.n	8005a0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fbe4 	bl	80061cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fbeb 	bl	80061e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d122      	bne.n	8005a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d11b      	bne.n	8005a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0204 	mvn.w	r2, #4
 8005a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2202      	movs	r2, #2
 8005a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7fb fdf0 	bl	8001630 <HAL_TIM_IC_CaptureCallback>
 8005a50:	e005      	b.n	8005a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fbba 	bl	80061cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fbc1 	bl	80061e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0308 	and.w	r3, r3, #8
 8005a6e:	2b08      	cmp	r3, #8
 8005a70:	d122      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d11b      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0208 	mvn.w	r2, #8
 8005a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fb fdc6 	bl	8001630 <HAL_TIM_IC_CaptureCallback>
 8005aa4:	e005      	b.n	8005ab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fb90 	bl	80061cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fb97 	bl	80061e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f003 0310 	and.w	r3, r3, #16
 8005ac2:	2b10      	cmp	r3, #16
 8005ac4:	d122      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d11b      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0210 	mvn.w	r2, #16
 8005adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fb fd9c 	bl	8001630 <HAL_TIM_IC_CaptureCallback>
 8005af8:	e005      	b.n	8005b06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fb66 	bl	80061cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fb6d 	bl	80061e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d10e      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d107      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0201 	mvn.w	r2, #1
 8005b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fb fd40 	bl	80015b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b42:	2b80      	cmp	r3, #128	; 0x80
 8005b44:	d10e      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b50:	2b80      	cmp	r3, #128	; 0x80
 8005b52:	d107      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f001 f948 	bl	8006df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b72:	d10e      	bne.n	8005b92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7e:	2b80      	cmp	r3, #128	; 0x80
 8005b80:	d107      	bne.n	8005b92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 f93b 	bl	8006e08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9c:	2b40      	cmp	r3, #64	; 0x40
 8005b9e:	d10e      	bne.n	8005bbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b40      	cmp	r3, #64	; 0x40
 8005bac:	d107      	bne.n	8005bbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fb1b 	bl	80061f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f003 0320 	and.w	r3, r3, #32
 8005bc8:	2b20      	cmp	r3, #32
 8005bca:	d10e      	bne.n	8005bea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d107      	bne.n	8005bea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f06f 0220 	mvn.w	r2, #32
 8005be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f001 f8fb 	bl	8006de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b086      	sub	sp, #24
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e088      	b.n	8005d22 <HAL_TIM_IC_ConfigChannel+0x130>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d11b      	bne.n	8005c56 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	6819      	ldr	r1, [r3, #0]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f000 fe5b 	bl	80068e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	699a      	ldr	r2, [r3, #24]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 020c 	bic.w	r2, r2, #12
 8005c40:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6999      	ldr	r1, [r3, #24]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	619a      	str	r2, [r3, #24]
 8005c54:	e060      	b.n	8005d18 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d11c      	bne.n	8005c96 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6818      	ldr	r0, [r3, #0]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	6819      	ldr	r1, [r3, #0]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f000 fedf 	bl	8006a2e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c7e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6999      	ldr	r1, [r3, #24]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	021a      	lsls	r2, r3, #8
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	619a      	str	r2, [r3, #24]
 8005c94:	e040      	b.n	8005d18 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d11b      	bne.n	8005cd4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	6819      	ldr	r1, [r3, #0]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f000 ff2c 	bl	8006b08 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69da      	ldr	r2, [r3, #28]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 020c 	bic.w	r2, r2, #12
 8005cbe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69d9      	ldr	r1, [r3, #28]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	61da      	str	r2, [r3, #28]
 8005cd2:	e021      	b.n	8005d18 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b0c      	cmp	r3, #12
 8005cd8:	d11c      	bne.n	8005d14 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	6819      	ldr	r1, [r3, #0]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f000 ff49 	bl	8006b80 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005cfc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69d9      	ldr	r1, [r3, #28]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	021a      	lsls	r2, r3, #8
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	61da      	str	r2, [r3, #28]
 8005d12:	e001      	b.n	8005d18 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d46:	2302      	movs	r3, #2
 8005d48:	e0ff      	b.n	8005f4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b14      	cmp	r3, #20
 8005d56:	f200 80f0 	bhi.w	8005f3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d5a:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d60:	08005db5 	.word	0x08005db5
 8005d64:	08005f3b 	.word	0x08005f3b
 8005d68:	08005f3b 	.word	0x08005f3b
 8005d6c:	08005f3b 	.word	0x08005f3b
 8005d70:	08005df5 	.word	0x08005df5
 8005d74:	08005f3b 	.word	0x08005f3b
 8005d78:	08005f3b 	.word	0x08005f3b
 8005d7c:	08005f3b 	.word	0x08005f3b
 8005d80:	08005e37 	.word	0x08005e37
 8005d84:	08005f3b 	.word	0x08005f3b
 8005d88:	08005f3b 	.word	0x08005f3b
 8005d8c:	08005f3b 	.word	0x08005f3b
 8005d90:	08005e77 	.word	0x08005e77
 8005d94:	08005f3b 	.word	0x08005f3b
 8005d98:	08005f3b 	.word	0x08005f3b
 8005d9c:	08005f3b 	.word	0x08005f3b
 8005da0:	08005eb9 	.word	0x08005eb9
 8005da4:	08005f3b 	.word	0x08005f3b
 8005da8:	08005f3b 	.word	0x08005f3b
 8005dac:	08005f3b 	.word	0x08005f3b
 8005db0:	08005ef9 	.word	0x08005ef9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fabe 	bl	800633c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0208 	orr.w	r2, r2, #8
 8005dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0204 	bic.w	r2, r2, #4
 8005dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6999      	ldr	r1, [r3, #24]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	619a      	str	r2, [r3, #24]
      break;
 8005df2:	e0a5      	b.n	8005f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fb2e 	bl	800645c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6999      	ldr	r1, [r3, #24]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	021a      	lsls	r2, r3, #8
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	619a      	str	r2, [r3, #24]
      break;
 8005e34:	e084      	b.n	8005f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fb97 	bl	8006570 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0208 	orr.w	r2, r2, #8
 8005e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0204 	bic.w	r2, r2, #4
 8005e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69d9      	ldr	r1, [r3, #28]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	61da      	str	r2, [r3, #28]
      break;
 8005e74:	e064      	b.n	8005f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fbff 	bl	8006680 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69da      	ldr	r2, [r3, #28]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69da      	ldr	r2, [r3, #28]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69d9      	ldr	r1, [r3, #28]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	021a      	lsls	r2, r3, #8
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	61da      	str	r2, [r3, #28]
      break;
 8005eb6:	e043      	b.n	8005f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fc48 	bl	8006754 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0208 	orr.w	r2, r2, #8
 8005ed2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0204 	bic.w	r2, r2, #4
 8005ee2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	691a      	ldr	r2, [r3, #16]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ef6:	e023      	b.n	8005f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68b9      	ldr	r1, [r7, #8]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fc8c 	bl	800681c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	021a      	lsls	r2, r3, #8
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f38:	e002      	b.n	8005f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop

08005f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_TIM_ConfigClockSource+0x1c>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e0dc      	b.n	800612a <HAL_TIM_ConfigClockSource+0x1d6>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	4b6a      	ldr	r3, [pc, #424]	; (8006134 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a64      	ldr	r2, [pc, #400]	; (8006138 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	f000 80a9 	beq.w	80060fe <HAL_TIM_ConfigClockSource+0x1aa>
 8005fac:	4a62      	ldr	r2, [pc, #392]	; (8006138 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	f200 80ae 	bhi.w	8006110 <HAL_TIM_ConfigClockSource+0x1bc>
 8005fb4:	4a61      	ldr	r2, [pc, #388]	; (800613c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	f000 80a1 	beq.w	80060fe <HAL_TIM_ConfigClockSource+0x1aa>
 8005fbc:	4a5f      	ldr	r2, [pc, #380]	; (800613c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	f200 80a6 	bhi.w	8006110 <HAL_TIM_ConfigClockSource+0x1bc>
 8005fc4:	4a5e      	ldr	r2, [pc, #376]	; (8006140 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	f000 8099 	beq.w	80060fe <HAL_TIM_ConfigClockSource+0x1aa>
 8005fcc:	4a5c      	ldr	r2, [pc, #368]	; (8006140 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	f200 809e 	bhi.w	8006110 <HAL_TIM_ConfigClockSource+0x1bc>
 8005fd4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005fd8:	f000 8091 	beq.w	80060fe <HAL_TIM_ConfigClockSource+0x1aa>
 8005fdc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005fe0:	f200 8096 	bhi.w	8006110 <HAL_TIM_ConfigClockSource+0x1bc>
 8005fe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fe8:	f000 8089 	beq.w	80060fe <HAL_TIM_ConfigClockSource+0x1aa>
 8005fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ff0:	f200 808e 	bhi.w	8006110 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff8:	d03e      	beq.n	8006078 <HAL_TIM_ConfigClockSource+0x124>
 8005ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ffe:	f200 8087 	bhi.w	8006110 <HAL_TIM_ConfigClockSource+0x1bc>
 8006002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006006:	f000 8086 	beq.w	8006116 <HAL_TIM_ConfigClockSource+0x1c2>
 800600a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600e:	d87f      	bhi.n	8006110 <HAL_TIM_ConfigClockSource+0x1bc>
 8006010:	2b70      	cmp	r3, #112	; 0x70
 8006012:	d01a      	beq.n	800604a <HAL_TIM_ConfigClockSource+0xf6>
 8006014:	2b70      	cmp	r3, #112	; 0x70
 8006016:	d87b      	bhi.n	8006110 <HAL_TIM_ConfigClockSource+0x1bc>
 8006018:	2b60      	cmp	r3, #96	; 0x60
 800601a:	d050      	beq.n	80060be <HAL_TIM_ConfigClockSource+0x16a>
 800601c:	2b60      	cmp	r3, #96	; 0x60
 800601e:	d877      	bhi.n	8006110 <HAL_TIM_ConfigClockSource+0x1bc>
 8006020:	2b50      	cmp	r3, #80	; 0x50
 8006022:	d03c      	beq.n	800609e <HAL_TIM_ConfigClockSource+0x14a>
 8006024:	2b50      	cmp	r3, #80	; 0x50
 8006026:	d873      	bhi.n	8006110 <HAL_TIM_ConfigClockSource+0x1bc>
 8006028:	2b40      	cmp	r3, #64	; 0x40
 800602a:	d058      	beq.n	80060de <HAL_TIM_ConfigClockSource+0x18a>
 800602c:	2b40      	cmp	r3, #64	; 0x40
 800602e:	d86f      	bhi.n	8006110 <HAL_TIM_ConfigClockSource+0x1bc>
 8006030:	2b30      	cmp	r3, #48	; 0x30
 8006032:	d064      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x1aa>
 8006034:	2b30      	cmp	r3, #48	; 0x30
 8006036:	d86b      	bhi.n	8006110 <HAL_TIM_ConfigClockSource+0x1bc>
 8006038:	2b20      	cmp	r3, #32
 800603a:	d060      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x1aa>
 800603c:	2b20      	cmp	r3, #32
 800603e:	d867      	bhi.n	8006110 <HAL_TIM_ConfigClockSource+0x1bc>
 8006040:	2b00      	cmp	r3, #0
 8006042:	d05c      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x1aa>
 8006044:	2b10      	cmp	r3, #16
 8006046:	d05a      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x1aa>
 8006048:	e062      	b.n	8006110 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6818      	ldr	r0, [r3, #0]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	6899      	ldr	r1, [r3, #8]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f000 fded 	bl	8006c38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800606c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	609a      	str	r2, [r3, #8]
      break;
 8006076:	e04f      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	6899      	ldr	r1, [r3, #8]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f000 fdd6 	bl	8006c38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800609a:	609a      	str	r2, [r3, #8]
      break;
 800609c:	e03c      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	6859      	ldr	r1, [r3, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	461a      	mov	r2, r3
 80060ac:	f000 fc90 	bl	80069d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2150      	movs	r1, #80	; 0x50
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fda0 	bl	8006bfc <TIM_ITRx_SetConfig>
      break;
 80060bc:	e02c      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6818      	ldr	r0, [r3, #0]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	6859      	ldr	r1, [r3, #4]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	461a      	mov	r2, r3
 80060cc:	f000 fcec 	bl	8006aa8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2160      	movs	r1, #96	; 0x60
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fd90 	bl	8006bfc <TIM_ITRx_SetConfig>
      break;
 80060dc:	e01c      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	6859      	ldr	r1, [r3, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	461a      	mov	r2, r3
 80060ec:	f000 fc70 	bl	80069d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2140      	movs	r1, #64	; 0x40
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fd80 	bl	8006bfc <TIM_ITRx_SetConfig>
      break;
 80060fc:	e00c      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4619      	mov	r1, r3
 8006108:	4610      	mov	r0, r2
 800610a:	f000 fd77 	bl	8006bfc <TIM_ITRx_SetConfig>
      break;
 800610e:	e003      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	73fb      	strb	r3, [r7, #15]
      break;
 8006114:	e000      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006116:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	ffceff88 	.word	0xffceff88
 8006138:	00100040 	.word	0x00100040
 800613c:	00100030 	.word	0x00100030
 8006140:	00100020 	.word	0x00100020

08006144 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b0c      	cmp	r3, #12
 8006156:	d831      	bhi.n	80061bc <HAL_TIM_ReadCapturedValue+0x78>
 8006158:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <HAL_TIM_ReadCapturedValue+0x1c>)
 800615a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615e:	bf00      	nop
 8006160:	08006195 	.word	0x08006195
 8006164:	080061bd 	.word	0x080061bd
 8006168:	080061bd 	.word	0x080061bd
 800616c:	080061bd 	.word	0x080061bd
 8006170:	0800619f 	.word	0x0800619f
 8006174:	080061bd 	.word	0x080061bd
 8006178:	080061bd 	.word	0x080061bd
 800617c:	080061bd 	.word	0x080061bd
 8006180:	080061a9 	.word	0x080061a9
 8006184:	080061bd 	.word	0x080061bd
 8006188:	080061bd 	.word	0x080061bd
 800618c:	080061bd 	.word	0x080061bd
 8006190:	080061b3 	.word	0x080061b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619a:	60fb      	str	r3, [r7, #12]

      break;
 800619c:	e00f      	b.n	80061be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a4:	60fb      	str	r3, [r7, #12]

      break;
 80061a6:	e00a      	b.n	80061be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ae:	60fb      	str	r3, [r7, #12]

      break;
 80061b0:	e005      	b.n	80061be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	60fb      	str	r3, [r7, #12]

      break;
 80061ba:	e000      	b.n	80061be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80061bc:	bf00      	nop
  }

  return tmpreg;
 80061be:	68fb      	ldr	r3, [r7, #12]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a40      	ldr	r2, [pc, #256]	; (800631c <TIM_Base_SetConfig+0x114>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d013      	beq.n	8006248 <TIM_Base_SetConfig+0x40>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006226:	d00f      	beq.n	8006248 <TIM_Base_SetConfig+0x40>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a3d      	ldr	r2, [pc, #244]	; (8006320 <TIM_Base_SetConfig+0x118>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00b      	beq.n	8006248 <TIM_Base_SetConfig+0x40>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a3c      	ldr	r2, [pc, #240]	; (8006324 <TIM_Base_SetConfig+0x11c>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d007      	beq.n	8006248 <TIM_Base_SetConfig+0x40>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a3b      	ldr	r2, [pc, #236]	; (8006328 <TIM_Base_SetConfig+0x120>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d003      	beq.n	8006248 <TIM_Base_SetConfig+0x40>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a3a      	ldr	r2, [pc, #232]	; (800632c <TIM_Base_SetConfig+0x124>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d108      	bne.n	800625a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a2f      	ldr	r2, [pc, #188]	; (800631c <TIM_Base_SetConfig+0x114>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d01f      	beq.n	80062a2 <TIM_Base_SetConfig+0x9a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006268:	d01b      	beq.n	80062a2 <TIM_Base_SetConfig+0x9a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2c      	ldr	r2, [pc, #176]	; (8006320 <TIM_Base_SetConfig+0x118>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d017      	beq.n	80062a2 <TIM_Base_SetConfig+0x9a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a2b      	ldr	r2, [pc, #172]	; (8006324 <TIM_Base_SetConfig+0x11c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <TIM_Base_SetConfig+0x9a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a2a      	ldr	r2, [pc, #168]	; (8006328 <TIM_Base_SetConfig+0x120>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00f      	beq.n	80062a2 <TIM_Base_SetConfig+0x9a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a29      	ldr	r2, [pc, #164]	; (800632c <TIM_Base_SetConfig+0x124>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00b      	beq.n	80062a2 <TIM_Base_SetConfig+0x9a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a28      	ldr	r2, [pc, #160]	; (8006330 <TIM_Base_SetConfig+0x128>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <TIM_Base_SetConfig+0x9a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a27      	ldr	r2, [pc, #156]	; (8006334 <TIM_Base_SetConfig+0x12c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_Base_SetConfig+0x9a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a26      	ldr	r2, [pc, #152]	; (8006338 <TIM_Base_SetConfig+0x130>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d108      	bne.n	80062b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a10      	ldr	r2, [pc, #64]	; (800631c <TIM_Base_SetConfig+0x114>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00f      	beq.n	8006300 <TIM_Base_SetConfig+0xf8>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a12      	ldr	r2, [pc, #72]	; (800632c <TIM_Base_SetConfig+0x124>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00b      	beq.n	8006300 <TIM_Base_SetConfig+0xf8>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a11      	ldr	r2, [pc, #68]	; (8006330 <TIM_Base_SetConfig+0x128>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d007      	beq.n	8006300 <TIM_Base_SetConfig+0xf8>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a10      	ldr	r2, [pc, #64]	; (8006334 <TIM_Base_SetConfig+0x12c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d003      	beq.n	8006300 <TIM_Base_SetConfig+0xf8>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a0f      	ldr	r2, [pc, #60]	; (8006338 <TIM_Base_SetConfig+0x130>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d103      	bne.n	8006308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	691a      	ldr	r2, [r3, #16]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	615a      	str	r2, [r3, #20]
}
 800630e:	bf00      	nop
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40010000 	.word	0x40010000
 8006320:	40000400 	.word	0x40000400
 8006324:	40000800 	.word	0x40000800
 8006328:	40000c00 	.word	0x40000c00
 800632c:	40010400 	.word	0x40010400
 8006330:	40014000 	.word	0x40014000
 8006334:	40014400 	.word	0x40014400
 8006338:	40014800 	.word	0x40014800

0800633c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	f023 0201 	bic.w	r2, r3, #1
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4b37      	ldr	r3, [pc, #220]	; (8006444 <TIM_OC1_SetConfig+0x108>)
 8006368:	4013      	ands	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0303 	bic.w	r3, r3, #3
 8006372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f023 0302 	bic.w	r3, r3, #2
 8006384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a2d      	ldr	r2, [pc, #180]	; (8006448 <TIM_OC1_SetConfig+0x10c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00f      	beq.n	80063b8 <TIM_OC1_SetConfig+0x7c>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a2c      	ldr	r2, [pc, #176]	; (800644c <TIM_OC1_SetConfig+0x110>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00b      	beq.n	80063b8 <TIM_OC1_SetConfig+0x7c>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a2b      	ldr	r2, [pc, #172]	; (8006450 <TIM_OC1_SetConfig+0x114>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d007      	beq.n	80063b8 <TIM_OC1_SetConfig+0x7c>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a2a      	ldr	r2, [pc, #168]	; (8006454 <TIM_OC1_SetConfig+0x118>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d003      	beq.n	80063b8 <TIM_OC1_SetConfig+0x7c>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a29      	ldr	r2, [pc, #164]	; (8006458 <TIM_OC1_SetConfig+0x11c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d10c      	bne.n	80063d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f023 0308 	bic.w	r3, r3, #8
 80063be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f023 0304 	bic.w	r3, r3, #4
 80063d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a1c      	ldr	r2, [pc, #112]	; (8006448 <TIM_OC1_SetConfig+0x10c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00f      	beq.n	80063fa <TIM_OC1_SetConfig+0xbe>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1b      	ldr	r2, [pc, #108]	; (800644c <TIM_OC1_SetConfig+0x110>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00b      	beq.n	80063fa <TIM_OC1_SetConfig+0xbe>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1a      	ldr	r2, [pc, #104]	; (8006450 <TIM_OC1_SetConfig+0x114>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d007      	beq.n	80063fa <TIM_OC1_SetConfig+0xbe>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a19      	ldr	r2, [pc, #100]	; (8006454 <TIM_OC1_SetConfig+0x118>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d003      	beq.n	80063fa <TIM_OC1_SetConfig+0xbe>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a18      	ldr	r2, [pc, #96]	; (8006458 <TIM_OC1_SetConfig+0x11c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d111      	bne.n	800641e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4313      	orrs	r3, r2
 8006412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	621a      	str	r2, [r3, #32]
}
 8006438:	bf00      	nop
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	fffeff8f 	.word	0xfffeff8f
 8006448:	40010000 	.word	0x40010000
 800644c:	40010400 	.word	0x40010400
 8006450:	40014000 	.word	0x40014000
 8006454:	40014400 	.word	0x40014400
 8006458:	40014800 	.word	0x40014800

0800645c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	f023 0210 	bic.w	r2, r3, #16
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4b34      	ldr	r3, [pc, #208]	; (8006558 <TIM_OC2_SetConfig+0xfc>)
 8006488:	4013      	ands	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f023 0320 	bic.w	r3, r3, #32
 80064a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a29      	ldr	r2, [pc, #164]	; (800655c <TIM_OC2_SetConfig+0x100>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_OC2_SetConfig+0x68>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a28      	ldr	r2, [pc, #160]	; (8006560 <TIM_OC2_SetConfig+0x104>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d10d      	bne.n	80064e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	011b      	lsls	r3, r3, #4
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a1e      	ldr	r2, [pc, #120]	; (800655c <TIM_OC2_SetConfig+0x100>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00f      	beq.n	8006508 <TIM_OC2_SetConfig+0xac>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a1d      	ldr	r2, [pc, #116]	; (8006560 <TIM_OC2_SetConfig+0x104>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00b      	beq.n	8006508 <TIM_OC2_SetConfig+0xac>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a1c      	ldr	r2, [pc, #112]	; (8006564 <TIM_OC2_SetConfig+0x108>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d007      	beq.n	8006508 <TIM_OC2_SetConfig+0xac>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a1b      	ldr	r2, [pc, #108]	; (8006568 <TIM_OC2_SetConfig+0x10c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d003      	beq.n	8006508 <TIM_OC2_SetConfig+0xac>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a1a      	ldr	r2, [pc, #104]	; (800656c <TIM_OC2_SetConfig+0x110>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d113      	bne.n	8006530 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800650e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006516:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	621a      	str	r2, [r3, #32]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	feff8fff 	.word	0xfeff8fff
 800655c:	40010000 	.word	0x40010000
 8006560:	40010400 	.word	0x40010400
 8006564:	40014000 	.word	0x40014000
 8006568:	40014400 	.word	0x40014400
 800656c:	40014800 	.word	0x40014800

08006570 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4b33      	ldr	r3, [pc, #204]	; (8006668 <TIM_OC3_SetConfig+0xf8>)
 800659c:	4013      	ands	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0303 	bic.w	r3, r3, #3
 80065a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	021b      	lsls	r3, r3, #8
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a28      	ldr	r2, [pc, #160]	; (800666c <TIM_OC3_SetConfig+0xfc>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d003      	beq.n	80065d6 <TIM_OC3_SetConfig+0x66>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a27      	ldr	r2, [pc, #156]	; (8006670 <TIM_OC3_SetConfig+0x100>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d10d      	bne.n	80065f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a1d      	ldr	r2, [pc, #116]	; (800666c <TIM_OC3_SetConfig+0xfc>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00f      	beq.n	800661a <TIM_OC3_SetConfig+0xaa>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a1c      	ldr	r2, [pc, #112]	; (8006670 <TIM_OC3_SetConfig+0x100>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00b      	beq.n	800661a <TIM_OC3_SetConfig+0xaa>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a1b      	ldr	r2, [pc, #108]	; (8006674 <TIM_OC3_SetConfig+0x104>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d007      	beq.n	800661a <TIM_OC3_SetConfig+0xaa>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a1a      	ldr	r2, [pc, #104]	; (8006678 <TIM_OC3_SetConfig+0x108>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d003      	beq.n	800661a <TIM_OC3_SetConfig+0xaa>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a19      	ldr	r2, [pc, #100]	; (800667c <TIM_OC3_SetConfig+0x10c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d113      	bne.n	8006642 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	621a      	str	r2, [r3, #32]
}
 800665c:	bf00      	nop
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	fffeff8f 	.word	0xfffeff8f
 800666c:	40010000 	.word	0x40010000
 8006670:	40010400 	.word	0x40010400
 8006674:	40014000 	.word	0x40014000
 8006678:	40014400 	.word	0x40014400
 800667c:	40014800 	.word	0x40014800

08006680 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4b24      	ldr	r3, [pc, #144]	; (800673c <TIM_OC4_SetConfig+0xbc>)
 80066ac:	4013      	ands	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	021b      	lsls	r3, r3, #8
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	031b      	lsls	r3, r3, #12
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a19      	ldr	r2, [pc, #100]	; (8006740 <TIM_OC4_SetConfig+0xc0>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00f      	beq.n	8006700 <TIM_OC4_SetConfig+0x80>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a18      	ldr	r2, [pc, #96]	; (8006744 <TIM_OC4_SetConfig+0xc4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00b      	beq.n	8006700 <TIM_OC4_SetConfig+0x80>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a17      	ldr	r2, [pc, #92]	; (8006748 <TIM_OC4_SetConfig+0xc8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d007      	beq.n	8006700 <TIM_OC4_SetConfig+0x80>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a16      	ldr	r2, [pc, #88]	; (800674c <TIM_OC4_SetConfig+0xcc>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d003      	beq.n	8006700 <TIM_OC4_SetConfig+0x80>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a15      	ldr	r2, [pc, #84]	; (8006750 <TIM_OC4_SetConfig+0xd0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d109      	bne.n	8006714 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	019b      	lsls	r3, r3, #6
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	621a      	str	r2, [r3, #32]
}
 800672e:	bf00      	nop
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	feff8fff 	.word	0xfeff8fff
 8006740:	40010000 	.word	0x40010000
 8006744:	40010400 	.word	0x40010400
 8006748:	40014000 	.word	0x40014000
 800674c:	40014400 	.word	0x40014400
 8006750:	40014800 	.word	0x40014800

08006754 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4b21      	ldr	r3, [pc, #132]	; (8006804 <TIM_OC5_SetConfig+0xb0>)
 8006780:	4013      	ands	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006794:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	041b      	lsls	r3, r3, #16
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4313      	orrs	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a18      	ldr	r2, [pc, #96]	; (8006808 <TIM_OC5_SetConfig+0xb4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00f      	beq.n	80067ca <TIM_OC5_SetConfig+0x76>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a17      	ldr	r2, [pc, #92]	; (800680c <TIM_OC5_SetConfig+0xb8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00b      	beq.n	80067ca <TIM_OC5_SetConfig+0x76>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a16      	ldr	r2, [pc, #88]	; (8006810 <TIM_OC5_SetConfig+0xbc>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d007      	beq.n	80067ca <TIM_OC5_SetConfig+0x76>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a15      	ldr	r2, [pc, #84]	; (8006814 <TIM_OC5_SetConfig+0xc0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d003      	beq.n	80067ca <TIM_OC5_SetConfig+0x76>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a14      	ldr	r2, [pc, #80]	; (8006818 <TIM_OC5_SetConfig+0xc4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d109      	bne.n	80067de <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	021b      	lsls	r3, r3, #8
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	621a      	str	r2, [r3, #32]
}
 80067f8:	bf00      	nop
 80067fa:	371c      	adds	r7, #28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	fffeff8f 	.word	0xfffeff8f
 8006808:	40010000 	.word	0x40010000
 800680c:	40010400 	.word	0x40010400
 8006810:	40014000 	.word	0x40014000
 8006814:	40014400 	.word	0x40014400
 8006818:	40014800 	.word	0x40014800

0800681c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4b22      	ldr	r3, [pc, #136]	; (80068d0 <TIM_OC6_SetConfig+0xb4>)
 8006848:	4013      	ands	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800685e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	051b      	lsls	r3, r3, #20
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a19      	ldr	r2, [pc, #100]	; (80068d4 <TIM_OC6_SetConfig+0xb8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00f      	beq.n	8006894 <TIM_OC6_SetConfig+0x78>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a18      	ldr	r2, [pc, #96]	; (80068d8 <TIM_OC6_SetConfig+0xbc>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00b      	beq.n	8006894 <TIM_OC6_SetConfig+0x78>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a17      	ldr	r2, [pc, #92]	; (80068dc <TIM_OC6_SetConfig+0xc0>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d007      	beq.n	8006894 <TIM_OC6_SetConfig+0x78>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a16      	ldr	r2, [pc, #88]	; (80068e0 <TIM_OC6_SetConfig+0xc4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d003      	beq.n	8006894 <TIM_OC6_SetConfig+0x78>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a15      	ldr	r2, [pc, #84]	; (80068e4 <TIM_OC6_SetConfig+0xc8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d109      	bne.n	80068a8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800689a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	029b      	lsls	r3, r3, #10
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	621a      	str	r2, [r3, #32]
}
 80068c2:	bf00      	nop
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	feff8fff 	.word	0xfeff8fff
 80068d4:	40010000 	.word	0x40010000
 80068d8:	40010400 	.word	0x40010400
 80068dc:	40014000 	.word	0x40014000
 80068e0:	40014400 	.word	0x40014400
 80068e4:	40014800 	.word	0x40014800

080068e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f023 0201 	bic.w	r2, r3, #1
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4a28      	ldr	r2, [pc, #160]	; (80069b4 <TIM_TI1_SetConfig+0xcc>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d01b      	beq.n	800694e <TIM_TI1_SetConfig+0x66>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691c:	d017      	beq.n	800694e <TIM_TI1_SetConfig+0x66>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4a25      	ldr	r2, [pc, #148]	; (80069b8 <TIM_TI1_SetConfig+0xd0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d013      	beq.n	800694e <TIM_TI1_SetConfig+0x66>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4a24      	ldr	r2, [pc, #144]	; (80069bc <TIM_TI1_SetConfig+0xd4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00f      	beq.n	800694e <TIM_TI1_SetConfig+0x66>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4a23      	ldr	r2, [pc, #140]	; (80069c0 <TIM_TI1_SetConfig+0xd8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00b      	beq.n	800694e <TIM_TI1_SetConfig+0x66>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4a22      	ldr	r2, [pc, #136]	; (80069c4 <TIM_TI1_SetConfig+0xdc>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <TIM_TI1_SetConfig+0x66>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4a21      	ldr	r2, [pc, #132]	; (80069c8 <TIM_TI1_SetConfig+0xe0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_TI1_SetConfig+0x66>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4a20      	ldr	r2, [pc, #128]	; (80069cc <TIM_TI1_SetConfig+0xe4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d101      	bne.n	8006952 <TIM_TI1_SetConfig+0x6a>
 800694e:	2301      	movs	r3, #1
 8006950:	e000      	b.n	8006954 <TIM_TI1_SetConfig+0x6c>
 8006952:	2300      	movs	r3, #0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d008      	beq.n	800696a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f023 0303 	bic.w	r3, r3, #3
 800695e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	e003      	b.n	8006972 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f043 0301 	orr.w	r3, r3, #1
 8006970:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	b2db      	uxtb	r3, r3
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f023 030a 	bic.w	r3, r3, #10
 800698c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f003 030a 	and.w	r3, r3, #10
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	4313      	orrs	r3, r2
 8006998:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	621a      	str	r2, [r3, #32]
}
 80069a6:	bf00      	nop
 80069a8:	371c      	adds	r7, #28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40000400 	.word	0x40000400
 80069bc:	40000800 	.word	0x40000800
 80069c0:	40000c00 	.word	0x40000c00
 80069c4:	40010400 	.word	0x40010400
 80069c8:	40001800 	.word	0x40001800
 80069cc:	40014000 	.word	0x40014000

080069d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	f023 0201 	bic.w	r2, r3, #1
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f023 030a 	bic.w	r3, r3, #10
 8006a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	621a      	str	r2, [r3, #32]
}
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b087      	sub	sp, #28
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
 8006a3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	f023 0210 	bic.w	r2, r3, #16
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	031b      	lsls	r3, r3, #12
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	621a      	str	r2, [r3, #32]
}
 8006a9c:	bf00      	nop
 8006a9e:	371c      	adds	r7, #28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	f023 0210 	bic.w	r2, r3, #16
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ad2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	031b      	lsls	r3, r3, #12
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ae4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	621a      	str	r2, [r3, #32]
}
 8006afc:	bf00      	nop
 8006afe:	371c      	adds	r7, #28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f023 0303 	bic.w	r3, r3, #3
 8006b34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	011b      	lsls	r3, r3, #4
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006b58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	621a      	str	r2, [r3, #32]
}
 8006b74:	bf00      	nop
 8006b76:	371c      	adds	r7, #28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	021b      	lsls	r3, r3, #8
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	031b      	lsls	r3, r3, #12
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006bd2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	031b      	lsls	r3, r3, #12
 8006bd8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	621a      	str	r2, [r3, #32]
}
 8006bee:	bf00      	nop
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
	...

08006bfc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <TIM_ITRx_SetConfig+0x38>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	f043 0307 	orr.w	r3, r3, #7
 8006c1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	609a      	str	r2, [r3, #8]
}
 8006c26:	bf00      	nop
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	ffcfff8f 	.word	0xffcfff8f

08006c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	021a      	lsls	r2, r3, #8
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	609a      	str	r2, [r3, #8]
}
 8006c6c:	bf00      	nop
 8006c6e:	371c      	adds	r7, #28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f003 031f 	and.w	r3, r3, #31
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a1a      	ldr	r2, [r3, #32]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	43db      	mvns	r3, r3
 8006c9a:	401a      	ands	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a1a      	ldr	r2, [r3, #32]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f003 031f 	and.w	r3, r3, #31
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
	...

08006cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e06d      	b.n	8006db8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a30      	ldr	r2, [pc, #192]	; (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a2f      	ldr	r2, [pc, #188]	; (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d108      	bne.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a20      	ldr	r2, [pc, #128]	; (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d022      	beq.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4e:	d01d      	beq.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a1d      	ldr	r2, [pc, #116]	; (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d018      	beq.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a1c      	ldr	r2, [pc, #112]	; (8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d013      	beq.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a1a      	ldr	r2, [pc, #104]	; (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d00e      	beq.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a15      	ldr	r2, [pc, #84]	; (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d009      	beq.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a16      	ldr	r2, [pc, #88]	; (8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d004      	beq.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a15      	ldr	r2, [pc, #84]	; (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d10c      	bne.n	8006da6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	40010000 	.word	0x40010000
 8006dc8:	40010400 	.word	0x40010400
 8006dcc:	40000400 	.word	0x40000400
 8006dd0:	40000800 	.word	0x40000800
 8006dd4:	40000c00 	.word	0x40000c00
 8006dd8:	40001800 	.word	0x40001800
 8006ddc:	40014000 	.word	0x40014000

08006de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e042      	b.n	8006eb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d106      	bne.n	8006e46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7fa ff5b 	bl	8001cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2224      	movs	r2, #36	; 0x24
 8006e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0201 	bic.w	r2, r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f8c2 	bl	8006fe8 <UART_SetConfig>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d101      	bne.n	8006e6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e022      	b.n	8006eb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d002      	beq.n	8006e7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 ff22 	bl	8007cc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689a      	ldr	r2, [r3, #8]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0201 	orr.w	r2, r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 ffa9 	bl	8007e04 <UART_CheckIdleState>
 8006eb2:	4603      	mov	r3, r0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08a      	sub	sp, #40	; 0x28
 8006ec0:	af02      	add	r7, sp, #8
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	603b      	str	r3, [r7, #0]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed2:	2b20      	cmp	r3, #32
 8006ed4:	f040 8083 	bne.w	8006fde <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <HAL_UART_Transmit+0x28>
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e07b      	b.n	8006fe0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d101      	bne.n	8006ef6 <HAL_UART_Transmit+0x3a>
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	e074      	b.n	8006fe0 <HAL_UART_Transmit+0x124>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2221      	movs	r2, #33	; 0x21
 8006f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f0e:	f7fb fa1d 	bl	800234c <HAL_GetTick>
 8006f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	88fa      	ldrh	r2, [r7, #6]
 8006f18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	88fa      	ldrh	r2, [r7, #6]
 8006f20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2c:	d108      	bne.n	8006f40 <HAL_UART_Transmit+0x84>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d104      	bne.n	8006f40 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006f36:	2300      	movs	r3, #0
 8006f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	61bb      	str	r3, [r7, #24]
 8006f3e:	e003      	b.n	8006f48 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f44:	2300      	movs	r3, #0
 8006f46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006f50:	e02c      	b.n	8006fac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2180      	movs	r1, #128	; 0x80
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f000 ff9c 	bl	8007e9a <UART_WaitOnFlagUntilTimeout>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e039      	b.n	8006fe0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10b      	bne.n	8006f8a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	3302      	adds	r3, #2
 8006f86:	61bb      	str	r3, [r7, #24]
 8006f88:	e007      	b.n	8006f9a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	781a      	ldrb	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	3301      	adds	r3, #1
 8006f98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1cc      	bne.n	8006f52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2140      	movs	r1, #64	; 0x40
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 ff69 	bl	8007e9a <UART_WaitOnFlagUntilTimeout>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e006      	b.n	8006fe0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e000      	b.n	8006fe0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006fde:	2302      	movs	r3, #2
  }
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3720      	adds	r7, #32
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fec:	b092      	sub	sp, #72	; 0x48
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	431a      	orrs	r2, r3
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	431a      	orrs	r2, r3
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	4313      	orrs	r3, r2
 800700e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	4bbe      	ldr	r3, [pc, #760]	; (8007310 <UART_SetConfig+0x328>)
 8007018:	4013      	ands	r3, r2
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	6812      	ldr	r2, [r2, #0]
 800701e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007020:	430b      	orrs	r3, r1
 8007022:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	68da      	ldr	r2, [r3, #12]
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4ab3      	ldr	r2, [pc, #716]	; (8007314 <UART_SetConfig+0x32c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d004      	beq.n	8007054 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007050:	4313      	orrs	r3, r2
 8007052:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689a      	ldr	r2, [r3, #8]
 800705a:	4baf      	ldr	r3, [pc, #700]	; (8007318 <UART_SetConfig+0x330>)
 800705c:	4013      	ands	r3, r2
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	6812      	ldr	r2, [r2, #0]
 8007062:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007064:	430b      	orrs	r3, r1
 8007066:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706e:	f023 010f 	bic.w	r1, r3, #15
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4aa6      	ldr	r2, [pc, #664]	; (800731c <UART_SetConfig+0x334>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d177      	bne.n	8007178 <UART_SetConfig+0x190>
 8007088:	4ba5      	ldr	r3, [pc, #660]	; (8007320 <UART_SetConfig+0x338>)
 800708a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007090:	2b28      	cmp	r3, #40	; 0x28
 8007092:	d86d      	bhi.n	8007170 <UART_SetConfig+0x188>
 8007094:	a201      	add	r2, pc, #4	; (adr r2, 800709c <UART_SetConfig+0xb4>)
 8007096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709a:	bf00      	nop
 800709c:	08007141 	.word	0x08007141
 80070a0:	08007171 	.word	0x08007171
 80070a4:	08007171 	.word	0x08007171
 80070a8:	08007171 	.word	0x08007171
 80070ac:	08007171 	.word	0x08007171
 80070b0:	08007171 	.word	0x08007171
 80070b4:	08007171 	.word	0x08007171
 80070b8:	08007171 	.word	0x08007171
 80070bc:	08007149 	.word	0x08007149
 80070c0:	08007171 	.word	0x08007171
 80070c4:	08007171 	.word	0x08007171
 80070c8:	08007171 	.word	0x08007171
 80070cc:	08007171 	.word	0x08007171
 80070d0:	08007171 	.word	0x08007171
 80070d4:	08007171 	.word	0x08007171
 80070d8:	08007171 	.word	0x08007171
 80070dc:	08007151 	.word	0x08007151
 80070e0:	08007171 	.word	0x08007171
 80070e4:	08007171 	.word	0x08007171
 80070e8:	08007171 	.word	0x08007171
 80070ec:	08007171 	.word	0x08007171
 80070f0:	08007171 	.word	0x08007171
 80070f4:	08007171 	.word	0x08007171
 80070f8:	08007171 	.word	0x08007171
 80070fc:	08007159 	.word	0x08007159
 8007100:	08007171 	.word	0x08007171
 8007104:	08007171 	.word	0x08007171
 8007108:	08007171 	.word	0x08007171
 800710c:	08007171 	.word	0x08007171
 8007110:	08007171 	.word	0x08007171
 8007114:	08007171 	.word	0x08007171
 8007118:	08007171 	.word	0x08007171
 800711c:	08007161 	.word	0x08007161
 8007120:	08007171 	.word	0x08007171
 8007124:	08007171 	.word	0x08007171
 8007128:	08007171 	.word	0x08007171
 800712c:	08007171 	.word	0x08007171
 8007130:	08007171 	.word	0x08007171
 8007134:	08007171 	.word	0x08007171
 8007138:	08007171 	.word	0x08007171
 800713c:	08007169 	.word	0x08007169
 8007140:	2301      	movs	r3, #1
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007146:	e326      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007148:	2304      	movs	r3, #4
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714e:	e322      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007150:	2308      	movs	r3, #8
 8007152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007156:	e31e      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007158:	2310      	movs	r3, #16
 800715a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715e:	e31a      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007160:	2320      	movs	r3, #32
 8007162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007166:	e316      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007168:	2340      	movs	r3, #64	; 0x40
 800716a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716e:	e312      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007170:	2380      	movs	r3, #128	; 0x80
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007176:	e30e      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a69      	ldr	r2, [pc, #420]	; (8007324 <UART_SetConfig+0x33c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d130      	bne.n	80071e4 <UART_SetConfig+0x1fc>
 8007182:	4b67      	ldr	r3, [pc, #412]	; (8007320 <UART_SetConfig+0x338>)
 8007184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	2b05      	cmp	r3, #5
 800718c:	d826      	bhi.n	80071dc <UART_SetConfig+0x1f4>
 800718e:	a201      	add	r2, pc, #4	; (adr r2, 8007194 <UART_SetConfig+0x1ac>)
 8007190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007194:	080071ad 	.word	0x080071ad
 8007198:	080071b5 	.word	0x080071b5
 800719c:	080071bd 	.word	0x080071bd
 80071a0:	080071c5 	.word	0x080071c5
 80071a4:	080071cd 	.word	0x080071cd
 80071a8:	080071d5 	.word	0x080071d5
 80071ac:	2300      	movs	r3, #0
 80071ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071b2:	e2f0      	b.n	8007796 <UART_SetConfig+0x7ae>
 80071b4:	2304      	movs	r3, #4
 80071b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ba:	e2ec      	b.n	8007796 <UART_SetConfig+0x7ae>
 80071bc:	2308      	movs	r3, #8
 80071be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071c2:	e2e8      	b.n	8007796 <UART_SetConfig+0x7ae>
 80071c4:	2310      	movs	r3, #16
 80071c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ca:	e2e4      	b.n	8007796 <UART_SetConfig+0x7ae>
 80071cc:	2320      	movs	r3, #32
 80071ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071d2:	e2e0      	b.n	8007796 <UART_SetConfig+0x7ae>
 80071d4:	2340      	movs	r3, #64	; 0x40
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071da:	e2dc      	b.n	8007796 <UART_SetConfig+0x7ae>
 80071dc:	2380      	movs	r3, #128	; 0x80
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e2:	e2d8      	b.n	8007796 <UART_SetConfig+0x7ae>
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a4f      	ldr	r2, [pc, #316]	; (8007328 <UART_SetConfig+0x340>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d130      	bne.n	8007250 <UART_SetConfig+0x268>
 80071ee:	4b4c      	ldr	r3, [pc, #304]	; (8007320 <UART_SetConfig+0x338>)
 80071f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	2b05      	cmp	r3, #5
 80071f8:	d826      	bhi.n	8007248 <UART_SetConfig+0x260>
 80071fa:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <UART_SetConfig+0x218>)
 80071fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007200:	08007219 	.word	0x08007219
 8007204:	08007221 	.word	0x08007221
 8007208:	08007229 	.word	0x08007229
 800720c:	08007231 	.word	0x08007231
 8007210:	08007239 	.word	0x08007239
 8007214:	08007241 	.word	0x08007241
 8007218:	2300      	movs	r3, #0
 800721a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800721e:	e2ba      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007220:	2304      	movs	r3, #4
 8007222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007226:	e2b6      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007228:	2308      	movs	r3, #8
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722e:	e2b2      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007230:	2310      	movs	r3, #16
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007236:	e2ae      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007238:	2320      	movs	r3, #32
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723e:	e2aa      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007240:	2340      	movs	r3, #64	; 0x40
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007246:	e2a6      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007248:	2380      	movs	r3, #128	; 0x80
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724e:	e2a2      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a35      	ldr	r2, [pc, #212]	; (800732c <UART_SetConfig+0x344>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d130      	bne.n	80072bc <UART_SetConfig+0x2d4>
 800725a:	4b31      	ldr	r3, [pc, #196]	; (8007320 <UART_SetConfig+0x338>)
 800725c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	2b05      	cmp	r3, #5
 8007264:	d826      	bhi.n	80072b4 <UART_SetConfig+0x2cc>
 8007266:	a201      	add	r2, pc, #4	; (adr r2, 800726c <UART_SetConfig+0x284>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	08007285 	.word	0x08007285
 8007270:	0800728d 	.word	0x0800728d
 8007274:	08007295 	.word	0x08007295
 8007278:	0800729d 	.word	0x0800729d
 800727c:	080072a5 	.word	0x080072a5
 8007280:	080072ad 	.word	0x080072ad
 8007284:	2300      	movs	r3, #0
 8007286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800728a:	e284      	b.n	8007796 <UART_SetConfig+0x7ae>
 800728c:	2304      	movs	r3, #4
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007292:	e280      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007294:	2308      	movs	r3, #8
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800729a:	e27c      	b.n	8007796 <UART_SetConfig+0x7ae>
 800729c:	2310      	movs	r3, #16
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072a2:	e278      	b.n	8007796 <UART_SetConfig+0x7ae>
 80072a4:	2320      	movs	r3, #32
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072aa:	e274      	b.n	8007796 <UART_SetConfig+0x7ae>
 80072ac:	2340      	movs	r3, #64	; 0x40
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b2:	e270      	b.n	8007796 <UART_SetConfig+0x7ae>
 80072b4:	2380      	movs	r3, #128	; 0x80
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ba:	e26c      	b.n	8007796 <UART_SetConfig+0x7ae>
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a1b      	ldr	r2, [pc, #108]	; (8007330 <UART_SetConfig+0x348>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d142      	bne.n	800734c <UART_SetConfig+0x364>
 80072c6:	4b16      	ldr	r3, [pc, #88]	; (8007320 <UART_SetConfig+0x338>)
 80072c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	d838      	bhi.n	8007344 <UART_SetConfig+0x35c>
 80072d2:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <UART_SetConfig+0x2f0>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	080072f1 	.word	0x080072f1
 80072dc:	080072f9 	.word	0x080072f9
 80072e0:	08007301 	.word	0x08007301
 80072e4:	08007309 	.word	0x08007309
 80072e8:	08007335 	.word	0x08007335
 80072ec:	0800733d 	.word	0x0800733d
 80072f0:	2300      	movs	r3, #0
 80072f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072f6:	e24e      	b.n	8007796 <UART_SetConfig+0x7ae>
 80072f8:	2304      	movs	r3, #4
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072fe:	e24a      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007300:	2308      	movs	r3, #8
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007306:	e246      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007308:	2310      	movs	r3, #16
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730e:	e242      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007310:	cfff69f3 	.word	0xcfff69f3
 8007314:	58000c00 	.word	0x58000c00
 8007318:	11fff4ff 	.word	0x11fff4ff
 800731c:	40011000 	.word	0x40011000
 8007320:	58024400 	.word	0x58024400
 8007324:	40004400 	.word	0x40004400
 8007328:	40004800 	.word	0x40004800
 800732c:	40004c00 	.word	0x40004c00
 8007330:	40005000 	.word	0x40005000
 8007334:	2320      	movs	r3, #32
 8007336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733a:	e22c      	b.n	8007796 <UART_SetConfig+0x7ae>
 800733c:	2340      	movs	r3, #64	; 0x40
 800733e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007342:	e228      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007344:	2380      	movs	r3, #128	; 0x80
 8007346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734a:	e224      	b.n	8007796 <UART_SetConfig+0x7ae>
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4ab1      	ldr	r2, [pc, #708]	; (8007618 <UART_SetConfig+0x630>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d176      	bne.n	8007444 <UART_SetConfig+0x45c>
 8007356:	4bb1      	ldr	r3, [pc, #708]	; (800761c <UART_SetConfig+0x634>)
 8007358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800735e:	2b28      	cmp	r3, #40	; 0x28
 8007360:	d86c      	bhi.n	800743c <UART_SetConfig+0x454>
 8007362:	a201      	add	r2, pc, #4	; (adr r2, 8007368 <UART_SetConfig+0x380>)
 8007364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007368:	0800740d 	.word	0x0800740d
 800736c:	0800743d 	.word	0x0800743d
 8007370:	0800743d 	.word	0x0800743d
 8007374:	0800743d 	.word	0x0800743d
 8007378:	0800743d 	.word	0x0800743d
 800737c:	0800743d 	.word	0x0800743d
 8007380:	0800743d 	.word	0x0800743d
 8007384:	0800743d 	.word	0x0800743d
 8007388:	08007415 	.word	0x08007415
 800738c:	0800743d 	.word	0x0800743d
 8007390:	0800743d 	.word	0x0800743d
 8007394:	0800743d 	.word	0x0800743d
 8007398:	0800743d 	.word	0x0800743d
 800739c:	0800743d 	.word	0x0800743d
 80073a0:	0800743d 	.word	0x0800743d
 80073a4:	0800743d 	.word	0x0800743d
 80073a8:	0800741d 	.word	0x0800741d
 80073ac:	0800743d 	.word	0x0800743d
 80073b0:	0800743d 	.word	0x0800743d
 80073b4:	0800743d 	.word	0x0800743d
 80073b8:	0800743d 	.word	0x0800743d
 80073bc:	0800743d 	.word	0x0800743d
 80073c0:	0800743d 	.word	0x0800743d
 80073c4:	0800743d 	.word	0x0800743d
 80073c8:	08007425 	.word	0x08007425
 80073cc:	0800743d 	.word	0x0800743d
 80073d0:	0800743d 	.word	0x0800743d
 80073d4:	0800743d 	.word	0x0800743d
 80073d8:	0800743d 	.word	0x0800743d
 80073dc:	0800743d 	.word	0x0800743d
 80073e0:	0800743d 	.word	0x0800743d
 80073e4:	0800743d 	.word	0x0800743d
 80073e8:	0800742d 	.word	0x0800742d
 80073ec:	0800743d 	.word	0x0800743d
 80073f0:	0800743d 	.word	0x0800743d
 80073f4:	0800743d 	.word	0x0800743d
 80073f8:	0800743d 	.word	0x0800743d
 80073fc:	0800743d 	.word	0x0800743d
 8007400:	0800743d 	.word	0x0800743d
 8007404:	0800743d 	.word	0x0800743d
 8007408:	08007435 	.word	0x08007435
 800740c:	2301      	movs	r3, #1
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007412:	e1c0      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007414:	2304      	movs	r3, #4
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741a:	e1bc      	b.n	8007796 <UART_SetConfig+0x7ae>
 800741c:	2308      	movs	r3, #8
 800741e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007422:	e1b8      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007424:	2310      	movs	r3, #16
 8007426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800742a:	e1b4      	b.n	8007796 <UART_SetConfig+0x7ae>
 800742c:	2320      	movs	r3, #32
 800742e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007432:	e1b0      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007434:	2340      	movs	r3, #64	; 0x40
 8007436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800743a:	e1ac      	b.n	8007796 <UART_SetConfig+0x7ae>
 800743c:	2380      	movs	r3, #128	; 0x80
 800743e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007442:	e1a8      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a75      	ldr	r2, [pc, #468]	; (8007620 <UART_SetConfig+0x638>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d130      	bne.n	80074b0 <UART_SetConfig+0x4c8>
 800744e:	4b73      	ldr	r3, [pc, #460]	; (800761c <UART_SetConfig+0x634>)
 8007450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	2b05      	cmp	r3, #5
 8007458:	d826      	bhi.n	80074a8 <UART_SetConfig+0x4c0>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <UART_SetConfig+0x478>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	08007479 	.word	0x08007479
 8007464:	08007481 	.word	0x08007481
 8007468:	08007489 	.word	0x08007489
 800746c:	08007491 	.word	0x08007491
 8007470:	08007499 	.word	0x08007499
 8007474:	080074a1 	.word	0x080074a1
 8007478:	2300      	movs	r3, #0
 800747a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747e:	e18a      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007480:	2304      	movs	r3, #4
 8007482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007486:	e186      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007488:	2308      	movs	r3, #8
 800748a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800748e:	e182      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007490:	2310      	movs	r3, #16
 8007492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007496:	e17e      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007498:	2320      	movs	r3, #32
 800749a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800749e:	e17a      	b.n	8007796 <UART_SetConfig+0x7ae>
 80074a0:	2340      	movs	r3, #64	; 0x40
 80074a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074a6:	e176      	b.n	8007796 <UART_SetConfig+0x7ae>
 80074a8:	2380      	movs	r3, #128	; 0x80
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ae:	e172      	b.n	8007796 <UART_SetConfig+0x7ae>
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a5b      	ldr	r2, [pc, #364]	; (8007624 <UART_SetConfig+0x63c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d130      	bne.n	800751c <UART_SetConfig+0x534>
 80074ba:	4b58      	ldr	r3, [pc, #352]	; (800761c <UART_SetConfig+0x634>)
 80074bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	2b05      	cmp	r3, #5
 80074c4:	d826      	bhi.n	8007514 <UART_SetConfig+0x52c>
 80074c6:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <UART_SetConfig+0x4e4>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	080074e5 	.word	0x080074e5
 80074d0:	080074ed 	.word	0x080074ed
 80074d4:	080074f5 	.word	0x080074f5
 80074d8:	080074fd 	.word	0x080074fd
 80074dc:	08007505 	.word	0x08007505
 80074e0:	0800750d 	.word	0x0800750d
 80074e4:	2300      	movs	r3, #0
 80074e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ea:	e154      	b.n	8007796 <UART_SetConfig+0x7ae>
 80074ec:	2304      	movs	r3, #4
 80074ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074f2:	e150      	b.n	8007796 <UART_SetConfig+0x7ae>
 80074f4:	2308      	movs	r3, #8
 80074f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074fa:	e14c      	b.n	8007796 <UART_SetConfig+0x7ae>
 80074fc:	2310      	movs	r3, #16
 80074fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007502:	e148      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007504:	2320      	movs	r3, #32
 8007506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750a:	e144      	b.n	8007796 <UART_SetConfig+0x7ae>
 800750c:	2340      	movs	r3, #64	; 0x40
 800750e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007512:	e140      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007514:	2380      	movs	r3, #128	; 0x80
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751a:	e13c      	b.n	8007796 <UART_SetConfig+0x7ae>
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a41      	ldr	r2, [pc, #260]	; (8007628 <UART_SetConfig+0x640>)
 8007522:	4293      	cmp	r3, r2
 8007524:	f040 8082 	bne.w	800762c <UART_SetConfig+0x644>
 8007528:	4b3c      	ldr	r3, [pc, #240]	; (800761c <UART_SetConfig+0x634>)
 800752a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007530:	2b28      	cmp	r3, #40	; 0x28
 8007532:	d86d      	bhi.n	8007610 <UART_SetConfig+0x628>
 8007534:	a201      	add	r2, pc, #4	; (adr r2, 800753c <UART_SetConfig+0x554>)
 8007536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753a:	bf00      	nop
 800753c:	080075e1 	.word	0x080075e1
 8007540:	08007611 	.word	0x08007611
 8007544:	08007611 	.word	0x08007611
 8007548:	08007611 	.word	0x08007611
 800754c:	08007611 	.word	0x08007611
 8007550:	08007611 	.word	0x08007611
 8007554:	08007611 	.word	0x08007611
 8007558:	08007611 	.word	0x08007611
 800755c:	080075e9 	.word	0x080075e9
 8007560:	08007611 	.word	0x08007611
 8007564:	08007611 	.word	0x08007611
 8007568:	08007611 	.word	0x08007611
 800756c:	08007611 	.word	0x08007611
 8007570:	08007611 	.word	0x08007611
 8007574:	08007611 	.word	0x08007611
 8007578:	08007611 	.word	0x08007611
 800757c:	080075f1 	.word	0x080075f1
 8007580:	08007611 	.word	0x08007611
 8007584:	08007611 	.word	0x08007611
 8007588:	08007611 	.word	0x08007611
 800758c:	08007611 	.word	0x08007611
 8007590:	08007611 	.word	0x08007611
 8007594:	08007611 	.word	0x08007611
 8007598:	08007611 	.word	0x08007611
 800759c:	080075f9 	.word	0x080075f9
 80075a0:	08007611 	.word	0x08007611
 80075a4:	08007611 	.word	0x08007611
 80075a8:	08007611 	.word	0x08007611
 80075ac:	08007611 	.word	0x08007611
 80075b0:	08007611 	.word	0x08007611
 80075b4:	08007611 	.word	0x08007611
 80075b8:	08007611 	.word	0x08007611
 80075bc:	08007601 	.word	0x08007601
 80075c0:	08007611 	.word	0x08007611
 80075c4:	08007611 	.word	0x08007611
 80075c8:	08007611 	.word	0x08007611
 80075cc:	08007611 	.word	0x08007611
 80075d0:	08007611 	.word	0x08007611
 80075d4:	08007611 	.word	0x08007611
 80075d8:	08007611 	.word	0x08007611
 80075dc:	08007609 	.word	0x08007609
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e6:	e0d6      	b.n	8007796 <UART_SetConfig+0x7ae>
 80075e8:	2304      	movs	r3, #4
 80075ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ee:	e0d2      	b.n	8007796 <UART_SetConfig+0x7ae>
 80075f0:	2308      	movs	r3, #8
 80075f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f6:	e0ce      	b.n	8007796 <UART_SetConfig+0x7ae>
 80075f8:	2310      	movs	r3, #16
 80075fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075fe:	e0ca      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007600:	2320      	movs	r3, #32
 8007602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007606:	e0c6      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007608:	2340      	movs	r3, #64	; 0x40
 800760a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800760e:	e0c2      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007610:	2380      	movs	r3, #128	; 0x80
 8007612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007616:	e0be      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007618:	40011400 	.word	0x40011400
 800761c:	58024400 	.word	0x58024400
 8007620:	40007800 	.word	0x40007800
 8007624:	40007c00 	.word	0x40007c00
 8007628:	40011800 	.word	0x40011800
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4aad      	ldr	r2, [pc, #692]	; (80078e8 <UART_SetConfig+0x900>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d176      	bne.n	8007724 <UART_SetConfig+0x73c>
 8007636:	4bad      	ldr	r3, [pc, #692]	; (80078ec <UART_SetConfig+0x904>)
 8007638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800763e:	2b28      	cmp	r3, #40	; 0x28
 8007640:	d86c      	bhi.n	800771c <UART_SetConfig+0x734>
 8007642:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <UART_SetConfig+0x660>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	080076ed 	.word	0x080076ed
 800764c:	0800771d 	.word	0x0800771d
 8007650:	0800771d 	.word	0x0800771d
 8007654:	0800771d 	.word	0x0800771d
 8007658:	0800771d 	.word	0x0800771d
 800765c:	0800771d 	.word	0x0800771d
 8007660:	0800771d 	.word	0x0800771d
 8007664:	0800771d 	.word	0x0800771d
 8007668:	080076f5 	.word	0x080076f5
 800766c:	0800771d 	.word	0x0800771d
 8007670:	0800771d 	.word	0x0800771d
 8007674:	0800771d 	.word	0x0800771d
 8007678:	0800771d 	.word	0x0800771d
 800767c:	0800771d 	.word	0x0800771d
 8007680:	0800771d 	.word	0x0800771d
 8007684:	0800771d 	.word	0x0800771d
 8007688:	080076fd 	.word	0x080076fd
 800768c:	0800771d 	.word	0x0800771d
 8007690:	0800771d 	.word	0x0800771d
 8007694:	0800771d 	.word	0x0800771d
 8007698:	0800771d 	.word	0x0800771d
 800769c:	0800771d 	.word	0x0800771d
 80076a0:	0800771d 	.word	0x0800771d
 80076a4:	0800771d 	.word	0x0800771d
 80076a8:	08007705 	.word	0x08007705
 80076ac:	0800771d 	.word	0x0800771d
 80076b0:	0800771d 	.word	0x0800771d
 80076b4:	0800771d 	.word	0x0800771d
 80076b8:	0800771d 	.word	0x0800771d
 80076bc:	0800771d 	.word	0x0800771d
 80076c0:	0800771d 	.word	0x0800771d
 80076c4:	0800771d 	.word	0x0800771d
 80076c8:	0800770d 	.word	0x0800770d
 80076cc:	0800771d 	.word	0x0800771d
 80076d0:	0800771d 	.word	0x0800771d
 80076d4:	0800771d 	.word	0x0800771d
 80076d8:	0800771d 	.word	0x0800771d
 80076dc:	0800771d 	.word	0x0800771d
 80076e0:	0800771d 	.word	0x0800771d
 80076e4:	0800771d 	.word	0x0800771d
 80076e8:	08007715 	.word	0x08007715
 80076ec:	2301      	movs	r3, #1
 80076ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076f2:	e050      	b.n	8007796 <UART_SetConfig+0x7ae>
 80076f4:	2304      	movs	r3, #4
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076fa:	e04c      	b.n	8007796 <UART_SetConfig+0x7ae>
 80076fc:	2308      	movs	r3, #8
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007702:	e048      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007704:	2310      	movs	r3, #16
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770a:	e044      	b.n	8007796 <UART_SetConfig+0x7ae>
 800770c:	2320      	movs	r3, #32
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007712:	e040      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007714:	2340      	movs	r3, #64	; 0x40
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800771a:	e03c      	b.n	8007796 <UART_SetConfig+0x7ae>
 800771c:	2380      	movs	r3, #128	; 0x80
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007722:	e038      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a71      	ldr	r2, [pc, #452]	; (80078f0 <UART_SetConfig+0x908>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d130      	bne.n	8007790 <UART_SetConfig+0x7a8>
 800772e:	4b6f      	ldr	r3, [pc, #444]	; (80078ec <UART_SetConfig+0x904>)
 8007730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	2b05      	cmp	r3, #5
 8007738:	d826      	bhi.n	8007788 <UART_SetConfig+0x7a0>
 800773a:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <UART_SetConfig+0x758>)
 800773c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007740:	08007759 	.word	0x08007759
 8007744:	08007761 	.word	0x08007761
 8007748:	08007769 	.word	0x08007769
 800774c:	08007771 	.word	0x08007771
 8007750:	08007779 	.word	0x08007779
 8007754:	08007781 	.word	0x08007781
 8007758:	2302      	movs	r3, #2
 800775a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800775e:	e01a      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007760:	2304      	movs	r3, #4
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007766:	e016      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007768:	2308      	movs	r3, #8
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800776e:	e012      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007770:	2310      	movs	r3, #16
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007776:	e00e      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007778:	2320      	movs	r3, #32
 800777a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777e:	e00a      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007780:	2340      	movs	r3, #64	; 0x40
 8007782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007786:	e006      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007788:	2380      	movs	r3, #128	; 0x80
 800778a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800778e:	e002      	b.n	8007796 <UART_SetConfig+0x7ae>
 8007790:	2380      	movs	r3, #128	; 0x80
 8007792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a55      	ldr	r2, [pc, #340]	; (80078f0 <UART_SetConfig+0x908>)
 800779c:	4293      	cmp	r3, r2
 800779e:	f040 80f8 	bne.w	8007992 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	dc46      	bgt.n	8007838 <UART_SetConfig+0x850>
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	db75      	blt.n	800789a <UART_SetConfig+0x8b2>
 80077ae:	3b02      	subs	r3, #2
 80077b0:	2b1e      	cmp	r3, #30
 80077b2:	d872      	bhi.n	800789a <UART_SetConfig+0x8b2>
 80077b4:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <UART_SetConfig+0x7d4>)
 80077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ba:	bf00      	nop
 80077bc:	0800783f 	.word	0x0800783f
 80077c0:	0800789b 	.word	0x0800789b
 80077c4:	08007847 	.word	0x08007847
 80077c8:	0800789b 	.word	0x0800789b
 80077cc:	0800789b 	.word	0x0800789b
 80077d0:	0800789b 	.word	0x0800789b
 80077d4:	08007857 	.word	0x08007857
 80077d8:	0800789b 	.word	0x0800789b
 80077dc:	0800789b 	.word	0x0800789b
 80077e0:	0800789b 	.word	0x0800789b
 80077e4:	0800789b 	.word	0x0800789b
 80077e8:	0800789b 	.word	0x0800789b
 80077ec:	0800789b 	.word	0x0800789b
 80077f0:	0800789b 	.word	0x0800789b
 80077f4:	08007867 	.word	0x08007867
 80077f8:	0800789b 	.word	0x0800789b
 80077fc:	0800789b 	.word	0x0800789b
 8007800:	0800789b 	.word	0x0800789b
 8007804:	0800789b 	.word	0x0800789b
 8007808:	0800789b 	.word	0x0800789b
 800780c:	0800789b 	.word	0x0800789b
 8007810:	0800789b 	.word	0x0800789b
 8007814:	0800789b 	.word	0x0800789b
 8007818:	0800789b 	.word	0x0800789b
 800781c:	0800789b 	.word	0x0800789b
 8007820:	0800789b 	.word	0x0800789b
 8007824:	0800789b 	.word	0x0800789b
 8007828:	0800789b 	.word	0x0800789b
 800782c:	0800789b 	.word	0x0800789b
 8007830:	0800789b 	.word	0x0800789b
 8007834:	0800788d 	.word	0x0800788d
 8007838:	2b40      	cmp	r3, #64	; 0x40
 800783a:	d02a      	beq.n	8007892 <UART_SetConfig+0x8aa>
 800783c:	e02d      	b.n	800789a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800783e:	f7fc ff7b 	bl	8004738 <HAL_RCCEx_GetD3PCLK1Freq>
 8007842:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007844:	e02f      	b.n	80078a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800784a:	4618      	mov	r0, r3
 800784c:	f7fc ff8a 	bl	8004764 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007854:	e027      	b.n	80078a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007856:	f107 0318 	add.w	r3, r7, #24
 800785a:	4618      	mov	r0, r3
 800785c:	f7fd f8d6 	bl	8004a0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007864:	e01f      	b.n	80078a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007866:	4b21      	ldr	r3, [pc, #132]	; (80078ec <UART_SetConfig+0x904>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0320 	and.w	r3, r3, #32
 800786e:	2b00      	cmp	r3, #0
 8007870:	d009      	beq.n	8007886 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007872:	4b1e      	ldr	r3, [pc, #120]	; (80078ec <UART_SetConfig+0x904>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	08db      	lsrs	r3, r3, #3
 8007878:	f003 0303 	and.w	r3, r3, #3
 800787c:	4a1d      	ldr	r2, [pc, #116]	; (80078f4 <UART_SetConfig+0x90c>)
 800787e:	fa22 f303 	lsr.w	r3, r2, r3
 8007882:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007884:	e00f      	b.n	80078a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007886:	4b1b      	ldr	r3, [pc, #108]	; (80078f4 <UART_SetConfig+0x90c>)
 8007888:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800788a:	e00c      	b.n	80078a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800788c:	4b1a      	ldr	r3, [pc, #104]	; (80078f8 <UART_SetConfig+0x910>)
 800788e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007890:	e009      	b.n	80078a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007898:	e005      	b.n	80078a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80078a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 81ee 	beq.w	8007c8a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b2:	4a12      	ldr	r2, [pc, #72]	; (80078fc <UART_SetConfig+0x914>)
 80078b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078b8:	461a      	mov	r2, r3
 80078ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80078c0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	4613      	mov	r3, r2
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	4413      	add	r3, r2
 80078cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d305      	bcc.n	80078de <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078da:	429a      	cmp	r2, r3
 80078dc:	d910      	bls.n	8007900 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80078e4:	e1d1      	b.n	8007c8a <UART_SetConfig+0xca2>
 80078e6:	bf00      	nop
 80078e8:	40011c00 	.word	0x40011c00
 80078ec:	58024400 	.word	0x58024400
 80078f0:	58000c00 	.word	0x58000c00
 80078f4:	03d09000 	.word	0x03d09000
 80078f8:	003d0900 	.word	0x003d0900
 80078fc:	0800c9d4 	.word	0x0800c9d4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007902:	2200      	movs	r2, #0
 8007904:	60bb      	str	r3, [r7, #8]
 8007906:	60fa      	str	r2, [r7, #12]
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	4ac0      	ldr	r2, [pc, #768]	; (8007c10 <UART_SetConfig+0xc28>)
 800790e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007912:	b29b      	uxth	r3, r3
 8007914:	2200      	movs	r2, #0
 8007916:	603b      	str	r3, [r7, #0]
 8007918:	607a      	str	r2, [r7, #4]
 800791a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800791e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007922:	f7f8 fef9 	bl	8000718 <__aeabi_uldivmod>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4610      	mov	r0, r2
 800792c:	4619      	mov	r1, r3
 800792e:	f04f 0200 	mov.w	r2, #0
 8007932:	f04f 0300 	mov.w	r3, #0
 8007936:	020b      	lsls	r3, r1, #8
 8007938:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800793c:	0202      	lsls	r2, r0, #8
 800793e:	6979      	ldr	r1, [r7, #20]
 8007940:	6849      	ldr	r1, [r1, #4]
 8007942:	0849      	lsrs	r1, r1, #1
 8007944:	2000      	movs	r0, #0
 8007946:	460c      	mov	r4, r1
 8007948:	4605      	mov	r5, r0
 800794a:	eb12 0804 	adds.w	r8, r2, r4
 800794e:	eb43 0905 	adc.w	r9, r3, r5
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	469a      	mov	sl, r3
 800795a:	4693      	mov	fp, r2
 800795c:	4652      	mov	r2, sl
 800795e:	465b      	mov	r3, fp
 8007960:	4640      	mov	r0, r8
 8007962:	4649      	mov	r1, r9
 8007964:	f7f8 fed8 	bl	8000718 <__aeabi_uldivmod>
 8007968:	4602      	mov	r2, r0
 800796a:	460b      	mov	r3, r1
 800796c:	4613      	mov	r3, r2
 800796e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007976:	d308      	bcc.n	800798a <UART_SetConfig+0x9a2>
 8007978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800797e:	d204      	bcs.n	800798a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007986:	60da      	str	r2, [r3, #12]
 8007988:	e17f      	b.n	8007c8a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007990:	e17b      	b.n	8007c8a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800799a:	f040 80bd 	bne.w	8007b18 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800799e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80079a2:	2b20      	cmp	r3, #32
 80079a4:	dc48      	bgt.n	8007a38 <UART_SetConfig+0xa50>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	db7b      	blt.n	8007aa2 <UART_SetConfig+0xaba>
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	d879      	bhi.n	8007aa2 <UART_SetConfig+0xaba>
 80079ae:	a201      	add	r2, pc, #4	; (adr r2, 80079b4 <UART_SetConfig+0x9cc>)
 80079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b4:	08007a3f 	.word	0x08007a3f
 80079b8:	08007a47 	.word	0x08007a47
 80079bc:	08007aa3 	.word	0x08007aa3
 80079c0:	08007aa3 	.word	0x08007aa3
 80079c4:	08007a4f 	.word	0x08007a4f
 80079c8:	08007aa3 	.word	0x08007aa3
 80079cc:	08007aa3 	.word	0x08007aa3
 80079d0:	08007aa3 	.word	0x08007aa3
 80079d4:	08007a5f 	.word	0x08007a5f
 80079d8:	08007aa3 	.word	0x08007aa3
 80079dc:	08007aa3 	.word	0x08007aa3
 80079e0:	08007aa3 	.word	0x08007aa3
 80079e4:	08007aa3 	.word	0x08007aa3
 80079e8:	08007aa3 	.word	0x08007aa3
 80079ec:	08007aa3 	.word	0x08007aa3
 80079f0:	08007aa3 	.word	0x08007aa3
 80079f4:	08007a6f 	.word	0x08007a6f
 80079f8:	08007aa3 	.word	0x08007aa3
 80079fc:	08007aa3 	.word	0x08007aa3
 8007a00:	08007aa3 	.word	0x08007aa3
 8007a04:	08007aa3 	.word	0x08007aa3
 8007a08:	08007aa3 	.word	0x08007aa3
 8007a0c:	08007aa3 	.word	0x08007aa3
 8007a10:	08007aa3 	.word	0x08007aa3
 8007a14:	08007aa3 	.word	0x08007aa3
 8007a18:	08007aa3 	.word	0x08007aa3
 8007a1c:	08007aa3 	.word	0x08007aa3
 8007a20:	08007aa3 	.word	0x08007aa3
 8007a24:	08007aa3 	.word	0x08007aa3
 8007a28:	08007aa3 	.word	0x08007aa3
 8007a2c:	08007aa3 	.word	0x08007aa3
 8007a30:	08007aa3 	.word	0x08007aa3
 8007a34:	08007a95 	.word	0x08007a95
 8007a38:	2b40      	cmp	r3, #64	; 0x40
 8007a3a:	d02e      	beq.n	8007a9a <UART_SetConfig+0xab2>
 8007a3c:	e031      	b.n	8007aa2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a3e:	f7fb ff43 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 8007a42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a44:	e033      	b.n	8007aae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a46:	f7fb ff55 	bl	80038f4 <HAL_RCC_GetPCLK2Freq>
 8007a4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a4c:	e02f      	b.n	8007aae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fc fe86 	bl	8004764 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a5c:	e027      	b.n	8007aae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a5e:	f107 0318 	add.w	r3, r7, #24
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fc ffd2 	bl	8004a0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a6c:	e01f      	b.n	8007aae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a6e:	4b69      	ldr	r3, [pc, #420]	; (8007c14 <UART_SetConfig+0xc2c>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d009      	beq.n	8007a8e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a7a:	4b66      	ldr	r3, [pc, #408]	; (8007c14 <UART_SetConfig+0xc2c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	08db      	lsrs	r3, r3, #3
 8007a80:	f003 0303 	and.w	r3, r3, #3
 8007a84:	4a64      	ldr	r2, [pc, #400]	; (8007c18 <UART_SetConfig+0xc30>)
 8007a86:	fa22 f303 	lsr.w	r3, r2, r3
 8007a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a8c:	e00f      	b.n	8007aae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007a8e:	4b62      	ldr	r3, [pc, #392]	; (8007c18 <UART_SetConfig+0xc30>)
 8007a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a92:	e00c      	b.n	8007aae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a94:	4b61      	ldr	r3, [pc, #388]	; (8007c1c <UART_SetConfig+0xc34>)
 8007a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a98:	e009      	b.n	8007aae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aa0:	e005      	b.n	8007aae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007aac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 80ea 	beq.w	8007c8a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	4a55      	ldr	r2, [pc, #340]	; (8007c10 <UART_SetConfig+0xc28>)
 8007abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ac8:	005a      	lsls	r2, r3, #1
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	085b      	lsrs	r3, r3, #1
 8007ad0:	441a      	add	r2, r3
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ada:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ade:	2b0f      	cmp	r3, #15
 8007ae0:	d916      	bls.n	8007b10 <UART_SetConfig+0xb28>
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae8:	d212      	bcs.n	8007b10 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	f023 030f 	bic.w	r3, r3, #15
 8007af2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	085b      	lsrs	r3, r3, #1
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	f003 0307 	and.w	r3, r3, #7
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007b02:	4313      	orrs	r3, r2
 8007b04:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007b0c:	60da      	str	r2, [r3, #12]
 8007b0e:	e0bc      	b.n	8007c8a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b16:	e0b8      	b.n	8007c8a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b1c:	2b20      	cmp	r3, #32
 8007b1e:	dc4b      	bgt.n	8007bb8 <UART_SetConfig+0xbd0>
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f2c0 8087 	blt.w	8007c34 <UART_SetConfig+0xc4c>
 8007b26:	2b20      	cmp	r3, #32
 8007b28:	f200 8084 	bhi.w	8007c34 <UART_SetConfig+0xc4c>
 8007b2c:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <UART_SetConfig+0xb4c>)
 8007b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b32:	bf00      	nop
 8007b34:	08007bbf 	.word	0x08007bbf
 8007b38:	08007bc7 	.word	0x08007bc7
 8007b3c:	08007c35 	.word	0x08007c35
 8007b40:	08007c35 	.word	0x08007c35
 8007b44:	08007bcf 	.word	0x08007bcf
 8007b48:	08007c35 	.word	0x08007c35
 8007b4c:	08007c35 	.word	0x08007c35
 8007b50:	08007c35 	.word	0x08007c35
 8007b54:	08007bdf 	.word	0x08007bdf
 8007b58:	08007c35 	.word	0x08007c35
 8007b5c:	08007c35 	.word	0x08007c35
 8007b60:	08007c35 	.word	0x08007c35
 8007b64:	08007c35 	.word	0x08007c35
 8007b68:	08007c35 	.word	0x08007c35
 8007b6c:	08007c35 	.word	0x08007c35
 8007b70:	08007c35 	.word	0x08007c35
 8007b74:	08007bef 	.word	0x08007bef
 8007b78:	08007c35 	.word	0x08007c35
 8007b7c:	08007c35 	.word	0x08007c35
 8007b80:	08007c35 	.word	0x08007c35
 8007b84:	08007c35 	.word	0x08007c35
 8007b88:	08007c35 	.word	0x08007c35
 8007b8c:	08007c35 	.word	0x08007c35
 8007b90:	08007c35 	.word	0x08007c35
 8007b94:	08007c35 	.word	0x08007c35
 8007b98:	08007c35 	.word	0x08007c35
 8007b9c:	08007c35 	.word	0x08007c35
 8007ba0:	08007c35 	.word	0x08007c35
 8007ba4:	08007c35 	.word	0x08007c35
 8007ba8:	08007c35 	.word	0x08007c35
 8007bac:	08007c35 	.word	0x08007c35
 8007bb0:	08007c35 	.word	0x08007c35
 8007bb4:	08007c27 	.word	0x08007c27
 8007bb8:	2b40      	cmp	r3, #64	; 0x40
 8007bba:	d037      	beq.n	8007c2c <UART_SetConfig+0xc44>
 8007bbc:	e03a      	b.n	8007c34 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bbe:	f7fb fe83 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 8007bc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007bc4:	e03c      	b.n	8007c40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bc6:	f7fb fe95 	bl	80038f4 <HAL_RCC_GetPCLK2Freq>
 8007bca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007bcc:	e038      	b.n	8007c40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fc fdc6 	bl	8004764 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bdc:	e030      	b.n	8007c40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bde:	f107 0318 	add.w	r3, r7, #24
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fc ff12 	bl	8004a0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bec:	e028      	b.n	8007c40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bee:	4b09      	ldr	r3, [pc, #36]	; (8007c14 <UART_SetConfig+0xc2c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0320 	and.w	r3, r3, #32
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d012      	beq.n	8007c20 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007bfa:	4b06      	ldr	r3, [pc, #24]	; (8007c14 <UART_SetConfig+0xc2c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	08db      	lsrs	r3, r3, #3
 8007c00:	f003 0303 	and.w	r3, r3, #3
 8007c04:	4a04      	ldr	r2, [pc, #16]	; (8007c18 <UART_SetConfig+0xc30>)
 8007c06:	fa22 f303 	lsr.w	r3, r2, r3
 8007c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c0c:	e018      	b.n	8007c40 <UART_SetConfig+0xc58>
 8007c0e:	bf00      	nop
 8007c10:	0800c9d4 	.word	0x0800c9d4
 8007c14:	58024400 	.word	0x58024400
 8007c18:	03d09000 	.word	0x03d09000
 8007c1c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007c20:	4b24      	ldr	r3, [pc, #144]	; (8007cb4 <UART_SetConfig+0xccc>)
 8007c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c24:	e00c      	b.n	8007c40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c26:	4b24      	ldr	r3, [pc, #144]	; (8007cb8 <UART_SetConfig+0xcd0>)
 8007c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c2a:	e009      	b.n	8007c40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c32:	e005      	b.n	8007c40 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007c3e:	bf00      	nop
    }

    if (pclk != 0U)
 8007c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d021      	beq.n	8007c8a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4a:	4a1c      	ldr	r2, [pc, #112]	; (8007cbc <UART_SetConfig+0xcd4>)
 8007c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c50:	461a      	mov	r2, r3
 8007c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c54:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	085b      	lsrs	r3, r3, #1
 8007c5e:	441a      	add	r2, r3
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c68:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6c:	2b0f      	cmp	r3, #15
 8007c6e:	d909      	bls.n	8007c84 <UART_SetConfig+0xc9c>
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c76:	d205      	bcs.n	8007c84 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	60da      	str	r2, [r3, #12]
 8007c82:	e002      	b.n	8007c8a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007ca6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3748      	adds	r7, #72	; 0x48
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cb4:	03d09000 	.word	0x03d09000
 8007cb8:	003d0900 	.word	0x003d0900
 8007cbc:	0800c9d4 	.word	0x0800c9d4

08007cc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00a      	beq.n	8007cea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00a      	beq.n	8007d0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00a      	beq.n	8007d2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d32:	f003 0308 	and.w	r3, r3, #8
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00a      	beq.n	8007d50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d54:	f003 0310 	and.w	r3, r3, #16
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00a      	beq.n	8007d72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d76:	f003 0320 	and.w	r3, r3, #32
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	430a      	orrs	r2, r1
 8007d92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01a      	beq.n	8007dd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dbe:	d10a      	bne.n	8007dd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00a      	beq.n	8007df8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	430a      	orrs	r2, r1
 8007df6:	605a      	str	r2, [r3, #4]
  }
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af02      	add	r7, sp, #8
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e14:	f7fa fa9a 	bl	800234c <HAL_GetTick>
 8007e18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0308 	and.w	r3, r3, #8
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d10e      	bne.n	8007e46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f82f 	bl	8007e9a <UART_WaitOnFlagUntilTimeout>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e025      	b.n	8007e92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0304 	and.w	r3, r3, #4
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d10e      	bne.n	8007e72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f819 	bl	8007e9a <UART_WaitOnFlagUntilTimeout>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e00f      	b.n	8007e92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2220      	movs	r2, #32
 8007e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b09c      	sub	sp, #112	; 0x70
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	60b9      	str	r1, [r7, #8]
 8007ea4:	603b      	str	r3, [r7, #0]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eaa:	e0a9      	b.n	8008000 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb2:	f000 80a5 	beq.w	8008000 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eb6:	f7fa fa49 	bl	800234c <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d302      	bcc.n	8007ecc <UART_WaitOnFlagUntilTimeout+0x32>
 8007ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d140      	bne.n	8007f4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ed4:	e853 3f00 	ldrex	r3, [r3]
 8007ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007edc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ee0:	667b      	str	r3, [r7, #100]	; 0x64
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ef0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e6      	bne.n	8007ecc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3308      	adds	r3, #8
 8007f04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f08:	e853 3f00 	ldrex	r3, [r3]
 8007f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f10:	f023 0301 	bic.w	r3, r3, #1
 8007f14:	663b      	str	r3, [r7, #96]	; 0x60
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f26:	e841 2300 	strex	r3, r2, [r1]
 8007f2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1e5      	bne.n	8007efe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e069      	b.n	8008022 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0304 	and.w	r3, r3, #4
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d051      	beq.n	8008000 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f6a:	d149      	bne.n	8008000 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7e:	e853 3f00 	ldrex	r3, [r3]
 8007f82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	461a      	mov	r2, r3
 8007f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f94:	637b      	str	r3, [r7, #52]	; 0x34
 8007f96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f9c:	e841 2300 	strex	r3, r2, [r1]
 8007fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1e6      	bne.n	8007f76 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3308      	adds	r3, #8
 8007fae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	e853 3f00 	ldrex	r3, [r3]
 8007fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	f023 0301 	bic.w	r3, r3, #1
 8007fbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fc8:	623a      	str	r2, [r7, #32]
 8007fca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fcc:	69f9      	ldr	r1, [r7, #28]
 8007fce:	6a3a      	ldr	r2, [r7, #32]
 8007fd0:	e841 2300 	strex	r3, r2, [r1]
 8007fd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1e5      	bne.n	8007fa8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2220      	movs	r2, #32
 8007fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e010      	b.n	8008022 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	69da      	ldr	r2, [r3, #28]
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	4013      	ands	r3, r2
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	429a      	cmp	r2, r3
 800800e:	bf0c      	ite	eq
 8008010:	2301      	moveq	r3, #1
 8008012:	2300      	movne	r3, #0
 8008014:	b2db      	uxtb	r3, r3
 8008016:	461a      	mov	r2, r3
 8008018:	79fb      	ldrb	r3, [r7, #7]
 800801a:	429a      	cmp	r2, r3
 800801c:	f43f af46 	beq.w	8007eac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3770      	adds	r7, #112	; 0x70
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800802a:	b480      	push	{r7}
 800802c:	b085      	sub	sp, #20
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008038:	2b01      	cmp	r3, #1
 800803a:	d101      	bne.n	8008040 <HAL_UARTEx_DisableFifoMode+0x16>
 800803c:	2302      	movs	r3, #2
 800803e:	e027      	b.n	8008090 <HAL_UARTEx_DisableFifoMode+0x66>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2224      	movs	r2, #36	; 0x24
 800804c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f022 0201 	bic.w	r2, r2, #1
 8008066:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800806e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2220      	movs	r2, #32
 8008082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d101      	bne.n	80080b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080b0:	2302      	movs	r3, #2
 80080b2:	e02d      	b.n	8008110 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2224      	movs	r2, #36	; 0x24
 80080c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f022 0201 	bic.w	r2, r2, #1
 80080da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	430a      	orrs	r2, r1
 80080ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f84f 	bl	8008194 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008128:	2b01      	cmp	r3, #1
 800812a:	d101      	bne.n	8008130 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800812c:	2302      	movs	r3, #2
 800812e:	e02d      	b.n	800818c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2224      	movs	r2, #36	; 0x24
 800813c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f022 0201 	bic.w	r2, r2, #1
 8008156:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	430a      	orrs	r2, r1
 800816a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f811 	bl	8008194 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2220      	movs	r2, #32
 800817e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d108      	bne.n	80081b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081b4:	e031      	b.n	800821a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081b6:	2310      	movs	r3, #16
 80081b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081ba:	2310      	movs	r3, #16
 80081bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	0e5b      	lsrs	r3, r3, #25
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	f003 0307 	and.w	r3, r3, #7
 80081cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	0f5b      	lsrs	r3, r3, #29
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	f003 0307 	and.w	r3, r3, #7
 80081dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081de:	7bbb      	ldrb	r3, [r7, #14]
 80081e0:	7b3a      	ldrb	r2, [r7, #12]
 80081e2:	4911      	ldr	r1, [pc, #68]	; (8008228 <UARTEx_SetNbDataToProcess+0x94>)
 80081e4:	5c8a      	ldrb	r2, [r1, r2]
 80081e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081ea:	7b3a      	ldrb	r2, [r7, #12]
 80081ec:	490f      	ldr	r1, [pc, #60]	; (800822c <UARTEx_SetNbDataToProcess+0x98>)
 80081ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	7b7a      	ldrb	r2, [r7, #13]
 8008200:	4909      	ldr	r1, [pc, #36]	; (8008228 <UARTEx_SetNbDataToProcess+0x94>)
 8008202:	5c8a      	ldrb	r2, [r1, r2]
 8008204:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008208:	7b7a      	ldrb	r2, [r7, #13]
 800820a:	4908      	ldr	r1, [pc, #32]	; (800822c <UARTEx_SetNbDataToProcess+0x98>)
 800820c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800820e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008212:	b29a      	uxth	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800821a:	bf00      	nop
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	0800c9ec 	.word	0x0800c9ec
 800822c:	0800c9f4 	.word	0x0800c9f4

08008230 <__errno>:
 8008230:	4b01      	ldr	r3, [pc, #4]	; (8008238 <__errno+0x8>)
 8008232:	6818      	ldr	r0, [r3, #0]
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	24000038 	.word	0x24000038

0800823c <__libc_init_array>:
 800823c:	b570      	push	{r4, r5, r6, lr}
 800823e:	4d0d      	ldr	r5, [pc, #52]	; (8008274 <__libc_init_array+0x38>)
 8008240:	4c0d      	ldr	r4, [pc, #52]	; (8008278 <__libc_init_array+0x3c>)
 8008242:	1b64      	subs	r4, r4, r5
 8008244:	10a4      	asrs	r4, r4, #2
 8008246:	2600      	movs	r6, #0
 8008248:	42a6      	cmp	r6, r4
 800824a:	d109      	bne.n	8008260 <__libc_init_array+0x24>
 800824c:	4d0b      	ldr	r5, [pc, #44]	; (800827c <__libc_init_array+0x40>)
 800824e:	4c0c      	ldr	r4, [pc, #48]	; (8008280 <__libc_init_array+0x44>)
 8008250:	f004 fba2 	bl	800c998 <_init>
 8008254:	1b64      	subs	r4, r4, r5
 8008256:	10a4      	asrs	r4, r4, #2
 8008258:	2600      	movs	r6, #0
 800825a:	42a6      	cmp	r6, r4
 800825c:	d105      	bne.n	800826a <__libc_init_array+0x2e>
 800825e:	bd70      	pop	{r4, r5, r6, pc}
 8008260:	f855 3b04 	ldr.w	r3, [r5], #4
 8008264:	4798      	blx	r3
 8008266:	3601      	adds	r6, #1
 8008268:	e7ee      	b.n	8008248 <__libc_init_array+0xc>
 800826a:	f855 3b04 	ldr.w	r3, [r5], #4
 800826e:	4798      	blx	r3
 8008270:	3601      	adds	r6, #1
 8008272:	e7f2      	b.n	800825a <__libc_init_array+0x1e>
 8008274:	0800ceb4 	.word	0x0800ceb4
 8008278:	0800ceb4 	.word	0x0800ceb4
 800827c:	0800ceb4 	.word	0x0800ceb4
 8008280:	0800ceb8 	.word	0x0800ceb8

08008284 <memset>:
 8008284:	4402      	add	r2, r0
 8008286:	4603      	mov	r3, r0
 8008288:	4293      	cmp	r3, r2
 800828a:	d100      	bne.n	800828e <memset+0xa>
 800828c:	4770      	bx	lr
 800828e:	f803 1b01 	strb.w	r1, [r3], #1
 8008292:	e7f9      	b.n	8008288 <memset+0x4>

08008294 <__cvt>:
 8008294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008296:	ed2d 8b02 	vpush	{d8}
 800829a:	eeb0 8b40 	vmov.f64	d8, d0
 800829e:	b085      	sub	sp, #20
 80082a0:	4617      	mov	r7, r2
 80082a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80082a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80082a6:	ee18 2a90 	vmov	r2, s17
 80082aa:	f025 0520 	bic.w	r5, r5, #32
 80082ae:	2a00      	cmp	r2, #0
 80082b0:	bfb6      	itet	lt
 80082b2:	222d      	movlt	r2, #45	; 0x2d
 80082b4:	2200      	movge	r2, #0
 80082b6:	eeb1 8b40 	vneglt.f64	d8, d0
 80082ba:	2d46      	cmp	r5, #70	; 0x46
 80082bc:	460c      	mov	r4, r1
 80082be:	701a      	strb	r2, [r3, #0]
 80082c0:	d004      	beq.n	80082cc <__cvt+0x38>
 80082c2:	2d45      	cmp	r5, #69	; 0x45
 80082c4:	d100      	bne.n	80082c8 <__cvt+0x34>
 80082c6:	3401      	adds	r4, #1
 80082c8:	2102      	movs	r1, #2
 80082ca:	e000      	b.n	80082ce <__cvt+0x3a>
 80082cc:	2103      	movs	r1, #3
 80082ce:	ab03      	add	r3, sp, #12
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	ab02      	add	r3, sp, #8
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	4622      	mov	r2, r4
 80082d8:	4633      	mov	r3, r6
 80082da:	eeb0 0b48 	vmov.f64	d0, d8
 80082de:	f001 fd47 	bl	8009d70 <_dtoa_r>
 80082e2:	2d47      	cmp	r5, #71	; 0x47
 80082e4:	d101      	bne.n	80082ea <__cvt+0x56>
 80082e6:	07fb      	lsls	r3, r7, #31
 80082e8:	d51a      	bpl.n	8008320 <__cvt+0x8c>
 80082ea:	2d46      	cmp	r5, #70	; 0x46
 80082ec:	eb00 0204 	add.w	r2, r0, r4
 80082f0:	d10c      	bne.n	800830c <__cvt+0x78>
 80082f2:	7803      	ldrb	r3, [r0, #0]
 80082f4:	2b30      	cmp	r3, #48	; 0x30
 80082f6:	d107      	bne.n	8008308 <__cvt+0x74>
 80082f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80082fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008300:	bf1c      	itt	ne
 8008302:	f1c4 0401 	rsbne	r4, r4, #1
 8008306:	6034      	strne	r4, [r6, #0]
 8008308:	6833      	ldr	r3, [r6, #0]
 800830a:	441a      	add	r2, r3
 800830c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008314:	bf08      	it	eq
 8008316:	9203      	streq	r2, [sp, #12]
 8008318:	2130      	movs	r1, #48	; 0x30
 800831a:	9b03      	ldr	r3, [sp, #12]
 800831c:	4293      	cmp	r3, r2
 800831e:	d307      	bcc.n	8008330 <__cvt+0x9c>
 8008320:	9b03      	ldr	r3, [sp, #12]
 8008322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008324:	1a1b      	subs	r3, r3, r0
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	b005      	add	sp, #20
 800832a:	ecbd 8b02 	vpop	{d8}
 800832e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008330:	1c5c      	adds	r4, r3, #1
 8008332:	9403      	str	r4, [sp, #12]
 8008334:	7019      	strb	r1, [r3, #0]
 8008336:	e7f0      	b.n	800831a <__cvt+0x86>

08008338 <__exponent>:
 8008338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800833a:	4603      	mov	r3, r0
 800833c:	2900      	cmp	r1, #0
 800833e:	bfb8      	it	lt
 8008340:	4249      	neglt	r1, r1
 8008342:	f803 2b02 	strb.w	r2, [r3], #2
 8008346:	bfb4      	ite	lt
 8008348:	222d      	movlt	r2, #45	; 0x2d
 800834a:	222b      	movge	r2, #43	; 0x2b
 800834c:	2909      	cmp	r1, #9
 800834e:	7042      	strb	r2, [r0, #1]
 8008350:	dd2a      	ble.n	80083a8 <__exponent+0x70>
 8008352:	f10d 0407 	add.w	r4, sp, #7
 8008356:	46a4      	mov	ip, r4
 8008358:	270a      	movs	r7, #10
 800835a:	46a6      	mov	lr, r4
 800835c:	460a      	mov	r2, r1
 800835e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008362:	fb07 1516 	mls	r5, r7, r6, r1
 8008366:	3530      	adds	r5, #48	; 0x30
 8008368:	2a63      	cmp	r2, #99	; 0x63
 800836a:	f104 34ff 	add.w	r4, r4, #4294967295
 800836e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008372:	4631      	mov	r1, r6
 8008374:	dcf1      	bgt.n	800835a <__exponent+0x22>
 8008376:	3130      	adds	r1, #48	; 0x30
 8008378:	f1ae 0502 	sub.w	r5, lr, #2
 800837c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008380:	1c44      	adds	r4, r0, #1
 8008382:	4629      	mov	r1, r5
 8008384:	4561      	cmp	r1, ip
 8008386:	d30a      	bcc.n	800839e <__exponent+0x66>
 8008388:	f10d 0209 	add.w	r2, sp, #9
 800838c:	eba2 020e 	sub.w	r2, r2, lr
 8008390:	4565      	cmp	r5, ip
 8008392:	bf88      	it	hi
 8008394:	2200      	movhi	r2, #0
 8008396:	4413      	add	r3, r2
 8008398:	1a18      	subs	r0, r3, r0
 800839a:	b003      	add	sp, #12
 800839c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800839e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80083a6:	e7ed      	b.n	8008384 <__exponent+0x4c>
 80083a8:	2330      	movs	r3, #48	; 0x30
 80083aa:	3130      	adds	r1, #48	; 0x30
 80083ac:	7083      	strb	r3, [r0, #2]
 80083ae:	70c1      	strb	r1, [r0, #3]
 80083b0:	1d03      	adds	r3, r0, #4
 80083b2:	e7f1      	b.n	8008398 <__exponent+0x60>
 80083b4:	0000      	movs	r0, r0
	...

080083b8 <_printf_float>:
 80083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	b08b      	sub	sp, #44	; 0x2c
 80083be:	460c      	mov	r4, r1
 80083c0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80083c4:	4616      	mov	r6, r2
 80083c6:	461f      	mov	r7, r3
 80083c8:	4605      	mov	r5, r0
 80083ca:	f002 fea3 	bl	800b114 <_localeconv_r>
 80083ce:	f8d0 b000 	ldr.w	fp, [r0]
 80083d2:	4658      	mov	r0, fp
 80083d4:	f7f7 ff8c 	bl	80002f0 <strlen>
 80083d8:	2300      	movs	r3, #0
 80083da:	9308      	str	r3, [sp, #32]
 80083dc:	f8d8 3000 	ldr.w	r3, [r8]
 80083e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80083e4:	6822      	ldr	r2, [r4, #0]
 80083e6:	3307      	adds	r3, #7
 80083e8:	f023 0307 	bic.w	r3, r3, #7
 80083ec:	f103 0108 	add.w	r1, r3, #8
 80083f0:	f8c8 1000 	str.w	r1, [r8]
 80083f4:	4682      	mov	sl, r0
 80083f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083fa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80083fe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008660 <_printf_float+0x2a8>
 8008402:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008406:	eeb0 6bc0 	vabs.f64	d6, d0
 800840a:	eeb4 6b47 	vcmp.f64	d6, d7
 800840e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008412:	dd24      	ble.n	800845e <_printf_float+0xa6>
 8008414:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800841c:	d502      	bpl.n	8008424 <_printf_float+0x6c>
 800841e:	232d      	movs	r3, #45	; 0x2d
 8008420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008424:	4b90      	ldr	r3, [pc, #576]	; (8008668 <_printf_float+0x2b0>)
 8008426:	4891      	ldr	r0, [pc, #580]	; (800866c <_printf_float+0x2b4>)
 8008428:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800842c:	bf94      	ite	ls
 800842e:	4698      	movls	r8, r3
 8008430:	4680      	movhi	r8, r0
 8008432:	2303      	movs	r3, #3
 8008434:	6123      	str	r3, [r4, #16]
 8008436:	f022 0204 	bic.w	r2, r2, #4
 800843a:	2300      	movs	r3, #0
 800843c:	6022      	str	r2, [r4, #0]
 800843e:	9304      	str	r3, [sp, #16]
 8008440:	9700      	str	r7, [sp, #0]
 8008442:	4633      	mov	r3, r6
 8008444:	aa09      	add	r2, sp, #36	; 0x24
 8008446:	4621      	mov	r1, r4
 8008448:	4628      	mov	r0, r5
 800844a:	f000 f9d3 	bl	80087f4 <_printf_common>
 800844e:	3001      	adds	r0, #1
 8008450:	f040 808a 	bne.w	8008568 <_printf_float+0x1b0>
 8008454:	f04f 30ff 	mov.w	r0, #4294967295
 8008458:	b00b      	add	sp, #44	; 0x2c
 800845a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845e:	eeb4 0b40 	vcmp.f64	d0, d0
 8008462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008466:	d709      	bvc.n	800847c <_printf_float+0xc4>
 8008468:	ee10 3a90 	vmov	r3, s1
 800846c:	2b00      	cmp	r3, #0
 800846e:	bfbc      	itt	lt
 8008470:	232d      	movlt	r3, #45	; 0x2d
 8008472:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008476:	487e      	ldr	r0, [pc, #504]	; (8008670 <_printf_float+0x2b8>)
 8008478:	4b7e      	ldr	r3, [pc, #504]	; (8008674 <_printf_float+0x2bc>)
 800847a:	e7d5      	b.n	8008428 <_printf_float+0x70>
 800847c:	6863      	ldr	r3, [r4, #4]
 800847e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008482:	9104      	str	r1, [sp, #16]
 8008484:	1c59      	adds	r1, r3, #1
 8008486:	d13c      	bne.n	8008502 <_printf_float+0x14a>
 8008488:	2306      	movs	r3, #6
 800848a:	6063      	str	r3, [r4, #4]
 800848c:	2300      	movs	r3, #0
 800848e:	9303      	str	r3, [sp, #12]
 8008490:	ab08      	add	r3, sp, #32
 8008492:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008496:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800849a:	ab07      	add	r3, sp, #28
 800849c:	6861      	ldr	r1, [r4, #4]
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	6022      	str	r2, [r4, #0]
 80084a2:	f10d 031b 	add.w	r3, sp, #27
 80084a6:	4628      	mov	r0, r5
 80084a8:	f7ff fef4 	bl	8008294 <__cvt>
 80084ac:	9b04      	ldr	r3, [sp, #16]
 80084ae:	9907      	ldr	r1, [sp, #28]
 80084b0:	2b47      	cmp	r3, #71	; 0x47
 80084b2:	4680      	mov	r8, r0
 80084b4:	d108      	bne.n	80084c8 <_printf_float+0x110>
 80084b6:	1cc8      	adds	r0, r1, #3
 80084b8:	db02      	blt.n	80084c0 <_printf_float+0x108>
 80084ba:	6863      	ldr	r3, [r4, #4]
 80084bc:	4299      	cmp	r1, r3
 80084be:	dd41      	ble.n	8008544 <_printf_float+0x18c>
 80084c0:	f1a9 0902 	sub.w	r9, r9, #2
 80084c4:	fa5f f989 	uxtb.w	r9, r9
 80084c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80084cc:	d820      	bhi.n	8008510 <_printf_float+0x158>
 80084ce:	3901      	subs	r1, #1
 80084d0:	464a      	mov	r2, r9
 80084d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084d6:	9107      	str	r1, [sp, #28]
 80084d8:	f7ff ff2e 	bl	8008338 <__exponent>
 80084dc:	9a08      	ldr	r2, [sp, #32]
 80084de:	9004      	str	r0, [sp, #16]
 80084e0:	1813      	adds	r3, r2, r0
 80084e2:	2a01      	cmp	r2, #1
 80084e4:	6123      	str	r3, [r4, #16]
 80084e6:	dc02      	bgt.n	80084ee <_printf_float+0x136>
 80084e8:	6822      	ldr	r2, [r4, #0]
 80084ea:	07d2      	lsls	r2, r2, #31
 80084ec:	d501      	bpl.n	80084f2 <_printf_float+0x13a>
 80084ee:	3301      	adds	r3, #1
 80084f0:	6123      	str	r3, [r4, #16]
 80084f2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d0a2      	beq.n	8008440 <_printf_float+0x88>
 80084fa:	232d      	movs	r3, #45	; 0x2d
 80084fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008500:	e79e      	b.n	8008440 <_printf_float+0x88>
 8008502:	9904      	ldr	r1, [sp, #16]
 8008504:	2947      	cmp	r1, #71	; 0x47
 8008506:	d1c1      	bne.n	800848c <_printf_float+0xd4>
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1bf      	bne.n	800848c <_printf_float+0xd4>
 800850c:	2301      	movs	r3, #1
 800850e:	e7bc      	b.n	800848a <_printf_float+0xd2>
 8008510:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008514:	d118      	bne.n	8008548 <_printf_float+0x190>
 8008516:	2900      	cmp	r1, #0
 8008518:	6863      	ldr	r3, [r4, #4]
 800851a:	dd0b      	ble.n	8008534 <_printf_float+0x17c>
 800851c:	6121      	str	r1, [r4, #16]
 800851e:	b913      	cbnz	r3, 8008526 <_printf_float+0x16e>
 8008520:	6822      	ldr	r2, [r4, #0]
 8008522:	07d0      	lsls	r0, r2, #31
 8008524:	d502      	bpl.n	800852c <_printf_float+0x174>
 8008526:	3301      	adds	r3, #1
 8008528:	440b      	add	r3, r1
 800852a:	6123      	str	r3, [r4, #16]
 800852c:	2300      	movs	r3, #0
 800852e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	e7de      	b.n	80084f2 <_printf_float+0x13a>
 8008534:	b913      	cbnz	r3, 800853c <_printf_float+0x184>
 8008536:	6822      	ldr	r2, [r4, #0]
 8008538:	07d2      	lsls	r2, r2, #31
 800853a:	d501      	bpl.n	8008540 <_printf_float+0x188>
 800853c:	3302      	adds	r3, #2
 800853e:	e7f4      	b.n	800852a <_printf_float+0x172>
 8008540:	2301      	movs	r3, #1
 8008542:	e7f2      	b.n	800852a <_printf_float+0x172>
 8008544:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008548:	9b08      	ldr	r3, [sp, #32]
 800854a:	4299      	cmp	r1, r3
 800854c:	db05      	blt.n	800855a <_printf_float+0x1a2>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	6121      	str	r1, [r4, #16]
 8008552:	07d8      	lsls	r0, r3, #31
 8008554:	d5ea      	bpl.n	800852c <_printf_float+0x174>
 8008556:	1c4b      	adds	r3, r1, #1
 8008558:	e7e7      	b.n	800852a <_printf_float+0x172>
 800855a:	2900      	cmp	r1, #0
 800855c:	bfd4      	ite	le
 800855e:	f1c1 0202 	rsble	r2, r1, #2
 8008562:	2201      	movgt	r2, #1
 8008564:	4413      	add	r3, r2
 8008566:	e7e0      	b.n	800852a <_printf_float+0x172>
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	055a      	lsls	r2, r3, #21
 800856c:	d407      	bmi.n	800857e <_printf_float+0x1c6>
 800856e:	6923      	ldr	r3, [r4, #16]
 8008570:	4642      	mov	r2, r8
 8008572:	4631      	mov	r1, r6
 8008574:	4628      	mov	r0, r5
 8008576:	47b8      	blx	r7
 8008578:	3001      	adds	r0, #1
 800857a:	d12a      	bne.n	80085d2 <_printf_float+0x21a>
 800857c:	e76a      	b.n	8008454 <_printf_float+0x9c>
 800857e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008582:	f240 80e2 	bls.w	800874a <_printf_float+0x392>
 8008586:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800858a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800858e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008592:	d133      	bne.n	80085fc <_printf_float+0x244>
 8008594:	4a38      	ldr	r2, [pc, #224]	; (8008678 <_printf_float+0x2c0>)
 8008596:	2301      	movs	r3, #1
 8008598:	4631      	mov	r1, r6
 800859a:	4628      	mov	r0, r5
 800859c:	47b8      	blx	r7
 800859e:	3001      	adds	r0, #1
 80085a0:	f43f af58 	beq.w	8008454 <_printf_float+0x9c>
 80085a4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	db02      	blt.n	80085b2 <_printf_float+0x1fa>
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	07d8      	lsls	r0, r3, #31
 80085b0:	d50f      	bpl.n	80085d2 <_printf_float+0x21a>
 80085b2:	4653      	mov	r3, sl
 80085b4:	465a      	mov	r2, fp
 80085b6:	4631      	mov	r1, r6
 80085b8:	4628      	mov	r0, r5
 80085ba:	47b8      	blx	r7
 80085bc:	3001      	adds	r0, #1
 80085be:	f43f af49 	beq.w	8008454 <_printf_float+0x9c>
 80085c2:	f04f 0800 	mov.w	r8, #0
 80085c6:	f104 091a 	add.w	r9, r4, #26
 80085ca:	9b08      	ldr	r3, [sp, #32]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	4543      	cmp	r3, r8
 80085d0:	dc09      	bgt.n	80085e6 <_printf_float+0x22e>
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	079b      	lsls	r3, r3, #30
 80085d6:	f100 8108 	bmi.w	80087ea <_printf_float+0x432>
 80085da:	68e0      	ldr	r0, [r4, #12]
 80085dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085de:	4298      	cmp	r0, r3
 80085e0:	bfb8      	it	lt
 80085e2:	4618      	movlt	r0, r3
 80085e4:	e738      	b.n	8008458 <_printf_float+0xa0>
 80085e6:	2301      	movs	r3, #1
 80085e8:	464a      	mov	r2, r9
 80085ea:	4631      	mov	r1, r6
 80085ec:	4628      	mov	r0, r5
 80085ee:	47b8      	blx	r7
 80085f0:	3001      	adds	r0, #1
 80085f2:	f43f af2f 	beq.w	8008454 <_printf_float+0x9c>
 80085f6:	f108 0801 	add.w	r8, r8, #1
 80085fa:	e7e6      	b.n	80085ca <_printf_float+0x212>
 80085fc:	9b07      	ldr	r3, [sp, #28]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	dc3c      	bgt.n	800867c <_printf_float+0x2c4>
 8008602:	4a1d      	ldr	r2, [pc, #116]	; (8008678 <_printf_float+0x2c0>)
 8008604:	2301      	movs	r3, #1
 8008606:	4631      	mov	r1, r6
 8008608:	4628      	mov	r0, r5
 800860a:	47b8      	blx	r7
 800860c:	3001      	adds	r0, #1
 800860e:	f43f af21 	beq.w	8008454 <_printf_float+0x9c>
 8008612:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008616:	4313      	orrs	r3, r2
 8008618:	d102      	bne.n	8008620 <_printf_float+0x268>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	07d9      	lsls	r1, r3, #31
 800861e:	d5d8      	bpl.n	80085d2 <_printf_float+0x21a>
 8008620:	4653      	mov	r3, sl
 8008622:	465a      	mov	r2, fp
 8008624:	4631      	mov	r1, r6
 8008626:	4628      	mov	r0, r5
 8008628:	47b8      	blx	r7
 800862a:	3001      	adds	r0, #1
 800862c:	f43f af12 	beq.w	8008454 <_printf_float+0x9c>
 8008630:	f04f 0900 	mov.w	r9, #0
 8008634:	f104 0a1a 	add.w	sl, r4, #26
 8008638:	9b07      	ldr	r3, [sp, #28]
 800863a:	425b      	negs	r3, r3
 800863c:	454b      	cmp	r3, r9
 800863e:	dc01      	bgt.n	8008644 <_printf_float+0x28c>
 8008640:	9b08      	ldr	r3, [sp, #32]
 8008642:	e795      	b.n	8008570 <_printf_float+0x1b8>
 8008644:	2301      	movs	r3, #1
 8008646:	4652      	mov	r2, sl
 8008648:	4631      	mov	r1, r6
 800864a:	4628      	mov	r0, r5
 800864c:	47b8      	blx	r7
 800864e:	3001      	adds	r0, #1
 8008650:	f43f af00 	beq.w	8008454 <_printf_float+0x9c>
 8008654:	f109 0901 	add.w	r9, r9, #1
 8008658:	e7ee      	b.n	8008638 <_printf_float+0x280>
 800865a:	bf00      	nop
 800865c:	f3af 8000 	nop.w
 8008660:	ffffffff 	.word	0xffffffff
 8008664:	7fefffff 	.word	0x7fefffff
 8008668:	0800ca00 	.word	0x0800ca00
 800866c:	0800ca04 	.word	0x0800ca04
 8008670:	0800ca0c 	.word	0x0800ca0c
 8008674:	0800ca08 	.word	0x0800ca08
 8008678:	0800ca10 	.word	0x0800ca10
 800867c:	9a08      	ldr	r2, [sp, #32]
 800867e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008680:	429a      	cmp	r2, r3
 8008682:	bfa8      	it	ge
 8008684:	461a      	movge	r2, r3
 8008686:	2a00      	cmp	r2, #0
 8008688:	4691      	mov	r9, r2
 800868a:	dc38      	bgt.n	80086fe <_printf_float+0x346>
 800868c:	2300      	movs	r3, #0
 800868e:	9305      	str	r3, [sp, #20]
 8008690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008694:	f104 021a 	add.w	r2, r4, #26
 8008698:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800869a:	9905      	ldr	r1, [sp, #20]
 800869c:	9304      	str	r3, [sp, #16]
 800869e:	eba3 0309 	sub.w	r3, r3, r9
 80086a2:	428b      	cmp	r3, r1
 80086a4:	dc33      	bgt.n	800870e <_printf_float+0x356>
 80086a6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	db3c      	blt.n	8008728 <_printf_float+0x370>
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	07da      	lsls	r2, r3, #31
 80086b2:	d439      	bmi.n	8008728 <_printf_float+0x370>
 80086b4:	9b08      	ldr	r3, [sp, #32]
 80086b6:	9a04      	ldr	r2, [sp, #16]
 80086b8:	9907      	ldr	r1, [sp, #28]
 80086ba:	1a9a      	subs	r2, r3, r2
 80086bc:	eba3 0901 	sub.w	r9, r3, r1
 80086c0:	4591      	cmp	r9, r2
 80086c2:	bfa8      	it	ge
 80086c4:	4691      	movge	r9, r2
 80086c6:	f1b9 0f00 	cmp.w	r9, #0
 80086ca:	dc35      	bgt.n	8008738 <_printf_float+0x380>
 80086cc:	f04f 0800 	mov.w	r8, #0
 80086d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086d4:	f104 0a1a 	add.w	sl, r4, #26
 80086d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80086dc:	1a9b      	subs	r3, r3, r2
 80086de:	eba3 0309 	sub.w	r3, r3, r9
 80086e2:	4543      	cmp	r3, r8
 80086e4:	f77f af75 	ble.w	80085d2 <_printf_float+0x21a>
 80086e8:	2301      	movs	r3, #1
 80086ea:	4652      	mov	r2, sl
 80086ec:	4631      	mov	r1, r6
 80086ee:	4628      	mov	r0, r5
 80086f0:	47b8      	blx	r7
 80086f2:	3001      	adds	r0, #1
 80086f4:	f43f aeae 	beq.w	8008454 <_printf_float+0x9c>
 80086f8:	f108 0801 	add.w	r8, r8, #1
 80086fc:	e7ec      	b.n	80086d8 <_printf_float+0x320>
 80086fe:	4613      	mov	r3, r2
 8008700:	4631      	mov	r1, r6
 8008702:	4642      	mov	r2, r8
 8008704:	4628      	mov	r0, r5
 8008706:	47b8      	blx	r7
 8008708:	3001      	adds	r0, #1
 800870a:	d1bf      	bne.n	800868c <_printf_float+0x2d4>
 800870c:	e6a2      	b.n	8008454 <_printf_float+0x9c>
 800870e:	2301      	movs	r3, #1
 8008710:	4631      	mov	r1, r6
 8008712:	4628      	mov	r0, r5
 8008714:	9204      	str	r2, [sp, #16]
 8008716:	47b8      	blx	r7
 8008718:	3001      	adds	r0, #1
 800871a:	f43f ae9b 	beq.w	8008454 <_printf_float+0x9c>
 800871e:	9b05      	ldr	r3, [sp, #20]
 8008720:	9a04      	ldr	r2, [sp, #16]
 8008722:	3301      	adds	r3, #1
 8008724:	9305      	str	r3, [sp, #20]
 8008726:	e7b7      	b.n	8008698 <_printf_float+0x2e0>
 8008728:	4653      	mov	r3, sl
 800872a:	465a      	mov	r2, fp
 800872c:	4631      	mov	r1, r6
 800872e:	4628      	mov	r0, r5
 8008730:	47b8      	blx	r7
 8008732:	3001      	adds	r0, #1
 8008734:	d1be      	bne.n	80086b4 <_printf_float+0x2fc>
 8008736:	e68d      	b.n	8008454 <_printf_float+0x9c>
 8008738:	9a04      	ldr	r2, [sp, #16]
 800873a:	464b      	mov	r3, r9
 800873c:	4442      	add	r2, r8
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	47b8      	blx	r7
 8008744:	3001      	adds	r0, #1
 8008746:	d1c1      	bne.n	80086cc <_printf_float+0x314>
 8008748:	e684      	b.n	8008454 <_printf_float+0x9c>
 800874a:	9a08      	ldr	r2, [sp, #32]
 800874c:	2a01      	cmp	r2, #1
 800874e:	dc01      	bgt.n	8008754 <_printf_float+0x39c>
 8008750:	07db      	lsls	r3, r3, #31
 8008752:	d537      	bpl.n	80087c4 <_printf_float+0x40c>
 8008754:	2301      	movs	r3, #1
 8008756:	4642      	mov	r2, r8
 8008758:	4631      	mov	r1, r6
 800875a:	4628      	mov	r0, r5
 800875c:	47b8      	blx	r7
 800875e:	3001      	adds	r0, #1
 8008760:	f43f ae78 	beq.w	8008454 <_printf_float+0x9c>
 8008764:	4653      	mov	r3, sl
 8008766:	465a      	mov	r2, fp
 8008768:	4631      	mov	r1, r6
 800876a:	4628      	mov	r0, r5
 800876c:	47b8      	blx	r7
 800876e:	3001      	adds	r0, #1
 8008770:	f43f ae70 	beq.w	8008454 <_printf_float+0x9c>
 8008774:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008778:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800877c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008780:	d01b      	beq.n	80087ba <_printf_float+0x402>
 8008782:	9b08      	ldr	r3, [sp, #32]
 8008784:	f108 0201 	add.w	r2, r8, #1
 8008788:	3b01      	subs	r3, #1
 800878a:	4631      	mov	r1, r6
 800878c:	4628      	mov	r0, r5
 800878e:	47b8      	blx	r7
 8008790:	3001      	adds	r0, #1
 8008792:	d10e      	bne.n	80087b2 <_printf_float+0x3fa>
 8008794:	e65e      	b.n	8008454 <_printf_float+0x9c>
 8008796:	2301      	movs	r3, #1
 8008798:	464a      	mov	r2, r9
 800879a:	4631      	mov	r1, r6
 800879c:	4628      	mov	r0, r5
 800879e:	47b8      	blx	r7
 80087a0:	3001      	adds	r0, #1
 80087a2:	f43f ae57 	beq.w	8008454 <_printf_float+0x9c>
 80087a6:	f108 0801 	add.w	r8, r8, #1
 80087aa:	9b08      	ldr	r3, [sp, #32]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	4543      	cmp	r3, r8
 80087b0:	dcf1      	bgt.n	8008796 <_printf_float+0x3de>
 80087b2:	9b04      	ldr	r3, [sp, #16]
 80087b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087b8:	e6db      	b.n	8008572 <_printf_float+0x1ba>
 80087ba:	f04f 0800 	mov.w	r8, #0
 80087be:	f104 091a 	add.w	r9, r4, #26
 80087c2:	e7f2      	b.n	80087aa <_printf_float+0x3f2>
 80087c4:	2301      	movs	r3, #1
 80087c6:	4642      	mov	r2, r8
 80087c8:	e7df      	b.n	800878a <_printf_float+0x3d2>
 80087ca:	2301      	movs	r3, #1
 80087cc:	464a      	mov	r2, r9
 80087ce:	4631      	mov	r1, r6
 80087d0:	4628      	mov	r0, r5
 80087d2:	47b8      	blx	r7
 80087d4:	3001      	adds	r0, #1
 80087d6:	f43f ae3d 	beq.w	8008454 <_printf_float+0x9c>
 80087da:	f108 0801 	add.w	r8, r8, #1
 80087de:	68e3      	ldr	r3, [r4, #12]
 80087e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087e2:	1a5b      	subs	r3, r3, r1
 80087e4:	4543      	cmp	r3, r8
 80087e6:	dcf0      	bgt.n	80087ca <_printf_float+0x412>
 80087e8:	e6f7      	b.n	80085da <_printf_float+0x222>
 80087ea:	f04f 0800 	mov.w	r8, #0
 80087ee:	f104 0919 	add.w	r9, r4, #25
 80087f2:	e7f4      	b.n	80087de <_printf_float+0x426>

080087f4 <_printf_common>:
 80087f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f8:	4616      	mov	r6, r2
 80087fa:	4699      	mov	r9, r3
 80087fc:	688a      	ldr	r2, [r1, #8]
 80087fe:	690b      	ldr	r3, [r1, #16]
 8008800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008804:	4293      	cmp	r3, r2
 8008806:	bfb8      	it	lt
 8008808:	4613      	movlt	r3, r2
 800880a:	6033      	str	r3, [r6, #0]
 800880c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008810:	4607      	mov	r7, r0
 8008812:	460c      	mov	r4, r1
 8008814:	b10a      	cbz	r2, 800881a <_printf_common+0x26>
 8008816:	3301      	adds	r3, #1
 8008818:	6033      	str	r3, [r6, #0]
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	0699      	lsls	r1, r3, #26
 800881e:	bf42      	ittt	mi
 8008820:	6833      	ldrmi	r3, [r6, #0]
 8008822:	3302      	addmi	r3, #2
 8008824:	6033      	strmi	r3, [r6, #0]
 8008826:	6825      	ldr	r5, [r4, #0]
 8008828:	f015 0506 	ands.w	r5, r5, #6
 800882c:	d106      	bne.n	800883c <_printf_common+0x48>
 800882e:	f104 0a19 	add.w	sl, r4, #25
 8008832:	68e3      	ldr	r3, [r4, #12]
 8008834:	6832      	ldr	r2, [r6, #0]
 8008836:	1a9b      	subs	r3, r3, r2
 8008838:	42ab      	cmp	r3, r5
 800883a:	dc26      	bgt.n	800888a <_printf_common+0x96>
 800883c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008840:	1e13      	subs	r3, r2, #0
 8008842:	6822      	ldr	r2, [r4, #0]
 8008844:	bf18      	it	ne
 8008846:	2301      	movne	r3, #1
 8008848:	0692      	lsls	r2, r2, #26
 800884a:	d42b      	bmi.n	80088a4 <_printf_common+0xb0>
 800884c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008850:	4649      	mov	r1, r9
 8008852:	4638      	mov	r0, r7
 8008854:	47c0      	blx	r8
 8008856:	3001      	adds	r0, #1
 8008858:	d01e      	beq.n	8008898 <_printf_common+0xa4>
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	68e5      	ldr	r5, [r4, #12]
 800885e:	6832      	ldr	r2, [r6, #0]
 8008860:	f003 0306 	and.w	r3, r3, #6
 8008864:	2b04      	cmp	r3, #4
 8008866:	bf08      	it	eq
 8008868:	1aad      	subeq	r5, r5, r2
 800886a:	68a3      	ldr	r3, [r4, #8]
 800886c:	6922      	ldr	r2, [r4, #16]
 800886e:	bf0c      	ite	eq
 8008870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008874:	2500      	movne	r5, #0
 8008876:	4293      	cmp	r3, r2
 8008878:	bfc4      	itt	gt
 800887a:	1a9b      	subgt	r3, r3, r2
 800887c:	18ed      	addgt	r5, r5, r3
 800887e:	2600      	movs	r6, #0
 8008880:	341a      	adds	r4, #26
 8008882:	42b5      	cmp	r5, r6
 8008884:	d11a      	bne.n	80088bc <_printf_common+0xc8>
 8008886:	2000      	movs	r0, #0
 8008888:	e008      	b.n	800889c <_printf_common+0xa8>
 800888a:	2301      	movs	r3, #1
 800888c:	4652      	mov	r2, sl
 800888e:	4649      	mov	r1, r9
 8008890:	4638      	mov	r0, r7
 8008892:	47c0      	blx	r8
 8008894:	3001      	adds	r0, #1
 8008896:	d103      	bne.n	80088a0 <_printf_common+0xac>
 8008898:	f04f 30ff 	mov.w	r0, #4294967295
 800889c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a0:	3501      	adds	r5, #1
 80088a2:	e7c6      	b.n	8008832 <_printf_common+0x3e>
 80088a4:	18e1      	adds	r1, r4, r3
 80088a6:	1c5a      	adds	r2, r3, #1
 80088a8:	2030      	movs	r0, #48	; 0x30
 80088aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088ae:	4422      	add	r2, r4
 80088b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088b8:	3302      	adds	r3, #2
 80088ba:	e7c7      	b.n	800884c <_printf_common+0x58>
 80088bc:	2301      	movs	r3, #1
 80088be:	4622      	mov	r2, r4
 80088c0:	4649      	mov	r1, r9
 80088c2:	4638      	mov	r0, r7
 80088c4:	47c0      	blx	r8
 80088c6:	3001      	adds	r0, #1
 80088c8:	d0e6      	beq.n	8008898 <_printf_common+0xa4>
 80088ca:	3601      	adds	r6, #1
 80088cc:	e7d9      	b.n	8008882 <_printf_common+0x8e>
	...

080088d0 <_printf_i>:
 80088d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088d4:	7e0f      	ldrb	r7, [r1, #24]
 80088d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088d8:	2f78      	cmp	r7, #120	; 0x78
 80088da:	4691      	mov	r9, r2
 80088dc:	4680      	mov	r8, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	469a      	mov	sl, r3
 80088e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088e6:	d807      	bhi.n	80088f8 <_printf_i+0x28>
 80088e8:	2f62      	cmp	r7, #98	; 0x62
 80088ea:	d80a      	bhi.n	8008902 <_printf_i+0x32>
 80088ec:	2f00      	cmp	r7, #0
 80088ee:	f000 80d8 	beq.w	8008aa2 <_printf_i+0x1d2>
 80088f2:	2f58      	cmp	r7, #88	; 0x58
 80088f4:	f000 80a3 	beq.w	8008a3e <_printf_i+0x16e>
 80088f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008900:	e03a      	b.n	8008978 <_printf_i+0xa8>
 8008902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008906:	2b15      	cmp	r3, #21
 8008908:	d8f6      	bhi.n	80088f8 <_printf_i+0x28>
 800890a:	a101      	add	r1, pc, #4	; (adr r1, 8008910 <_printf_i+0x40>)
 800890c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008910:	08008969 	.word	0x08008969
 8008914:	0800897d 	.word	0x0800897d
 8008918:	080088f9 	.word	0x080088f9
 800891c:	080088f9 	.word	0x080088f9
 8008920:	080088f9 	.word	0x080088f9
 8008924:	080088f9 	.word	0x080088f9
 8008928:	0800897d 	.word	0x0800897d
 800892c:	080088f9 	.word	0x080088f9
 8008930:	080088f9 	.word	0x080088f9
 8008934:	080088f9 	.word	0x080088f9
 8008938:	080088f9 	.word	0x080088f9
 800893c:	08008a89 	.word	0x08008a89
 8008940:	080089ad 	.word	0x080089ad
 8008944:	08008a6b 	.word	0x08008a6b
 8008948:	080088f9 	.word	0x080088f9
 800894c:	080088f9 	.word	0x080088f9
 8008950:	08008aab 	.word	0x08008aab
 8008954:	080088f9 	.word	0x080088f9
 8008958:	080089ad 	.word	0x080089ad
 800895c:	080088f9 	.word	0x080088f9
 8008960:	080088f9 	.word	0x080088f9
 8008964:	08008a73 	.word	0x08008a73
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	1d1a      	adds	r2, r3, #4
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	602a      	str	r2, [r5, #0]
 8008970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008978:	2301      	movs	r3, #1
 800897a:	e0a3      	b.n	8008ac4 <_printf_i+0x1f4>
 800897c:	6820      	ldr	r0, [r4, #0]
 800897e:	6829      	ldr	r1, [r5, #0]
 8008980:	0606      	lsls	r6, r0, #24
 8008982:	f101 0304 	add.w	r3, r1, #4
 8008986:	d50a      	bpl.n	800899e <_printf_i+0xce>
 8008988:	680e      	ldr	r6, [r1, #0]
 800898a:	602b      	str	r3, [r5, #0]
 800898c:	2e00      	cmp	r6, #0
 800898e:	da03      	bge.n	8008998 <_printf_i+0xc8>
 8008990:	232d      	movs	r3, #45	; 0x2d
 8008992:	4276      	negs	r6, r6
 8008994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008998:	485e      	ldr	r0, [pc, #376]	; (8008b14 <_printf_i+0x244>)
 800899a:	230a      	movs	r3, #10
 800899c:	e019      	b.n	80089d2 <_printf_i+0x102>
 800899e:	680e      	ldr	r6, [r1, #0]
 80089a0:	602b      	str	r3, [r5, #0]
 80089a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089a6:	bf18      	it	ne
 80089a8:	b236      	sxthne	r6, r6
 80089aa:	e7ef      	b.n	800898c <_printf_i+0xbc>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	6820      	ldr	r0, [r4, #0]
 80089b0:	1d19      	adds	r1, r3, #4
 80089b2:	6029      	str	r1, [r5, #0]
 80089b4:	0601      	lsls	r1, r0, #24
 80089b6:	d501      	bpl.n	80089bc <_printf_i+0xec>
 80089b8:	681e      	ldr	r6, [r3, #0]
 80089ba:	e002      	b.n	80089c2 <_printf_i+0xf2>
 80089bc:	0646      	lsls	r6, r0, #25
 80089be:	d5fb      	bpl.n	80089b8 <_printf_i+0xe8>
 80089c0:	881e      	ldrh	r6, [r3, #0]
 80089c2:	4854      	ldr	r0, [pc, #336]	; (8008b14 <_printf_i+0x244>)
 80089c4:	2f6f      	cmp	r7, #111	; 0x6f
 80089c6:	bf0c      	ite	eq
 80089c8:	2308      	moveq	r3, #8
 80089ca:	230a      	movne	r3, #10
 80089cc:	2100      	movs	r1, #0
 80089ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089d2:	6865      	ldr	r5, [r4, #4]
 80089d4:	60a5      	str	r5, [r4, #8]
 80089d6:	2d00      	cmp	r5, #0
 80089d8:	bfa2      	ittt	ge
 80089da:	6821      	ldrge	r1, [r4, #0]
 80089dc:	f021 0104 	bicge.w	r1, r1, #4
 80089e0:	6021      	strge	r1, [r4, #0]
 80089e2:	b90e      	cbnz	r6, 80089e8 <_printf_i+0x118>
 80089e4:	2d00      	cmp	r5, #0
 80089e6:	d04d      	beq.n	8008a84 <_printf_i+0x1b4>
 80089e8:	4615      	mov	r5, r2
 80089ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80089ee:	fb03 6711 	mls	r7, r3, r1, r6
 80089f2:	5dc7      	ldrb	r7, [r0, r7]
 80089f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089f8:	4637      	mov	r7, r6
 80089fa:	42bb      	cmp	r3, r7
 80089fc:	460e      	mov	r6, r1
 80089fe:	d9f4      	bls.n	80089ea <_printf_i+0x11a>
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	d10b      	bne.n	8008a1c <_printf_i+0x14c>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	07de      	lsls	r6, r3, #31
 8008a08:	d508      	bpl.n	8008a1c <_printf_i+0x14c>
 8008a0a:	6923      	ldr	r3, [r4, #16]
 8008a0c:	6861      	ldr	r1, [r4, #4]
 8008a0e:	4299      	cmp	r1, r3
 8008a10:	bfde      	ittt	le
 8008a12:	2330      	movle	r3, #48	; 0x30
 8008a14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a1c:	1b52      	subs	r2, r2, r5
 8008a1e:	6122      	str	r2, [r4, #16]
 8008a20:	f8cd a000 	str.w	sl, [sp]
 8008a24:	464b      	mov	r3, r9
 8008a26:	aa03      	add	r2, sp, #12
 8008a28:	4621      	mov	r1, r4
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	f7ff fee2 	bl	80087f4 <_printf_common>
 8008a30:	3001      	adds	r0, #1
 8008a32:	d14c      	bne.n	8008ace <_printf_i+0x1fe>
 8008a34:	f04f 30ff 	mov.w	r0, #4294967295
 8008a38:	b004      	add	sp, #16
 8008a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a3e:	4835      	ldr	r0, [pc, #212]	; (8008b14 <_printf_i+0x244>)
 8008a40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a44:	6829      	ldr	r1, [r5, #0]
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a4c:	6029      	str	r1, [r5, #0]
 8008a4e:	061d      	lsls	r5, r3, #24
 8008a50:	d514      	bpl.n	8008a7c <_printf_i+0x1ac>
 8008a52:	07df      	lsls	r7, r3, #31
 8008a54:	bf44      	itt	mi
 8008a56:	f043 0320 	orrmi.w	r3, r3, #32
 8008a5a:	6023      	strmi	r3, [r4, #0]
 8008a5c:	b91e      	cbnz	r6, 8008a66 <_printf_i+0x196>
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	f023 0320 	bic.w	r3, r3, #32
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	2310      	movs	r3, #16
 8008a68:	e7b0      	b.n	80089cc <_printf_i+0xfc>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	f043 0320 	orr.w	r3, r3, #32
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	2378      	movs	r3, #120	; 0x78
 8008a74:	4828      	ldr	r0, [pc, #160]	; (8008b18 <_printf_i+0x248>)
 8008a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a7a:	e7e3      	b.n	8008a44 <_printf_i+0x174>
 8008a7c:	0659      	lsls	r1, r3, #25
 8008a7e:	bf48      	it	mi
 8008a80:	b2b6      	uxthmi	r6, r6
 8008a82:	e7e6      	b.n	8008a52 <_printf_i+0x182>
 8008a84:	4615      	mov	r5, r2
 8008a86:	e7bb      	b.n	8008a00 <_printf_i+0x130>
 8008a88:	682b      	ldr	r3, [r5, #0]
 8008a8a:	6826      	ldr	r6, [r4, #0]
 8008a8c:	6961      	ldr	r1, [r4, #20]
 8008a8e:	1d18      	adds	r0, r3, #4
 8008a90:	6028      	str	r0, [r5, #0]
 8008a92:	0635      	lsls	r5, r6, #24
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	d501      	bpl.n	8008a9c <_printf_i+0x1cc>
 8008a98:	6019      	str	r1, [r3, #0]
 8008a9a:	e002      	b.n	8008aa2 <_printf_i+0x1d2>
 8008a9c:	0670      	lsls	r0, r6, #25
 8008a9e:	d5fb      	bpl.n	8008a98 <_printf_i+0x1c8>
 8008aa0:	8019      	strh	r1, [r3, #0]
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	6123      	str	r3, [r4, #16]
 8008aa6:	4615      	mov	r5, r2
 8008aa8:	e7ba      	b.n	8008a20 <_printf_i+0x150>
 8008aaa:	682b      	ldr	r3, [r5, #0]
 8008aac:	1d1a      	adds	r2, r3, #4
 8008aae:	602a      	str	r2, [r5, #0]
 8008ab0:	681d      	ldr	r5, [r3, #0]
 8008ab2:	6862      	ldr	r2, [r4, #4]
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f7f7 fc22 	bl	8000300 <memchr>
 8008abc:	b108      	cbz	r0, 8008ac2 <_printf_i+0x1f2>
 8008abe:	1b40      	subs	r0, r0, r5
 8008ac0:	6060      	str	r0, [r4, #4]
 8008ac2:	6863      	ldr	r3, [r4, #4]
 8008ac4:	6123      	str	r3, [r4, #16]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008acc:	e7a8      	b.n	8008a20 <_printf_i+0x150>
 8008ace:	6923      	ldr	r3, [r4, #16]
 8008ad0:	462a      	mov	r2, r5
 8008ad2:	4649      	mov	r1, r9
 8008ad4:	4640      	mov	r0, r8
 8008ad6:	47d0      	blx	sl
 8008ad8:	3001      	adds	r0, #1
 8008ada:	d0ab      	beq.n	8008a34 <_printf_i+0x164>
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	079b      	lsls	r3, r3, #30
 8008ae0:	d413      	bmi.n	8008b0a <_printf_i+0x23a>
 8008ae2:	68e0      	ldr	r0, [r4, #12]
 8008ae4:	9b03      	ldr	r3, [sp, #12]
 8008ae6:	4298      	cmp	r0, r3
 8008ae8:	bfb8      	it	lt
 8008aea:	4618      	movlt	r0, r3
 8008aec:	e7a4      	b.n	8008a38 <_printf_i+0x168>
 8008aee:	2301      	movs	r3, #1
 8008af0:	4632      	mov	r2, r6
 8008af2:	4649      	mov	r1, r9
 8008af4:	4640      	mov	r0, r8
 8008af6:	47d0      	blx	sl
 8008af8:	3001      	adds	r0, #1
 8008afa:	d09b      	beq.n	8008a34 <_printf_i+0x164>
 8008afc:	3501      	adds	r5, #1
 8008afe:	68e3      	ldr	r3, [r4, #12]
 8008b00:	9903      	ldr	r1, [sp, #12]
 8008b02:	1a5b      	subs	r3, r3, r1
 8008b04:	42ab      	cmp	r3, r5
 8008b06:	dcf2      	bgt.n	8008aee <_printf_i+0x21e>
 8008b08:	e7eb      	b.n	8008ae2 <_printf_i+0x212>
 8008b0a:	2500      	movs	r5, #0
 8008b0c:	f104 0619 	add.w	r6, r4, #25
 8008b10:	e7f5      	b.n	8008afe <_printf_i+0x22e>
 8008b12:	bf00      	nop
 8008b14:	0800ca12 	.word	0x0800ca12
 8008b18:	0800ca23 	.word	0x0800ca23

08008b1c <_scanf_float>:
 8008b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b20:	b087      	sub	sp, #28
 8008b22:	4617      	mov	r7, r2
 8008b24:	9303      	str	r3, [sp, #12]
 8008b26:	688b      	ldr	r3, [r1, #8]
 8008b28:	1e5a      	subs	r2, r3, #1
 8008b2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008b2e:	bf83      	ittte	hi
 8008b30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008b34:	195b      	addhi	r3, r3, r5
 8008b36:	9302      	strhi	r3, [sp, #8]
 8008b38:	2300      	movls	r3, #0
 8008b3a:	bf86      	itte	hi
 8008b3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008b40:	608b      	strhi	r3, [r1, #8]
 8008b42:	9302      	strls	r3, [sp, #8]
 8008b44:	680b      	ldr	r3, [r1, #0]
 8008b46:	468b      	mov	fp, r1
 8008b48:	2500      	movs	r5, #0
 8008b4a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008b4e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008b52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008b56:	4680      	mov	r8, r0
 8008b58:	460c      	mov	r4, r1
 8008b5a:	465e      	mov	r6, fp
 8008b5c:	46aa      	mov	sl, r5
 8008b5e:	46a9      	mov	r9, r5
 8008b60:	9501      	str	r5, [sp, #4]
 8008b62:	68a2      	ldr	r2, [r4, #8]
 8008b64:	b152      	cbz	r2, 8008b7c <_scanf_float+0x60>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	2b4e      	cmp	r3, #78	; 0x4e
 8008b6c:	d864      	bhi.n	8008c38 <_scanf_float+0x11c>
 8008b6e:	2b40      	cmp	r3, #64	; 0x40
 8008b70:	d83c      	bhi.n	8008bec <_scanf_float+0xd0>
 8008b72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008b76:	b2c8      	uxtb	r0, r1
 8008b78:	280e      	cmp	r0, #14
 8008b7a:	d93a      	bls.n	8008bf2 <_scanf_float+0xd6>
 8008b7c:	f1b9 0f00 	cmp.w	r9, #0
 8008b80:	d003      	beq.n	8008b8a <_scanf_float+0x6e>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b8e:	f1ba 0f01 	cmp.w	sl, #1
 8008b92:	f200 8113 	bhi.w	8008dbc <_scanf_float+0x2a0>
 8008b96:	455e      	cmp	r6, fp
 8008b98:	f200 8105 	bhi.w	8008da6 <_scanf_float+0x28a>
 8008b9c:	2501      	movs	r5, #1
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	b007      	add	sp, #28
 8008ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008baa:	2a0d      	cmp	r2, #13
 8008bac:	d8e6      	bhi.n	8008b7c <_scanf_float+0x60>
 8008bae:	a101      	add	r1, pc, #4	; (adr r1, 8008bb4 <_scanf_float+0x98>)
 8008bb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008bb4:	08008cf3 	.word	0x08008cf3
 8008bb8:	08008b7d 	.word	0x08008b7d
 8008bbc:	08008b7d 	.word	0x08008b7d
 8008bc0:	08008b7d 	.word	0x08008b7d
 8008bc4:	08008d53 	.word	0x08008d53
 8008bc8:	08008d2b 	.word	0x08008d2b
 8008bcc:	08008b7d 	.word	0x08008b7d
 8008bd0:	08008b7d 	.word	0x08008b7d
 8008bd4:	08008d01 	.word	0x08008d01
 8008bd8:	08008b7d 	.word	0x08008b7d
 8008bdc:	08008b7d 	.word	0x08008b7d
 8008be0:	08008b7d 	.word	0x08008b7d
 8008be4:	08008b7d 	.word	0x08008b7d
 8008be8:	08008cb9 	.word	0x08008cb9
 8008bec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008bf0:	e7db      	b.n	8008baa <_scanf_float+0x8e>
 8008bf2:	290e      	cmp	r1, #14
 8008bf4:	d8c2      	bhi.n	8008b7c <_scanf_float+0x60>
 8008bf6:	a001      	add	r0, pc, #4	; (adr r0, 8008bfc <_scanf_float+0xe0>)
 8008bf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008bfc:	08008cab 	.word	0x08008cab
 8008c00:	08008b7d 	.word	0x08008b7d
 8008c04:	08008cab 	.word	0x08008cab
 8008c08:	08008d3f 	.word	0x08008d3f
 8008c0c:	08008b7d 	.word	0x08008b7d
 8008c10:	08008c59 	.word	0x08008c59
 8008c14:	08008c95 	.word	0x08008c95
 8008c18:	08008c95 	.word	0x08008c95
 8008c1c:	08008c95 	.word	0x08008c95
 8008c20:	08008c95 	.word	0x08008c95
 8008c24:	08008c95 	.word	0x08008c95
 8008c28:	08008c95 	.word	0x08008c95
 8008c2c:	08008c95 	.word	0x08008c95
 8008c30:	08008c95 	.word	0x08008c95
 8008c34:	08008c95 	.word	0x08008c95
 8008c38:	2b6e      	cmp	r3, #110	; 0x6e
 8008c3a:	d809      	bhi.n	8008c50 <_scanf_float+0x134>
 8008c3c:	2b60      	cmp	r3, #96	; 0x60
 8008c3e:	d8b2      	bhi.n	8008ba6 <_scanf_float+0x8a>
 8008c40:	2b54      	cmp	r3, #84	; 0x54
 8008c42:	d077      	beq.n	8008d34 <_scanf_float+0x218>
 8008c44:	2b59      	cmp	r3, #89	; 0x59
 8008c46:	d199      	bne.n	8008b7c <_scanf_float+0x60>
 8008c48:	2d07      	cmp	r5, #7
 8008c4a:	d197      	bne.n	8008b7c <_scanf_float+0x60>
 8008c4c:	2508      	movs	r5, #8
 8008c4e:	e029      	b.n	8008ca4 <_scanf_float+0x188>
 8008c50:	2b74      	cmp	r3, #116	; 0x74
 8008c52:	d06f      	beq.n	8008d34 <_scanf_float+0x218>
 8008c54:	2b79      	cmp	r3, #121	; 0x79
 8008c56:	e7f6      	b.n	8008c46 <_scanf_float+0x12a>
 8008c58:	6821      	ldr	r1, [r4, #0]
 8008c5a:	05c8      	lsls	r0, r1, #23
 8008c5c:	d51a      	bpl.n	8008c94 <_scanf_float+0x178>
 8008c5e:	9b02      	ldr	r3, [sp, #8]
 8008c60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008c64:	6021      	str	r1, [r4, #0]
 8008c66:	f109 0901 	add.w	r9, r9, #1
 8008c6a:	b11b      	cbz	r3, 8008c74 <_scanf_float+0x158>
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	3201      	adds	r2, #1
 8008c70:	9302      	str	r3, [sp, #8]
 8008c72:	60a2      	str	r2, [r4, #8]
 8008c74:	68a3      	ldr	r3, [r4, #8]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	60a3      	str	r3, [r4, #8]
 8008c7a:	6923      	ldr	r3, [r4, #16]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	6123      	str	r3, [r4, #16]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3b01      	subs	r3, #1
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	607b      	str	r3, [r7, #4]
 8008c88:	f340 8084 	ble.w	8008d94 <_scanf_float+0x278>
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	603b      	str	r3, [r7, #0]
 8008c92:	e766      	b.n	8008b62 <_scanf_float+0x46>
 8008c94:	eb1a 0f05 	cmn.w	sl, r5
 8008c98:	f47f af70 	bne.w	8008b7c <_scanf_float+0x60>
 8008c9c:	6822      	ldr	r2, [r4, #0]
 8008c9e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008ca2:	6022      	str	r2, [r4, #0]
 8008ca4:	f806 3b01 	strb.w	r3, [r6], #1
 8008ca8:	e7e4      	b.n	8008c74 <_scanf_float+0x158>
 8008caa:	6822      	ldr	r2, [r4, #0]
 8008cac:	0610      	lsls	r0, r2, #24
 8008cae:	f57f af65 	bpl.w	8008b7c <_scanf_float+0x60>
 8008cb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cb6:	e7f4      	b.n	8008ca2 <_scanf_float+0x186>
 8008cb8:	f1ba 0f00 	cmp.w	sl, #0
 8008cbc:	d10e      	bne.n	8008cdc <_scanf_float+0x1c0>
 8008cbe:	f1b9 0f00 	cmp.w	r9, #0
 8008cc2:	d10e      	bne.n	8008ce2 <_scanf_float+0x1c6>
 8008cc4:	6822      	ldr	r2, [r4, #0]
 8008cc6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008cca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008cce:	d108      	bne.n	8008ce2 <_scanf_float+0x1c6>
 8008cd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008cd4:	6022      	str	r2, [r4, #0]
 8008cd6:	f04f 0a01 	mov.w	sl, #1
 8008cda:	e7e3      	b.n	8008ca4 <_scanf_float+0x188>
 8008cdc:	f1ba 0f02 	cmp.w	sl, #2
 8008ce0:	d055      	beq.n	8008d8e <_scanf_float+0x272>
 8008ce2:	2d01      	cmp	r5, #1
 8008ce4:	d002      	beq.n	8008cec <_scanf_float+0x1d0>
 8008ce6:	2d04      	cmp	r5, #4
 8008ce8:	f47f af48 	bne.w	8008b7c <_scanf_float+0x60>
 8008cec:	3501      	adds	r5, #1
 8008cee:	b2ed      	uxtb	r5, r5
 8008cf0:	e7d8      	b.n	8008ca4 <_scanf_float+0x188>
 8008cf2:	f1ba 0f01 	cmp.w	sl, #1
 8008cf6:	f47f af41 	bne.w	8008b7c <_scanf_float+0x60>
 8008cfa:	f04f 0a02 	mov.w	sl, #2
 8008cfe:	e7d1      	b.n	8008ca4 <_scanf_float+0x188>
 8008d00:	b97d      	cbnz	r5, 8008d22 <_scanf_float+0x206>
 8008d02:	f1b9 0f00 	cmp.w	r9, #0
 8008d06:	f47f af3c 	bne.w	8008b82 <_scanf_float+0x66>
 8008d0a:	6822      	ldr	r2, [r4, #0]
 8008d0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008d10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008d14:	f47f af39 	bne.w	8008b8a <_scanf_float+0x6e>
 8008d18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d1c:	6022      	str	r2, [r4, #0]
 8008d1e:	2501      	movs	r5, #1
 8008d20:	e7c0      	b.n	8008ca4 <_scanf_float+0x188>
 8008d22:	2d03      	cmp	r5, #3
 8008d24:	d0e2      	beq.n	8008cec <_scanf_float+0x1d0>
 8008d26:	2d05      	cmp	r5, #5
 8008d28:	e7de      	b.n	8008ce8 <_scanf_float+0x1cc>
 8008d2a:	2d02      	cmp	r5, #2
 8008d2c:	f47f af26 	bne.w	8008b7c <_scanf_float+0x60>
 8008d30:	2503      	movs	r5, #3
 8008d32:	e7b7      	b.n	8008ca4 <_scanf_float+0x188>
 8008d34:	2d06      	cmp	r5, #6
 8008d36:	f47f af21 	bne.w	8008b7c <_scanf_float+0x60>
 8008d3a:	2507      	movs	r5, #7
 8008d3c:	e7b2      	b.n	8008ca4 <_scanf_float+0x188>
 8008d3e:	6822      	ldr	r2, [r4, #0]
 8008d40:	0591      	lsls	r1, r2, #22
 8008d42:	f57f af1b 	bpl.w	8008b7c <_scanf_float+0x60>
 8008d46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008d4a:	6022      	str	r2, [r4, #0]
 8008d4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d50:	e7a8      	b.n	8008ca4 <_scanf_float+0x188>
 8008d52:	6822      	ldr	r2, [r4, #0]
 8008d54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008d58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008d5c:	d006      	beq.n	8008d6c <_scanf_float+0x250>
 8008d5e:	0550      	lsls	r0, r2, #21
 8008d60:	f57f af0c 	bpl.w	8008b7c <_scanf_float+0x60>
 8008d64:	f1b9 0f00 	cmp.w	r9, #0
 8008d68:	f43f af0f 	beq.w	8008b8a <_scanf_float+0x6e>
 8008d6c:	0591      	lsls	r1, r2, #22
 8008d6e:	bf58      	it	pl
 8008d70:	9901      	ldrpl	r1, [sp, #4]
 8008d72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d76:	bf58      	it	pl
 8008d78:	eba9 0101 	subpl.w	r1, r9, r1
 8008d7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008d80:	bf58      	it	pl
 8008d82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008d86:	6022      	str	r2, [r4, #0]
 8008d88:	f04f 0900 	mov.w	r9, #0
 8008d8c:	e78a      	b.n	8008ca4 <_scanf_float+0x188>
 8008d8e:	f04f 0a03 	mov.w	sl, #3
 8008d92:	e787      	b.n	8008ca4 <_scanf_float+0x188>
 8008d94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008d98:	4639      	mov	r1, r7
 8008d9a:	4640      	mov	r0, r8
 8008d9c:	4798      	blx	r3
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	f43f aedf 	beq.w	8008b62 <_scanf_float+0x46>
 8008da4:	e6ea      	b.n	8008b7c <_scanf_float+0x60>
 8008da6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008daa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dae:	463a      	mov	r2, r7
 8008db0:	4640      	mov	r0, r8
 8008db2:	4798      	blx	r3
 8008db4:	6923      	ldr	r3, [r4, #16]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	6123      	str	r3, [r4, #16]
 8008dba:	e6ec      	b.n	8008b96 <_scanf_float+0x7a>
 8008dbc:	1e6b      	subs	r3, r5, #1
 8008dbe:	2b06      	cmp	r3, #6
 8008dc0:	d825      	bhi.n	8008e0e <_scanf_float+0x2f2>
 8008dc2:	2d02      	cmp	r5, #2
 8008dc4:	d836      	bhi.n	8008e34 <_scanf_float+0x318>
 8008dc6:	455e      	cmp	r6, fp
 8008dc8:	f67f aee8 	bls.w	8008b9c <_scanf_float+0x80>
 8008dcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008dd0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dd4:	463a      	mov	r2, r7
 8008dd6:	4640      	mov	r0, r8
 8008dd8:	4798      	blx	r3
 8008dda:	6923      	ldr	r3, [r4, #16]
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	6123      	str	r3, [r4, #16]
 8008de0:	e7f1      	b.n	8008dc6 <_scanf_float+0x2aa>
 8008de2:	9802      	ldr	r0, [sp, #8]
 8008de4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008de8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008dec:	9002      	str	r0, [sp, #8]
 8008dee:	463a      	mov	r2, r7
 8008df0:	4640      	mov	r0, r8
 8008df2:	4798      	blx	r3
 8008df4:	6923      	ldr	r3, [r4, #16]
 8008df6:	3b01      	subs	r3, #1
 8008df8:	6123      	str	r3, [r4, #16]
 8008dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dfe:	fa5f fa8a 	uxtb.w	sl, sl
 8008e02:	f1ba 0f02 	cmp.w	sl, #2
 8008e06:	d1ec      	bne.n	8008de2 <_scanf_float+0x2c6>
 8008e08:	3d03      	subs	r5, #3
 8008e0a:	b2ed      	uxtb	r5, r5
 8008e0c:	1b76      	subs	r6, r6, r5
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	05da      	lsls	r2, r3, #23
 8008e12:	d52f      	bpl.n	8008e74 <_scanf_float+0x358>
 8008e14:	055b      	lsls	r3, r3, #21
 8008e16:	d510      	bpl.n	8008e3a <_scanf_float+0x31e>
 8008e18:	455e      	cmp	r6, fp
 8008e1a:	f67f aebf 	bls.w	8008b9c <_scanf_float+0x80>
 8008e1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e26:	463a      	mov	r2, r7
 8008e28:	4640      	mov	r0, r8
 8008e2a:	4798      	blx	r3
 8008e2c:	6923      	ldr	r3, [r4, #16]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	6123      	str	r3, [r4, #16]
 8008e32:	e7f1      	b.n	8008e18 <_scanf_float+0x2fc>
 8008e34:	46aa      	mov	sl, r5
 8008e36:	9602      	str	r6, [sp, #8]
 8008e38:	e7df      	b.n	8008dfa <_scanf_float+0x2de>
 8008e3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008e3e:	6923      	ldr	r3, [r4, #16]
 8008e40:	2965      	cmp	r1, #101	; 0x65
 8008e42:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e46:	f106 35ff 	add.w	r5, r6, #4294967295
 8008e4a:	6123      	str	r3, [r4, #16]
 8008e4c:	d00c      	beq.n	8008e68 <_scanf_float+0x34c>
 8008e4e:	2945      	cmp	r1, #69	; 0x45
 8008e50:	d00a      	beq.n	8008e68 <_scanf_float+0x34c>
 8008e52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e56:	463a      	mov	r2, r7
 8008e58:	4640      	mov	r0, r8
 8008e5a:	4798      	blx	r3
 8008e5c:	6923      	ldr	r3, [r4, #16]
 8008e5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	1eb5      	subs	r5, r6, #2
 8008e66:	6123      	str	r3, [r4, #16]
 8008e68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e6c:	463a      	mov	r2, r7
 8008e6e:	4640      	mov	r0, r8
 8008e70:	4798      	blx	r3
 8008e72:	462e      	mov	r6, r5
 8008e74:	6825      	ldr	r5, [r4, #0]
 8008e76:	f015 0510 	ands.w	r5, r5, #16
 8008e7a:	d14e      	bne.n	8008f1a <_scanf_float+0x3fe>
 8008e7c:	7035      	strb	r5, [r6, #0]
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e88:	d119      	bne.n	8008ebe <_scanf_float+0x3a2>
 8008e8a:	9b01      	ldr	r3, [sp, #4]
 8008e8c:	454b      	cmp	r3, r9
 8008e8e:	eba3 0209 	sub.w	r2, r3, r9
 8008e92:	d121      	bne.n	8008ed8 <_scanf_float+0x3bc>
 8008e94:	2200      	movs	r2, #0
 8008e96:	4659      	mov	r1, fp
 8008e98:	4640      	mov	r0, r8
 8008e9a:	f000 fe53 	bl	8009b44 <_strtod_r>
 8008e9e:	6822      	ldr	r2, [r4, #0]
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	f012 0f02 	tst.w	r2, #2
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	d021      	beq.n	8008eee <_scanf_float+0x3d2>
 8008eaa:	9903      	ldr	r1, [sp, #12]
 8008eac:	1d1a      	adds	r2, r3, #4
 8008eae:	600a      	str	r2, [r1, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	ed83 0b00 	vstr	d0, [r3]
 8008eb6:	68e3      	ldr	r3, [r4, #12]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	60e3      	str	r3, [r4, #12]
 8008ebc:	e66f      	b.n	8008b9e <_scanf_float+0x82>
 8008ebe:	9b04      	ldr	r3, [sp, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d0e7      	beq.n	8008e94 <_scanf_float+0x378>
 8008ec4:	9905      	ldr	r1, [sp, #20]
 8008ec6:	230a      	movs	r3, #10
 8008ec8:	462a      	mov	r2, r5
 8008eca:	3101      	adds	r1, #1
 8008ecc:	4640      	mov	r0, r8
 8008ece:	f000 fec1 	bl	8009c54 <_strtol_r>
 8008ed2:	9b04      	ldr	r3, [sp, #16]
 8008ed4:	9e05      	ldr	r6, [sp, #20]
 8008ed6:	1ac2      	subs	r2, r0, r3
 8008ed8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008edc:	429e      	cmp	r6, r3
 8008ede:	bf28      	it	cs
 8008ee0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008ee4:	490e      	ldr	r1, [pc, #56]	; (8008f20 <_scanf_float+0x404>)
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f000 f83c 	bl	8008f64 <siprintf>
 8008eec:	e7d2      	b.n	8008e94 <_scanf_float+0x378>
 8008eee:	9903      	ldr	r1, [sp, #12]
 8008ef0:	f012 0f04 	tst.w	r2, #4
 8008ef4:	f103 0204 	add.w	r2, r3, #4
 8008ef8:	600a      	str	r2, [r1, #0]
 8008efa:	d1d9      	bne.n	8008eb0 <_scanf_float+0x394>
 8008efc:	eeb4 0b40 	vcmp.f64	d0, d0
 8008f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f04:	681e      	ldr	r6, [r3, #0]
 8008f06:	d705      	bvc.n	8008f14 <_scanf_float+0x3f8>
 8008f08:	4806      	ldr	r0, [pc, #24]	; (8008f24 <_scanf_float+0x408>)
 8008f0a:	f000 f825 	bl	8008f58 <nanf>
 8008f0e:	ed86 0a00 	vstr	s0, [r6]
 8008f12:	e7d0      	b.n	8008eb6 <_scanf_float+0x39a>
 8008f14:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008f18:	e7f9      	b.n	8008f0e <_scanf_float+0x3f2>
 8008f1a:	2500      	movs	r5, #0
 8008f1c:	e63f      	b.n	8008b9e <_scanf_float+0x82>
 8008f1e:	bf00      	nop
 8008f20:	0800ca34 	.word	0x0800ca34
 8008f24:	0800cea8 	.word	0x0800cea8

08008f28 <iprintf>:
 8008f28:	b40f      	push	{r0, r1, r2, r3}
 8008f2a:	4b0a      	ldr	r3, [pc, #40]	; (8008f54 <iprintf+0x2c>)
 8008f2c:	b513      	push	{r0, r1, r4, lr}
 8008f2e:	681c      	ldr	r4, [r3, #0]
 8008f30:	b124      	cbz	r4, 8008f3c <iprintf+0x14>
 8008f32:	69a3      	ldr	r3, [r4, #24]
 8008f34:	b913      	cbnz	r3, 8008f3c <iprintf+0x14>
 8008f36:	4620      	mov	r0, r4
 8008f38:	f001 fce0 	bl	800a8fc <__sinit>
 8008f3c:	ab05      	add	r3, sp, #20
 8008f3e:	9a04      	ldr	r2, [sp, #16]
 8008f40:	68a1      	ldr	r1, [r4, #8]
 8008f42:	9301      	str	r3, [sp, #4]
 8008f44:	4620      	mov	r0, r4
 8008f46:	f003 f84f 	bl	800bfe8 <_vfiprintf_r>
 8008f4a:	b002      	add	sp, #8
 8008f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f50:	b004      	add	sp, #16
 8008f52:	4770      	bx	lr
 8008f54:	24000038 	.word	0x24000038

08008f58 <nanf>:
 8008f58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008f60 <nanf+0x8>
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	7fc00000 	.word	0x7fc00000

08008f64 <siprintf>:
 8008f64:	b40e      	push	{r1, r2, r3}
 8008f66:	b500      	push	{lr}
 8008f68:	b09c      	sub	sp, #112	; 0x70
 8008f6a:	ab1d      	add	r3, sp, #116	; 0x74
 8008f6c:	9002      	str	r0, [sp, #8]
 8008f6e:	9006      	str	r0, [sp, #24]
 8008f70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f74:	4809      	ldr	r0, [pc, #36]	; (8008f9c <siprintf+0x38>)
 8008f76:	9107      	str	r1, [sp, #28]
 8008f78:	9104      	str	r1, [sp, #16]
 8008f7a:	4909      	ldr	r1, [pc, #36]	; (8008fa0 <siprintf+0x3c>)
 8008f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f80:	9105      	str	r1, [sp, #20]
 8008f82:	6800      	ldr	r0, [r0, #0]
 8008f84:	9301      	str	r3, [sp, #4]
 8008f86:	a902      	add	r1, sp, #8
 8008f88:	f002 ff04 	bl	800bd94 <_svfiprintf_r>
 8008f8c:	9b02      	ldr	r3, [sp, #8]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	701a      	strb	r2, [r3, #0]
 8008f92:	b01c      	add	sp, #112	; 0x70
 8008f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f98:	b003      	add	sp, #12
 8008f9a:	4770      	bx	lr
 8008f9c:	24000038 	.word	0x24000038
 8008fa0:	ffff0208 	.word	0xffff0208

08008fa4 <sulp>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	460d      	mov	r5, r1
 8008faa:	4616      	mov	r6, r2
 8008fac:	ec45 4b10 	vmov	d0, r4, r5
 8008fb0:	f002 fc52 	bl	800b858 <__ulp>
 8008fb4:	b17e      	cbz	r6, 8008fd6 <sulp+0x32>
 8008fb6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008fba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	dd09      	ble.n	8008fd6 <sulp+0x32>
 8008fc2:	051b      	lsls	r3, r3, #20
 8008fc4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008fc8:	2000      	movs	r0, #0
 8008fca:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008fce:	ec41 0b17 	vmov	d7, r0, r1
 8008fd2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}

08008fd8 <_strtod_l>:
 8008fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	ed2d 8b0e 	vpush	{d8-d14}
 8008fe0:	b097      	sub	sp, #92	; 0x5c
 8008fe2:	461f      	mov	r7, r3
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	9312      	str	r3, [sp, #72]	; 0x48
 8008fe8:	4ba1      	ldr	r3, [pc, #644]	; (8009270 <_strtod_l+0x298>)
 8008fea:	920d      	str	r2, [sp, #52]	; 0x34
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	9307      	str	r3, [sp, #28]
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	468b      	mov	fp, r1
 8008ff6:	f7f7 f97b 	bl	80002f0 <strlen>
 8008ffa:	f04f 0800 	mov.w	r8, #0
 8008ffe:	4605      	mov	r5, r0
 8009000:	f04f 0900 	mov.w	r9, #0
 8009004:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009008:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800900a:	7813      	ldrb	r3, [r2, #0]
 800900c:	2b2b      	cmp	r3, #43	; 0x2b
 800900e:	d04d      	beq.n	80090ac <_strtod_l+0xd4>
 8009010:	d83a      	bhi.n	8009088 <_strtod_l+0xb0>
 8009012:	2b0d      	cmp	r3, #13
 8009014:	d833      	bhi.n	800907e <_strtod_l+0xa6>
 8009016:	2b08      	cmp	r3, #8
 8009018:	d833      	bhi.n	8009082 <_strtod_l+0xaa>
 800901a:	2b00      	cmp	r3, #0
 800901c:	d03d      	beq.n	800909a <_strtod_l+0xc2>
 800901e:	2300      	movs	r3, #0
 8009020:	9308      	str	r3, [sp, #32]
 8009022:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8009024:	7833      	ldrb	r3, [r6, #0]
 8009026:	2b30      	cmp	r3, #48	; 0x30
 8009028:	f040 80b0 	bne.w	800918c <_strtod_l+0x1b4>
 800902c:	7873      	ldrb	r3, [r6, #1]
 800902e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009032:	2b58      	cmp	r3, #88	; 0x58
 8009034:	d167      	bne.n	8009106 <_strtod_l+0x12e>
 8009036:	9b08      	ldr	r3, [sp, #32]
 8009038:	9301      	str	r3, [sp, #4]
 800903a:	ab12      	add	r3, sp, #72	; 0x48
 800903c:	9702      	str	r7, [sp, #8]
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	4a8c      	ldr	r2, [pc, #560]	; (8009274 <_strtod_l+0x29c>)
 8009042:	ab13      	add	r3, sp, #76	; 0x4c
 8009044:	a911      	add	r1, sp, #68	; 0x44
 8009046:	4620      	mov	r0, r4
 8009048:	f001 fd5c 	bl	800ab04 <__gethex>
 800904c:	f010 0507 	ands.w	r5, r0, #7
 8009050:	4607      	mov	r7, r0
 8009052:	d005      	beq.n	8009060 <_strtod_l+0x88>
 8009054:	2d06      	cmp	r5, #6
 8009056:	d12b      	bne.n	80090b0 <_strtod_l+0xd8>
 8009058:	3601      	adds	r6, #1
 800905a:	2300      	movs	r3, #0
 800905c:	9611      	str	r6, [sp, #68]	; 0x44
 800905e:	9308      	str	r3, [sp, #32]
 8009060:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009062:	2b00      	cmp	r3, #0
 8009064:	f040 854e 	bne.w	8009b04 <_strtod_l+0xb2c>
 8009068:	9b08      	ldr	r3, [sp, #32]
 800906a:	b1e3      	cbz	r3, 80090a6 <_strtod_l+0xce>
 800906c:	ec49 8b17 	vmov	d7, r8, r9
 8009070:	eeb1 0b47 	vneg.f64	d0, d7
 8009074:	b017      	add	sp, #92	; 0x5c
 8009076:	ecbd 8b0e 	vpop	{d8-d14}
 800907a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800907e:	2b20      	cmp	r3, #32
 8009080:	d1cd      	bne.n	800901e <_strtod_l+0x46>
 8009082:	3201      	adds	r2, #1
 8009084:	9211      	str	r2, [sp, #68]	; 0x44
 8009086:	e7bf      	b.n	8009008 <_strtod_l+0x30>
 8009088:	2b2d      	cmp	r3, #45	; 0x2d
 800908a:	d1c8      	bne.n	800901e <_strtod_l+0x46>
 800908c:	2301      	movs	r3, #1
 800908e:	9308      	str	r3, [sp, #32]
 8009090:	1c53      	adds	r3, r2, #1
 8009092:	9311      	str	r3, [sp, #68]	; 0x44
 8009094:	7853      	ldrb	r3, [r2, #1]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1c3      	bne.n	8009022 <_strtod_l+0x4a>
 800909a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800909c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f040 852d 	bne.w	8009b00 <_strtod_l+0xb28>
 80090a6:	ec49 8b10 	vmov	d0, r8, r9
 80090aa:	e7e3      	b.n	8009074 <_strtod_l+0x9c>
 80090ac:	2300      	movs	r3, #0
 80090ae:	e7ee      	b.n	800908e <_strtod_l+0xb6>
 80090b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090b2:	b13a      	cbz	r2, 80090c4 <_strtod_l+0xec>
 80090b4:	2135      	movs	r1, #53	; 0x35
 80090b6:	a814      	add	r0, sp, #80	; 0x50
 80090b8:	f002 fcd6 	bl	800ba68 <__copybits>
 80090bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80090be:	4620      	mov	r0, r4
 80090c0:	f002 f898 	bl	800b1f4 <_Bfree>
 80090c4:	3d01      	subs	r5, #1
 80090c6:	2d04      	cmp	r5, #4
 80090c8:	d806      	bhi.n	80090d8 <_strtod_l+0x100>
 80090ca:	e8df f005 	tbb	[pc, r5]
 80090ce:	030a      	.short	0x030a
 80090d0:	1714      	.short	0x1714
 80090d2:	0a          	.byte	0x0a
 80090d3:	00          	.byte	0x00
 80090d4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80090d8:	073f      	lsls	r7, r7, #28
 80090da:	d5c1      	bpl.n	8009060 <_strtod_l+0x88>
 80090dc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80090e0:	e7be      	b.n	8009060 <_strtod_l+0x88>
 80090e2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80090e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80090ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80090f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80090f4:	e7f0      	b.n	80090d8 <_strtod_l+0x100>
 80090f6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8009278 <_strtod_l+0x2a0>
 80090fa:	e7ed      	b.n	80090d8 <_strtod_l+0x100>
 80090fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009100:	f04f 38ff 	mov.w	r8, #4294967295
 8009104:	e7e8      	b.n	80090d8 <_strtod_l+0x100>
 8009106:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	9211      	str	r2, [sp, #68]	; 0x44
 800910c:	785b      	ldrb	r3, [r3, #1]
 800910e:	2b30      	cmp	r3, #48	; 0x30
 8009110:	d0f9      	beq.n	8009106 <_strtod_l+0x12e>
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0a4      	beq.n	8009060 <_strtod_l+0x88>
 8009116:	2301      	movs	r3, #1
 8009118:	f04f 0a00 	mov.w	sl, #0
 800911c:	9304      	str	r3, [sp, #16]
 800911e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009120:	930a      	str	r3, [sp, #40]	; 0x28
 8009122:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009126:	f8cd a018 	str.w	sl, [sp, #24]
 800912a:	220a      	movs	r2, #10
 800912c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800912e:	7807      	ldrb	r7, [r0, #0]
 8009130:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009134:	b2d9      	uxtb	r1, r3
 8009136:	2909      	cmp	r1, #9
 8009138:	d92a      	bls.n	8009190 <_strtod_l+0x1b8>
 800913a:	9907      	ldr	r1, [sp, #28]
 800913c:	462a      	mov	r2, r5
 800913e:	f003 f8de 	bl	800c2fe <strncmp>
 8009142:	2800      	cmp	r0, #0
 8009144:	d033      	beq.n	80091ae <_strtod_l+0x1d6>
 8009146:	2000      	movs	r0, #0
 8009148:	9b06      	ldr	r3, [sp, #24]
 800914a:	463a      	mov	r2, r7
 800914c:	4601      	mov	r1, r0
 800914e:	4607      	mov	r7, r0
 8009150:	2a65      	cmp	r2, #101	; 0x65
 8009152:	d001      	beq.n	8009158 <_strtod_l+0x180>
 8009154:	2a45      	cmp	r2, #69	; 0x45
 8009156:	d117      	bne.n	8009188 <_strtod_l+0x1b0>
 8009158:	b91b      	cbnz	r3, 8009162 <_strtod_l+0x18a>
 800915a:	9b04      	ldr	r3, [sp, #16]
 800915c:	4303      	orrs	r3, r0
 800915e:	d09c      	beq.n	800909a <_strtod_l+0xc2>
 8009160:	2300      	movs	r3, #0
 8009162:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8009166:	f10b 0201 	add.w	r2, fp, #1
 800916a:	9211      	str	r2, [sp, #68]	; 0x44
 800916c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8009170:	2a2b      	cmp	r2, #43	; 0x2b
 8009172:	d071      	beq.n	8009258 <_strtod_l+0x280>
 8009174:	2a2d      	cmp	r2, #45	; 0x2d
 8009176:	d077      	beq.n	8009268 <_strtod_l+0x290>
 8009178:	f04f 0e00 	mov.w	lr, #0
 800917c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009180:	2d09      	cmp	r5, #9
 8009182:	d97f      	bls.n	8009284 <_strtod_l+0x2ac>
 8009184:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009188:	2500      	movs	r5, #0
 800918a:	e09b      	b.n	80092c4 <_strtod_l+0x2ec>
 800918c:	2300      	movs	r3, #0
 800918e:	e7c3      	b.n	8009118 <_strtod_l+0x140>
 8009190:	9906      	ldr	r1, [sp, #24]
 8009192:	2908      	cmp	r1, #8
 8009194:	bfdd      	ittte	le
 8009196:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009198:	fb02 3301 	mlale	r3, r2, r1, r3
 800919c:	9309      	strle	r3, [sp, #36]	; 0x24
 800919e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80091a2:	9b06      	ldr	r3, [sp, #24]
 80091a4:	3001      	adds	r0, #1
 80091a6:	3301      	adds	r3, #1
 80091a8:	9306      	str	r3, [sp, #24]
 80091aa:	9011      	str	r0, [sp, #68]	; 0x44
 80091ac:	e7be      	b.n	800912c <_strtod_l+0x154>
 80091ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091b0:	195a      	adds	r2, r3, r5
 80091b2:	9211      	str	r2, [sp, #68]	; 0x44
 80091b4:	5d5a      	ldrb	r2, [r3, r5]
 80091b6:	9b06      	ldr	r3, [sp, #24]
 80091b8:	b3a3      	cbz	r3, 8009224 <_strtod_l+0x24c>
 80091ba:	4607      	mov	r7, r0
 80091bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80091c0:	2909      	cmp	r1, #9
 80091c2:	d912      	bls.n	80091ea <_strtod_l+0x212>
 80091c4:	2101      	movs	r1, #1
 80091c6:	e7c3      	b.n	8009150 <_strtod_l+0x178>
 80091c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091ca:	1c5a      	adds	r2, r3, #1
 80091cc:	9211      	str	r2, [sp, #68]	; 0x44
 80091ce:	785a      	ldrb	r2, [r3, #1]
 80091d0:	3001      	adds	r0, #1
 80091d2:	2a30      	cmp	r2, #48	; 0x30
 80091d4:	d0f8      	beq.n	80091c8 <_strtod_l+0x1f0>
 80091d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80091da:	2b08      	cmp	r3, #8
 80091dc:	f200 8497 	bhi.w	8009b0e <_strtod_l+0xb36>
 80091e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091e2:	930a      	str	r3, [sp, #40]	; 0x28
 80091e4:	4607      	mov	r7, r0
 80091e6:	2000      	movs	r0, #0
 80091e8:	4603      	mov	r3, r0
 80091ea:	3a30      	subs	r2, #48	; 0x30
 80091ec:	f100 0101 	add.w	r1, r0, #1
 80091f0:	d012      	beq.n	8009218 <_strtod_l+0x240>
 80091f2:	440f      	add	r7, r1
 80091f4:	eb00 0c03 	add.w	ip, r0, r3
 80091f8:	4619      	mov	r1, r3
 80091fa:	250a      	movs	r5, #10
 80091fc:	4561      	cmp	r1, ip
 80091fe:	d113      	bne.n	8009228 <_strtod_l+0x250>
 8009200:	1819      	adds	r1, r3, r0
 8009202:	2908      	cmp	r1, #8
 8009204:	f103 0301 	add.w	r3, r3, #1
 8009208:	4403      	add	r3, r0
 800920a:	dc1c      	bgt.n	8009246 <_strtod_l+0x26e>
 800920c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800920e:	210a      	movs	r1, #10
 8009210:	fb01 2200 	mla	r2, r1, r0, r2
 8009214:	9209      	str	r2, [sp, #36]	; 0x24
 8009216:	2100      	movs	r1, #0
 8009218:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800921a:	1c50      	adds	r0, r2, #1
 800921c:	9011      	str	r0, [sp, #68]	; 0x44
 800921e:	7852      	ldrb	r2, [r2, #1]
 8009220:	4608      	mov	r0, r1
 8009222:	e7cb      	b.n	80091bc <_strtod_l+0x1e4>
 8009224:	9806      	ldr	r0, [sp, #24]
 8009226:	e7d4      	b.n	80091d2 <_strtod_l+0x1fa>
 8009228:	2908      	cmp	r1, #8
 800922a:	dc04      	bgt.n	8009236 <_strtod_l+0x25e>
 800922c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800922e:	436e      	muls	r6, r5
 8009230:	9609      	str	r6, [sp, #36]	; 0x24
 8009232:	3101      	adds	r1, #1
 8009234:	e7e2      	b.n	80091fc <_strtod_l+0x224>
 8009236:	f101 0e01 	add.w	lr, r1, #1
 800923a:	f1be 0f10 	cmp.w	lr, #16
 800923e:	bfd8      	it	le
 8009240:	fb05 fa0a 	mulle.w	sl, r5, sl
 8009244:	e7f5      	b.n	8009232 <_strtod_l+0x25a>
 8009246:	2b10      	cmp	r3, #16
 8009248:	bfdc      	itt	le
 800924a:	210a      	movle	r1, #10
 800924c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8009250:	e7e1      	b.n	8009216 <_strtod_l+0x23e>
 8009252:	2700      	movs	r7, #0
 8009254:	2101      	movs	r1, #1
 8009256:	e780      	b.n	800915a <_strtod_l+0x182>
 8009258:	f04f 0e00 	mov.w	lr, #0
 800925c:	f10b 0202 	add.w	r2, fp, #2
 8009260:	9211      	str	r2, [sp, #68]	; 0x44
 8009262:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8009266:	e789      	b.n	800917c <_strtod_l+0x1a4>
 8009268:	f04f 0e01 	mov.w	lr, #1
 800926c:	e7f6      	b.n	800925c <_strtod_l+0x284>
 800926e:	bf00      	nop
 8009270:	0800ccec 	.word	0x0800ccec
 8009274:	0800ca3c 	.word	0x0800ca3c
 8009278:	7ff00000 	.word	0x7ff00000
 800927c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800927e:	1c55      	adds	r5, r2, #1
 8009280:	9511      	str	r5, [sp, #68]	; 0x44
 8009282:	7852      	ldrb	r2, [r2, #1]
 8009284:	2a30      	cmp	r2, #48	; 0x30
 8009286:	d0f9      	beq.n	800927c <_strtod_l+0x2a4>
 8009288:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800928c:	2d08      	cmp	r5, #8
 800928e:	f63f af7b 	bhi.w	8009188 <_strtod_l+0x1b0>
 8009292:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009296:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009298:	9207      	str	r2, [sp, #28]
 800929a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800929c:	1c55      	adds	r5, r2, #1
 800929e:	9511      	str	r5, [sp, #68]	; 0x44
 80092a0:	7852      	ldrb	r2, [r2, #1]
 80092a2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80092a6:	2e09      	cmp	r6, #9
 80092a8:	d937      	bls.n	800931a <_strtod_l+0x342>
 80092aa:	9e07      	ldr	r6, [sp, #28]
 80092ac:	1bad      	subs	r5, r5, r6
 80092ae:	2d08      	cmp	r5, #8
 80092b0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80092b4:	dc02      	bgt.n	80092bc <_strtod_l+0x2e4>
 80092b6:	4565      	cmp	r5, ip
 80092b8:	bfa8      	it	ge
 80092ba:	4665      	movge	r5, ip
 80092bc:	f1be 0f00 	cmp.w	lr, #0
 80092c0:	d000      	beq.n	80092c4 <_strtod_l+0x2ec>
 80092c2:	426d      	negs	r5, r5
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d14d      	bne.n	8009364 <_strtod_l+0x38c>
 80092c8:	9b04      	ldr	r3, [sp, #16]
 80092ca:	4303      	orrs	r3, r0
 80092cc:	f47f aec8 	bne.w	8009060 <_strtod_l+0x88>
 80092d0:	2900      	cmp	r1, #0
 80092d2:	f47f aee2 	bne.w	800909a <_strtod_l+0xc2>
 80092d6:	2a69      	cmp	r2, #105	; 0x69
 80092d8:	d027      	beq.n	800932a <_strtod_l+0x352>
 80092da:	dc24      	bgt.n	8009326 <_strtod_l+0x34e>
 80092dc:	2a49      	cmp	r2, #73	; 0x49
 80092de:	d024      	beq.n	800932a <_strtod_l+0x352>
 80092e0:	2a4e      	cmp	r2, #78	; 0x4e
 80092e2:	f47f aeda 	bne.w	800909a <_strtod_l+0xc2>
 80092e6:	4996      	ldr	r1, [pc, #600]	; (8009540 <_strtod_l+0x568>)
 80092e8:	a811      	add	r0, sp, #68	; 0x44
 80092ea:	f001 fe63 	bl	800afb4 <__match>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	f43f aed3 	beq.w	800909a <_strtod_l+0xc2>
 80092f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b28      	cmp	r3, #40	; 0x28
 80092fa:	d12d      	bne.n	8009358 <_strtod_l+0x380>
 80092fc:	4991      	ldr	r1, [pc, #580]	; (8009544 <_strtod_l+0x56c>)
 80092fe:	aa14      	add	r2, sp, #80	; 0x50
 8009300:	a811      	add	r0, sp, #68	; 0x44
 8009302:	f001 fe6b 	bl	800afdc <__hexnan>
 8009306:	2805      	cmp	r0, #5
 8009308:	d126      	bne.n	8009358 <_strtod_l+0x380>
 800930a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800930c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009310:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009314:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009318:	e6a2      	b.n	8009060 <_strtod_l+0x88>
 800931a:	250a      	movs	r5, #10
 800931c:	fb05 250c 	mla	r5, r5, ip, r2
 8009320:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8009324:	e7b9      	b.n	800929a <_strtod_l+0x2c2>
 8009326:	2a6e      	cmp	r2, #110	; 0x6e
 8009328:	e7db      	b.n	80092e2 <_strtod_l+0x30a>
 800932a:	4987      	ldr	r1, [pc, #540]	; (8009548 <_strtod_l+0x570>)
 800932c:	a811      	add	r0, sp, #68	; 0x44
 800932e:	f001 fe41 	bl	800afb4 <__match>
 8009332:	2800      	cmp	r0, #0
 8009334:	f43f aeb1 	beq.w	800909a <_strtod_l+0xc2>
 8009338:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800933a:	4984      	ldr	r1, [pc, #528]	; (800954c <_strtod_l+0x574>)
 800933c:	3b01      	subs	r3, #1
 800933e:	a811      	add	r0, sp, #68	; 0x44
 8009340:	9311      	str	r3, [sp, #68]	; 0x44
 8009342:	f001 fe37 	bl	800afb4 <__match>
 8009346:	b910      	cbnz	r0, 800934e <_strtod_l+0x376>
 8009348:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800934a:	3301      	adds	r3, #1
 800934c:	9311      	str	r3, [sp, #68]	; 0x44
 800934e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8009560 <_strtod_l+0x588>
 8009352:	f04f 0800 	mov.w	r8, #0
 8009356:	e683      	b.n	8009060 <_strtod_l+0x88>
 8009358:	487d      	ldr	r0, [pc, #500]	; (8009550 <_strtod_l+0x578>)
 800935a:	f002 ff75 	bl	800c248 <nan>
 800935e:	ec59 8b10 	vmov	r8, r9, d0
 8009362:	e67d      	b.n	8009060 <_strtod_l+0x88>
 8009364:	1bea      	subs	r2, r5, r7
 8009366:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800936a:	9207      	str	r2, [sp, #28]
 800936c:	9a06      	ldr	r2, [sp, #24]
 800936e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009372:	2a00      	cmp	r2, #0
 8009374:	bf08      	it	eq
 8009376:	461a      	moveq	r2, r3
 8009378:	2b10      	cmp	r3, #16
 800937a:	9206      	str	r2, [sp, #24]
 800937c:	461a      	mov	r2, r3
 800937e:	bfa8      	it	ge
 8009380:	2210      	movge	r2, #16
 8009382:	2b09      	cmp	r3, #9
 8009384:	ec59 8b17 	vmov	r8, r9, d7
 8009388:	dd0c      	ble.n	80093a4 <_strtod_l+0x3cc>
 800938a:	4972      	ldr	r1, [pc, #456]	; (8009554 <_strtod_l+0x57c>)
 800938c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009390:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8009394:	ee06 aa90 	vmov	s13, sl
 8009398:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800939c:	eea7 6b05 	vfma.f64	d6, d7, d5
 80093a0:	ec59 8b16 	vmov	r8, r9, d6
 80093a4:	2b0f      	cmp	r3, #15
 80093a6:	dc36      	bgt.n	8009416 <_strtod_l+0x43e>
 80093a8:	9907      	ldr	r1, [sp, #28]
 80093aa:	2900      	cmp	r1, #0
 80093ac:	f43f ae58 	beq.w	8009060 <_strtod_l+0x88>
 80093b0:	dd23      	ble.n	80093fa <_strtod_l+0x422>
 80093b2:	2916      	cmp	r1, #22
 80093b4:	dc0b      	bgt.n	80093ce <_strtod_l+0x3f6>
 80093b6:	4b67      	ldr	r3, [pc, #412]	; (8009554 <_strtod_l+0x57c>)
 80093b8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80093bc:	ed93 7b00 	vldr	d7, [r3]
 80093c0:	ec49 8b16 	vmov	d6, r8, r9
 80093c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80093c8:	ec59 8b17 	vmov	r8, r9, d7
 80093cc:	e648      	b.n	8009060 <_strtod_l+0x88>
 80093ce:	9807      	ldr	r0, [sp, #28]
 80093d0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80093d4:	4281      	cmp	r1, r0
 80093d6:	db1e      	blt.n	8009416 <_strtod_l+0x43e>
 80093d8:	4a5e      	ldr	r2, [pc, #376]	; (8009554 <_strtod_l+0x57c>)
 80093da:	f1c3 030f 	rsb	r3, r3, #15
 80093de:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80093e2:	ed91 7b00 	vldr	d7, [r1]
 80093e6:	ec49 8b16 	vmov	d6, r8, r9
 80093ea:	1ac3      	subs	r3, r0, r3
 80093ec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80093f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80093f4:	ed92 6b00 	vldr	d6, [r2]
 80093f8:	e7e4      	b.n	80093c4 <_strtod_l+0x3ec>
 80093fa:	9907      	ldr	r1, [sp, #28]
 80093fc:	3116      	adds	r1, #22
 80093fe:	db0a      	blt.n	8009416 <_strtod_l+0x43e>
 8009400:	4b54      	ldr	r3, [pc, #336]	; (8009554 <_strtod_l+0x57c>)
 8009402:	1b7d      	subs	r5, r7, r5
 8009404:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009408:	ed95 7b00 	vldr	d7, [r5]
 800940c:	ec49 8b16 	vmov	d6, r8, r9
 8009410:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009414:	e7d8      	b.n	80093c8 <_strtod_l+0x3f0>
 8009416:	9907      	ldr	r1, [sp, #28]
 8009418:	1a9a      	subs	r2, r3, r2
 800941a:	440a      	add	r2, r1
 800941c:	2a00      	cmp	r2, #0
 800941e:	dd6f      	ble.n	8009500 <_strtod_l+0x528>
 8009420:	f012 000f 	ands.w	r0, r2, #15
 8009424:	d00a      	beq.n	800943c <_strtod_l+0x464>
 8009426:	494b      	ldr	r1, [pc, #300]	; (8009554 <_strtod_l+0x57c>)
 8009428:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800942c:	ed91 7b00 	vldr	d7, [r1]
 8009430:	ec49 8b16 	vmov	d6, r8, r9
 8009434:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009438:	ec59 8b17 	vmov	r8, r9, d7
 800943c:	f032 020f 	bics.w	r2, r2, #15
 8009440:	d04f      	beq.n	80094e2 <_strtod_l+0x50a>
 8009442:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8009446:	dd22      	ble.n	800948e <_strtod_l+0x4b6>
 8009448:	2500      	movs	r5, #0
 800944a:	462e      	mov	r6, r5
 800944c:	9506      	str	r5, [sp, #24]
 800944e:	462f      	mov	r7, r5
 8009450:	2322      	movs	r3, #34	; 0x22
 8009452:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8009560 <_strtod_l+0x588>
 8009456:	6023      	str	r3, [r4, #0]
 8009458:	f04f 0800 	mov.w	r8, #0
 800945c:	9b06      	ldr	r3, [sp, #24]
 800945e:	2b00      	cmp	r3, #0
 8009460:	f43f adfe 	beq.w	8009060 <_strtod_l+0x88>
 8009464:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009466:	4620      	mov	r0, r4
 8009468:	f001 fec4 	bl	800b1f4 <_Bfree>
 800946c:	4639      	mov	r1, r7
 800946e:	4620      	mov	r0, r4
 8009470:	f001 fec0 	bl	800b1f4 <_Bfree>
 8009474:	4631      	mov	r1, r6
 8009476:	4620      	mov	r0, r4
 8009478:	f001 febc 	bl	800b1f4 <_Bfree>
 800947c:	9906      	ldr	r1, [sp, #24]
 800947e:	4620      	mov	r0, r4
 8009480:	f001 feb8 	bl	800b1f4 <_Bfree>
 8009484:	4629      	mov	r1, r5
 8009486:	4620      	mov	r0, r4
 8009488:	f001 feb4 	bl	800b1f4 <_Bfree>
 800948c:	e5e8      	b.n	8009060 <_strtod_l+0x88>
 800948e:	2000      	movs	r0, #0
 8009490:	ec49 8b17 	vmov	d7, r8, r9
 8009494:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8009558 <_strtod_l+0x580>
 8009498:	1112      	asrs	r2, r2, #4
 800949a:	4601      	mov	r1, r0
 800949c:	2a01      	cmp	r2, #1
 800949e:	dc23      	bgt.n	80094e8 <_strtod_l+0x510>
 80094a0:	b108      	cbz	r0, 80094a6 <_strtod_l+0x4ce>
 80094a2:	ec59 8b17 	vmov	r8, r9, d7
 80094a6:	4a2c      	ldr	r2, [pc, #176]	; (8009558 <_strtod_l+0x580>)
 80094a8:	482c      	ldr	r0, [pc, #176]	; (800955c <_strtod_l+0x584>)
 80094aa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80094ae:	ed92 7b00 	vldr	d7, [r2]
 80094b2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80094b6:	ec49 8b16 	vmov	d6, r8, r9
 80094ba:	4a29      	ldr	r2, [pc, #164]	; (8009560 <_strtod_l+0x588>)
 80094bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80094c0:	ee17 1a90 	vmov	r1, s15
 80094c4:	400a      	ands	r2, r1
 80094c6:	4282      	cmp	r2, r0
 80094c8:	ec59 8b17 	vmov	r8, r9, d7
 80094cc:	d8bc      	bhi.n	8009448 <_strtod_l+0x470>
 80094ce:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80094d2:	4282      	cmp	r2, r0
 80094d4:	bf86      	itte	hi
 80094d6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009564 <_strtod_l+0x58c>
 80094da:	f04f 38ff 	movhi.w	r8, #4294967295
 80094de:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80094e2:	2200      	movs	r2, #0
 80094e4:	9204      	str	r2, [sp, #16]
 80094e6:	e078      	b.n	80095da <_strtod_l+0x602>
 80094e8:	07d6      	lsls	r6, r2, #31
 80094ea:	d504      	bpl.n	80094f6 <_strtod_l+0x51e>
 80094ec:	ed9c 6b00 	vldr	d6, [ip]
 80094f0:	2001      	movs	r0, #1
 80094f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80094f6:	3101      	adds	r1, #1
 80094f8:	1052      	asrs	r2, r2, #1
 80094fa:	f10c 0c08 	add.w	ip, ip, #8
 80094fe:	e7cd      	b.n	800949c <_strtod_l+0x4c4>
 8009500:	d0ef      	beq.n	80094e2 <_strtod_l+0x50a>
 8009502:	4252      	negs	r2, r2
 8009504:	f012 000f 	ands.w	r0, r2, #15
 8009508:	d00a      	beq.n	8009520 <_strtod_l+0x548>
 800950a:	4912      	ldr	r1, [pc, #72]	; (8009554 <_strtod_l+0x57c>)
 800950c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009510:	ed91 7b00 	vldr	d7, [r1]
 8009514:	ec49 8b16 	vmov	d6, r8, r9
 8009518:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800951c:	ec59 8b17 	vmov	r8, r9, d7
 8009520:	1112      	asrs	r2, r2, #4
 8009522:	d0de      	beq.n	80094e2 <_strtod_l+0x50a>
 8009524:	2a1f      	cmp	r2, #31
 8009526:	dd1f      	ble.n	8009568 <_strtod_l+0x590>
 8009528:	2500      	movs	r5, #0
 800952a:	462e      	mov	r6, r5
 800952c:	9506      	str	r5, [sp, #24]
 800952e:	462f      	mov	r7, r5
 8009530:	2322      	movs	r3, #34	; 0x22
 8009532:	f04f 0800 	mov.w	r8, #0
 8009536:	f04f 0900 	mov.w	r9, #0
 800953a:	6023      	str	r3, [r4, #0]
 800953c:	e78e      	b.n	800945c <_strtod_l+0x484>
 800953e:	bf00      	nop
 8009540:	0800ca0d 	.word	0x0800ca0d
 8009544:	0800ca50 	.word	0x0800ca50
 8009548:	0800ca05 	.word	0x0800ca05
 800954c:	0800cb94 	.word	0x0800cb94
 8009550:	0800cea8 	.word	0x0800cea8
 8009554:	0800cd88 	.word	0x0800cd88
 8009558:	0800cd60 	.word	0x0800cd60
 800955c:	7ca00000 	.word	0x7ca00000
 8009560:	7ff00000 	.word	0x7ff00000
 8009564:	7fefffff 	.word	0x7fefffff
 8009568:	f012 0110 	ands.w	r1, r2, #16
 800956c:	bf18      	it	ne
 800956e:	216a      	movne	r1, #106	; 0x6a
 8009570:	9104      	str	r1, [sp, #16]
 8009572:	ec49 8b17 	vmov	d7, r8, r9
 8009576:	49be      	ldr	r1, [pc, #760]	; (8009870 <_strtod_l+0x898>)
 8009578:	2000      	movs	r0, #0
 800957a:	07d6      	lsls	r6, r2, #31
 800957c:	d504      	bpl.n	8009588 <_strtod_l+0x5b0>
 800957e:	ed91 6b00 	vldr	d6, [r1]
 8009582:	2001      	movs	r0, #1
 8009584:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009588:	1052      	asrs	r2, r2, #1
 800958a:	f101 0108 	add.w	r1, r1, #8
 800958e:	d1f4      	bne.n	800957a <_strtod_l+0x5a2>
 8009590:	b108      	cbz	r0, 8009596 <_strtod_l+0x5be>
 8009592:	ec59 8b17 	vmov	r8, r9, d7
 8009596:	9a04      	ldr	r2, [sp, #16]
 8009598:	b1c2      	cbz	r2, 80095cc <_strtod_l+0x5f4>
 800959a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800959e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80095a2:	2a00      	cmp	r2, #0
 80095a4:	4648      	mov	r0, r9
 80095a6:	dd11      	ble.n	80095cc <_strtod_l+0x5f4>
 80095a8:	2a1f      	cmp	r2, #31
 80095aa:	f340 812e 	ble.w	800980a <_strtod_l+0x832>
 80095ae:	2a34      	cmp	r2, #52	; 0x34
 80095b0:	bfde      	ittt	le
 80095b2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80095b6:	f04f 32ff 	movle.w	r2, #4294967295
 80095ba:	fa02 f101 	lslle.w	r1, r2, r1
 80095be:	f04f 0800 	mov.w	r8, #0
 80095c2:	bfcc      	ite	gt
 80095c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80095c8:	ea01 0900 	andle.w	r9, r1, r0
 80095cc:	ec49 8b17 	vmov	d7, r8, r9
 80095d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80095d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d8:	d0a6      	beq.n	8009528 <_strtod_l+0x550>
 80095da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095dc:	9200      	str	r2, [sp, #0]
 80095de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095e0:	9a06      	ldr	r2, [sp, #24]
 80095e2:	4620      	mov	r0, r4
 80095e4:	f001 fe6e 	bl	800b2c4 <__s2b>
 80095e8:	9006      	str	r0, [sp, #24]
 80095ea:	2800      	cmp	r0, #0
 80095ec:	f43f af2c 	beq.w	8009448 <_strtod_l+0x470>
 80095f0:	9b07      	ldr	r3, [sp, #28]
 80095f2:	1b7d      	subs	r5, r7, r5
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	bfb4      	ite	lt
 80095f8:	462b      	movlt	r3, r5
 80095fa:	2300      	movge	r3, #0
 80095fc:	9309      	str	r3, [sp, #36]	; 0x24
 80095fe:	9b07      	ldr	r3, [sp, #28]
 8009600:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8009850 <_strtod_l+0x878>
 8009604:	ed9f ab94 	vldr	d10, [pc, #592]	; 8009858 <_strtod_l+0x880>
 8009608:	ed9f bb95 	vldr	d11, [pc, #596]	; 8009860 <_strtod_l+0x888>
 800960c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009610:	2500      	movs	r5, #0
 8009612:	930c      	str	r3, [sp, #48]	; 0x30
 8009614:	462e      	mov	r6, r5
 8009616:	9b06      	ldr	r3, [sp, #24]
 8009618:	4620      	mov	r0, r4
 800961a:	6859      	ldr	r1, [r3, #4]
 800961c:	f001 fdaa 	bl	800b174 <_Balloc>
 8009620:	4607      	mov	r7, r0
 8009622:	2800      	cmp	r0, #0
 8009624:	f43f af14 	beq.w	8009450 <_strtod_l+0x478>
 8009628:	9b06      	ldr	r3, [sp, #24]
 800962a:	691a      	ldr	r2, [r3, #16]
 800962c:	3202      	adds	r2, #2
 800962e:	f103 010c 	add.w	r1, r3, #12
 8009632:	0092      	lsls	r2, r2, #2
 8009634:	300c      	adds	r0, #12
 8009636:	f001 fd8f 	bl	800b158 <memcpy>
 800963a:	ec49 8b10 	vmov	d0, r8, r9
 800963e:	aa14      	add	r2, sp, #80	; 0x50
 8009640:	a913      	add	r1, sp, #76	; 0x4c
 8009642:	4620      	mov	r0, r4
 8009644:	f002 f984 	bl	800b950 <__d2b>
 8009648:	ec49 8b18 	vmov	d8, r8, r9
 800964c:	9012      	str	r0, [sp, #72]	; 0x48
 800964e:	2800      	cmp	r0, #0
 8009650:	f43f aefe 	beq.w	8009450 <_strtod_l+0x478>
 8009654:	2101      	movs	r1, #1
 8009656:	4620      	mov	r0, r4
 8009658:	f001 fece 	bl	800b3f8 <__i2b>
 800965c:	4606      	mov	r6, r0
 800965e:	2800      	cmp	r0, #0
 8009660:	f43f aef6 	beq.w	8009450 <_strtod_l+0x478>
 8009664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009666:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009668:	2b00      	cmp	r3, #0
 800966a:	bfab      	itete	ge
 800966c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800966e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8009670:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8009674:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8009678:	bfac      	ite	ge
 800967a:	eb03 0b02 	addge.w	fp, r3, r2
 800967e:	eba2 0a03 	sublt.w	sl, r2, r3
 8009682:	9a04      	ldr	r2, [sp, #16]
 8009684:	1a9b      	subs	r3, r3, r2
 8009686:	440b      	add	r3, r1
 8009688:	4a7a      	ldr	r2, [pc, #488]	; (8009874 <_strtod_l+0x89c>)
 800968a:	3b01      	subs	r3, #1
 800968c:	4293      	cmp	r3, r2
 800968e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8009692:	f280 80cd 	bge.w	8009830 <_strtod_l+0x858>
 8009696:	1ad2      	subs	r2, r2, r3
 8009698:	2a1f      	cmp	r2, #31
 800969a:	eba1 0102 	sub.w	r1, r1, r2
 800969e:	f04f 0001 	mov.w	r0, #1
 80096a2:	f300 80b9 	bgt.w	8009818 <_strtod_l+0x840>
 80096a6:	fa00 f302 	lsl.w	r3, r0, r2
 80096aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80096ac:	2300      	movs	r3, #0
 80096ae:	930a      	str	r3, [sp, #40]	; 0x28
 80096b0:	eb0b 0301 	add.w	r3, fp, r1
 80096b4:	9a04      	ldr	r2, [sp, #16]
 80096b6:	459b      	cmp	fp, r3
 80096b8:	448a      	add	sl, r1
 80096ba:	4492      	add	sl, r2
 80096bc:	465a      	mov	r2, fp
 80096be:	bfa8      	it	ge
 80096c0:	461a      	movge	r2, r3
 80096c2:	4552      	cmp	r2, sl
 80096c4:	bfa8      	it	ge
 80096c6:	4652      	movge	r2, sl
 80096c8:	2a00      	cmp	r2, #0
 80096ca:	bfc2      	ittt	gt
 80096cc:	1a9b      	subgt	r3, r3, r2
 80096ce:	ebaa 0a02 	subgt.w	sl, sl, r2
 80096d2:	ebab 0b02 	subgt.w	fp, fp, r2
 80096d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096d8:	2a00      	cmp	r2, #0
 80096da:	dd18      	ble.n	800970e <_strtod_l+0x736>
 80096dc:	4631      	mov	r1, r6
 80096de:	4620      	mov	r0, r4
 80096e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80096e2:	f001 ff49 	bl	800b578 <__pow5mult>
 80096e6:	4606      	mov	r6, r0
 80096e8:	2800      	cmp	r0, #0
 80096ea:	f43f aeb1 	beq.w	8009450 <_strtod_l+0x478>
 80096ee:	4601      	mov	r1, r0
 80096f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096f2:	4620      	mov	r0, r4
 80096f4:	f001 fe96 	bl	800b424 <__multiply>
 80096f8:	900e      	str	r0, [sp, #56]	; 0x38
 80096fa:	2800      	cmp	r0, #0
 80096fc:	f43f aea8 	beq.w	8009450 <_strtod_l+0x478>
 8009700:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009702:	4620      	mov	r0, r4
 8009704:	f001 fd76 	bl	800b1f4 <_Bfree>
 8009708:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800970a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800970c:	9212      	str	r2, [sp, #72]	; 0x48
 800970e:	2b00      	cmp	r3, #0
 8009710:	f300 8093 	bgt.w	800983a <_strtod_l+0x862>
 8009714:	9b07      	ldr	r3, [sp, #28]
 8009716:	2b00      	cmp	r3, #0
 8009718:	dd08      	ble.n	800972c <_strtod_l+0x754>
 800971a:	4639      	mov	r1, r7
 800971c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800971e:	4620      	mov	r0, r4
 8009720:	f001 ff2a 	bl	800b578 <__pow5mult>
 8009724:	4607      	mov	r7, r0
 8009726:	2800      	cmp	r0, #0
 8009728:	f43f ae92 	beq.w	8009450 <_strtod_l+0x478>
 800972c:	f1ba 0f00 	cmp.w	sl, #0
 8009730:	dd08      	ble.n	8009744 <_strtod_l+0x76c>
 8009732:	4639      	mov	r1, r7
 8009734:	4652      	mov	r2, sl
 8009736:	4620      	mov	r0, r4
 8009738:	f001 ff78 	bl	800b62c <__lshift>
 800973c:	4607      	mov	r7, r0
 800973e:	2800      	cmp	r0, #0
 8009740:	f43f ae86 	beq.w	8009450 <_strtod_l+0x478>
 8009744:	f1bb 0f00 	cmp.w	fp, #0
 8009748:	dd08      	ble.n	800975c <_strtod_l+0x784>
 800974a:	4631      	mov	r1, r6
 800974c:	465a      	mov	r2, fp
 800974e:	4620      	mov	r0, r4
 8009750:	f001 ff6c 	bl	800b62c <__lshift>
 8009754:	4606      	mov	r6, r0
 8009756:	2800      	cmp	r0, #0
 8009758:	f43f ae7a 	beq.w	8009450 <_strtod_l+0x478>
 800975c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800975e:	463a      	mov	r2, r7
 8009760:	4620      	mov	r0, r4
 8009762:	f001 ffef 	bl	800b744 <__mdiff>
 8009766:	4605      	mov	r5, r0
 8009768:	2800      	cmp	r0, #0
 800976a:	f43f ae71 	beq.w	8009450 <_strtod_l+0x478>
 800976e:	2300      	movs	r3, #0
 8009770:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009774:	60c3      	str	r3, [r0, #12]
 8009776:	4631      	mov	r1, r6
 8009778:	f001 ffc8 	bl	800b70c <__mcmp>
 800977c:	2800      	cmp	r0, #0
 800977e:	da7d      	bge.n	800987c <_strtod_l+0x8a4>
 8009780:	ea5a 0308 	orrs.w	r3, sl, r8
 8009784:	f040 80a3 	bne.w	80098ce <_strtod_l+0x8f6>
 8009788:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800978c:	2b00      	cmp	r3, #0
 800978e:	f040 809e 	bne.w	80098ce <_strtod_l+0x8f6>
 8009792:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009796:	0d1b      	lsrs	r3, r3, #20
 8009798:	051b      	lsls	r3, r3, #20
 800979a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800979e:	f240 8096 	bls.w	80098ce <_strtod_l+0x8f6>
 80097a2:	696b      	ldr	r3, [r5, #20]
 80097a4:	b91b      	cbnz	r3, 80097ae <_strtod_l+0x7d6>
 80097a6:	692b      	ldr	r3, [r5, #16]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	f340 8090 	ble.w	80098ce <_strtod_l+0x8f6>
 80097ae:	4629      	mov	r1, r5
 80097b0:	2201      	movs	r2, #1
 80097b2:	4620      	mov	r0, r4
 80097b4:	f001 ff3a 	bl	800b62c <__lshift>
 80097b8:	4631      	mov	r1, r6
 80097ba:	4605      	mov	r5, r0
 80097bc:	f001 ffa6 	bl	800b70c <__mcmp>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	f340 8084 	ble.w	80098ce <_strtod_l+0x8f6>
 80097c6:	9904      	ldr	r1, [sp, #16]
 80097c8:	4a2b      	ldr	r2, [pc, #172]	; (8009878 <_strtod_l+0x8a0>)
 80097ca:	464b      	mov	r3, r9
 80097cc:	2900      	cmp	r1, #0
 80097ce:	f000 809d 	beq.w	800990c <_strtod_l+0x934>
 80097d2:	ea02 0109 	and.w	r1, r2, r9
 80097d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80097da:	f300 8097 	bgt.w	800990c <_strtod_l+0x934>
 80097de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80097e2:	f77f aea5 	ble.w	8009530 <_strtod_l+0x558>
 80097e6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009868 <_strtod_l+0x890>
 80097ea:	ec49 8b16 	vmov	d6, r8, r9
 80097ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80097f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80097f6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	bf08      	it	eq
 80097fe:	2322      	moveq	r3, #34	; 0x22
 8009800:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009804:	bf08      	it	eq
 8009806:	6023      	streq	r3, [r4, #0]
 8009808:	e62c      	b.n	8009464 <_strtod_l+0x48c>
 800980a:	f04f 31ff 	mov.w	r1, #4294967295
 800980e:	fa01 f202 	lsl.w	r2, r1, r2
 8009812:	ea02 0808 	and.w	r8, r2, r8
 8009816:	e6d9      	b.n	80095cc <_strtod_l+0x5f4>
 8009818:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800981c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009820:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009824:	33e2      	adds	r3, #226	; 0xe2
 8009826:	fa00 f303 	lsl.w	r3, r0, r3
 800982a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800982e:	e73f      	b.n	80096b0 <_strtod_l+0x6d8>
 8009830:	2200      	movs	r2, #0
 8009832:	2301      	movs	r3, #1
 8009834:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009838:	e73a      	b.n	80096b0 <_strtod_l+0x6d8>
 800983a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800983c:	461a      	mov	r2, r3
 800983e:	4620      	mov	r0, r4
 8009840:	f001 fef4 	bl	800b62c <__lshift>
 8009844:	9012      	str	r0, [sp, #72]	; 0x48
 8009846:	2800      	cmp	r0, #0
 8009848:	f47f af64 	bne.w	8009714 <_strtod_l+0x73c>
 800984c:	e600      	b.n	8009450 <_strtod_l+0x478>
 800984e:	bf00      	nop
 8009850:	94a03595 	.word	0x94a03595
 8009854:	3fcfffff 	.word	0x3fcfffff
 8009858:	94a03595 	.word	0x94a03595
 800985c:	3fdfffff 	.word	0x3fdfffff
 8009860:	35afe535 	.word	0x35afe535
 8009864:	3fe00000 	.word	0x3fe00000
 8009868:	00000000 	.word	0x00000000
 800986c:	39500000 	.word	0x39500000
 8009870:	0800ca68 	.word	0x0800ca68
 8009874:	fffffc02 	.word	0xfffffc02
 8009878:	7ff00000 	.word	0x7ff00000
 800987c:	46cb      	mov	fp, r9
 800987e:	d15f      	bne.n	8009940 <_strtod_l+0x968>
 8009880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009884:	f1ba 0f00 	cmp.w	sl, #0
 8009888:	d02a      	beq.n	80098e0 <_strtod_l+0x908>
 800988a:	4aa7      	ldr	r2, [pc, #668]	; (8009b28 <_strtod_l+0xb50>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d12b      	bne.n	80098e8 <_strtod_l+0x910>
 8009890:	9b04      	ldr	r3, [sp, #16]
 8009892:	4642      	mov	r2, r8
 8009894:	b1fb      	cbz	r3, 80098d6 <_strtod_l+0x8fe>
 8009896:	4ba5      	ldr	r3, [pc, #660]	; (8009b2c <_strtod_l+0xb54>)
 8009898:	ea09 0303 	and.w	r3, r9, r3
 800989c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80098a0:	f04f 31ff 	mov.w	r1, #4294967295
 80098a4:	d81a      	bhi.n	80098dc <_strtod_l+0x904>
 80098a6:	0d1b      	lsrs	r3, r3, #20
 80098a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098ac:	fa01 f303 	lsl.w	r3, r1, r3
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d119      	bne.n	80098e8 <_strtod_l+0x910>
 80098b4:	4b9e      	ldr	r3, [pc, #632]	; (8009b30 <_strtod_l+0xb58>)
 80098b6:	459b      	cmp	fp, r3
 80098b8:	d102      	bne.n	80098c0 <_strtod_l+0x8e8>
 80098ba:	3201      	adds	r2, #1
 80098bc:	f43f adc8 	beq.w	8009450 <_strtod_l+0x478>
 80098c0:	4b9a      	ldr	r3, [pc, #616]	; (8009b2c <_strtod_l+0xb54>)
 80098c2:	ea0b 0303 	and.w	r3, fp, r3
 80098c6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80098ca:	f04f 0800 	mov.w	r8, #0
 80098ce:	9b04      	ldr	r3, [sp, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d188      	bne.n	80097e6 <_strtod_l+0x80e>
 80098d4:	e5c6      	b.n	8009464 <_strtod_l+0x48c>
 80098d6:	f04f 33ff 	mov.w	r3, #4294967295
 80098da:	e7e9      	b.n	80098b0 <_strtod_l+0x8d8>
 80098dc:	460b      	mov	r3, r1
 80098de:	e7e7      	b.n	80098b0 <_strtod_l+0x8d8>
 80098e0:	ea53 0308 	orrs.w	r3, r3, r8
 80098e4:	f43f af6f 	beq.w	80097c6 <_strtod_l+0x7ee>
 80098e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ea:	b1cb      	cbz	r3, 8009920 <_strtod_l+0x948>
 80098ec:	ea13 0f0b 	tst.w	r3, fp
 80098f0:	d0ed      	beq.n	80098ce <_strtod_l+0x8f6>
 80098f2:	9a04      	ldr	r2, [sp, #16]
 80098f4:	4640      	mov	r0, r8
 80098f6:	4649      	mov	r1, r9
 80098f8:	f1ba 0f00 	cmp.w	sl, #0
 80098fc:	d014      	beq.n	8009928 <_strtod_l+0x950>
 80098fe:	f7ff fb51 	bl	8008fa4 <sulp>
 8009902:	ee38 7b00 	vadd.f64	d7, d8, d0
 8009906:	ec59 8b17 	vmov	r8, r9, d7
 800990a:	e7e0      	b.n	80098ce <_strtod_l+0x8f6>
 800990c:	4013      	ands	r3, r2
 800990e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009912:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009916:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800991a:	f04f 38ff 	mov.w	r8, #4294967295
 800991e:	e7d6      	b.n	80098ce <_strtod_l+0x8f6>
 8009920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009922:	ea13 0f08 	tst.w	r3, r8
 8009926:	e7e3      	b.n	80098f0 <_strtod_l+0x918>
 8009928:	f7ff fb3c 	bl	8008fa4 <sulp>
 800992c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8009930:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009938:	ec59 8b10 	vmov	r8, r9, d0
 800993c:	d1c7      	bne.n	80098ce <_strtod_l+0x8f6>
 800993e:	e5f7      	b.n	8009530 <_strtod_l+0x558>
 8009940:	4631      	mov	r1, r6
 8009942:	4628      	mov	r0, r5
 8009944:	f002 f860 	bl	800ba08 <__ratio>
 8009948:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800994c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009954:	d865      	bhi.n	8009a22 <_strtod_l+0xa4a>
 8009956:	f1ba 0f00 	cmp.w	sl, #0
 800995a:	d042      	beq.n	80099e2 <_strtod_l+0xa0a>
 800995c:	4b75      	ldr	r3, [pc, #468]	; (8009b34 <_strtod_l+0xb5c>)
 800995e:	2200      	movs	r2, #0
 8009960:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8009964:	4871      	ldr	r0, [pc, #452]	; (8009b2c <_strtod_l+0xb54>)
 8009966:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009b40 <_strtod_l+0xb68>
 800996a:	ea0b 0100 	and.w	r1, fp, r0
 800996e:	4561      	cmp	r1, ip
 8009970:	f040 808e 	bne.w	8009a90 <_strtod_l+0xab8>
 8009974:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009978:	ec49 8b10 	vmov	d0, r8, r9
 800997c:	ec43 2b1c 	vmov	d12, r2, r3
 8009980:	910a      	str	r1, [sp, #40]	; 0x28
 8009982:	f001 ff69 	bl	800b858 <__ulp>
 8009986:	ec49 8b1e 	vmov	d14, r8, r9
 800998a:	4868      	ldr	r0, [pc, #416]	; (8009b2c <_strtod_l+0xb54>)
 800998c:	eeac eb00 	vfma.f64	d14, d12, d0
 8009990:	ee1e 3a90 	vmov	r3, s29
 8009994:	4a68      	ldr	r2, [pc, #416]	; (8009b38 <_strtod_l+0xb60>)
 8009996:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009998:	4018      	ands	r0, r3
 800999a:	4290      	cmp	r0, r2
 800999c:	ec59 8b1e 	vmov	r8, r9, d14
 80099a0:	d94e      	bls.n	8009a40 <_strtod_l+0xa68>
 80099a2:	ee18 3a90 	vmov	r3, s17
 80099a6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d104      	bne.n	80099b8 <_strtod_l+0x9e0>
 80099ae:	ee18 3a10 	vmov	r3, s16
 80099b2:	3301      	adds	r3, #1
 80099b4:	f43f ad4c 	beq.w	8009450 <_strtod_l+0x478>
 80099b8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009b30 <_strtod_l+0xb58>
 80099bc:	f04f 38ff 	mov.w	r8, #4294967295
 80099c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80099c2:	4620      	mov	r0, r4
 80099c4:	f001 fc16 	bl	800b1f4 <_Bfree>
 80099c8:	4639      	mov	r1, r7
 80099ca:	4620      	mov	r0, r4
 80099cc:	f001 fc12 	bl	800b1f4 <_Bfree>
 80099d0:	4631      	mov	r1, r6
 80099d2:	4620      	mov	r0, r4
 80099d4:	f001 fc0e 	bl	800b1f4 <_Bfree>
 80099d8:	4629      	mov	r1, r5
 80099da:	4620      	mov	r0, r4
 80099dc:	f001 fc0a 	bl	800b1f4 <_Bfree>
 80099e0:	e619      	b.n	8009616 <_strtod_l+0x63e>
 80099e2:	f1b8 0f00 	cmp.w	r8, #0
 80099e6:	d112      	bne.n	8009a0e <_strtod_l+0xa36>
 80099e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099ec:	b9b3      	cbnz	r3, 8009a1c <_strtod_l+0xa44>
 80099ee:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80099f2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80099f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099fa:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80099fe:	bf58      	it	pl
 8009a00:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8009a04:	eeb1 7b4d 	vneg.f64	d7, d13
 8009a08:	ec53 2b17 	vmov	r2, r3, d7
 8009a0c:	e7aa      	b.n	8009964 <_strtod_l+0x98c>
 8009a0e:	f1b8 0f01 	cmp.w	r8, #1
 8009a12:	d103      	bne.n	8009a1c <_strtod_l+0xa44>
 8009a14:	f1b9 0f00 	cmp.w	r9, #0
 8009a18:	f43f ad8a 	beq.w	8009530 <_strtod_l+0x558>
 8009a1c:	4b47      	ldr	r3, [pc, #284]	; (8009b3c <_strtod_l+0xb64>)
 8009a1e:	2200      	movs	r2, #0
 8009a20:	e79e      	b.n	8009960 <_strtod_l+0x988>
 8009a22:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009a26:	ee20 db0d 	vmul.f64	d13, d0, d13
 8009a2a:	f1ba 0f00 	cmp.w	sl, #0
 8009a2e:	d104      	bne.n	8009a3a <_strtod_l+0xa62>
 8009a30:	eeb1 7b4d 	vneg.f64	d7, d13
 8009a34:	ec53 2b17 	vmov	r2, r3, d7
 8009a38:	e794      	b.n	8009964 <_strtod_l+0x98c>
 8009a3a:	eeb0 7b4d 	vmov.f64	d7, d13
 8009a3e:	e7f9      	b.n	8009a34 <_strtod_l+0xa5c>
 8009a40:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009a44:	9b04      	ldr	r3, [sp, #16]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1ba      	bne.n	80099c0 <_strtod_l+0x9e8>
 8009a4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a4e:	0d1b      	lsrs	r3, r3, #20
 8009a50:	051b      	lsls	r3, r3, #20
 8009a52:	4299      	cmp	r1, r3
 8009a54:	d1b4      	bne.n	80099c0 <_strtod_l+0x9e8>
 8009a56:	ec51 0b1d 	vmov	r0, r1, d13
 8009a5a:	f7f6 fe75 	bl	8000748 <__aeabi_d2lz>
 8009a5e:	f7f6 fe2d 	bl	80006bc <__aeabi_l2d>
 8009a62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a66:	ec41 0b17 	vmov	d7, r0, r1
 8009a6a:	ea43 0308 	orr.w	r3, r3, r8
 8009a6e:	ea53 030a 	orrs.w	r3, r3, sl
 8009a72:	ee3d db47 	vsub.f64	d13, d13, d7
 8009a76:	d03c      	beq.n	8009af2 <_strtod_l+0xb1a>
 8009a78:	eeb4 dbca 	vcmpe.f64	d13, d10
 8009a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a80:	f53f acf0 	bmi.w	8009464 <_strtod_l+0x48c>
 8009a84:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a8c:	dd98      	ble.n	80099c0 <_strtod_l+0x9e8>
 8009a8e:	e4e9      	b.n	8009464 <_strtod_l+0x48c>
 8009a90:	9804      	ldr	r0, [sp, #16]
 8009a92:	b1f0      	cbz	r0, 8009ad2 <_strtod_l+0xafa>
 8009a94:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009a98:	d81b      	bhi.n	8009ad2 <_strtod_l+0xafa>
 8009a9a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009b20 <_strtod_l+0xb48>
 8009a9e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8009aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa6:	d811      	bhi.n	8009acc <_strtod_l+0xaf4>
 8009aa8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8009aac:	ee1d 3a10 	vmov	r3, s26
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	bf38      	it	cc
 8009ab4:	2301      	movcc	r3, #1
 8009ab6:	ee0d 3a10 	vmov	s26, r3
 8009aba:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8009abe:	f1ba 0f00 	cmp.w	sl, #0
 8009ac2:	d113      	bne.n	8009aec <_strtod_l+0xb14>
 8009ac4:	eeb1 7b4d 	vneg.f64	d7, d13
 8009ac8:	ec53 2b17 	vmov	r2, r3, d7
 8009acc:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8009ad0:	1a43      	subs	r3, r0, r1
 8009ad2:	eeb0 0b48 	vmov.f64	d0, d8
 8009ad6:	ec43 2b1c 	vmov	d12, r2, r3
 8009ada:	910a      	str	r1, [sp, #40]	; 0x28
 8009adc:	f001 febc 	bl	800b858 <__ulp>
 8009ae0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009ae2:	eeac 8b00 	vfma.f64	d8, d12, d0
 8009ae6:	ec59 8b18 	vmov	r8, r9, d8
 8009aea:	e7ab      	b.n	8009a44 <_strtod_l+0xa6c>
 8009aec:	eeb0 7b4d 	vmov.f64	d7, d13
 8009af0:	e7ea      	b.n	8009ac8 <_strtod_l+0xaf0>
 8009af2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8009af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009afa:	f57f af61 	bpl.w	80099c0 <_strtod_l+0x9e8>
 8009afe:	e4b1      	b.n	8009464 <_strtod_l+0x48c>
 8009b00:	2300      	movs	r3, #0
 8009b02:	9308      	str	r3, [sp, #32]
 8009b04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b08:	6013      	str	r3, [r2, #0]
 8009b0a:	f7ff baad 	b.w	8009068 <_strtod_l+0x90>
 8009b0e:	2a65      	cmp	r2, #101	; 0x65
 8009b10:	f43f ab9f 	beq.w	8009252 <_strtod_l+0x27a>
 8009b14:	2a45      	cmp	r2, #69	; 0x45
 8009b16:	f43f ab9c 	beq.w	8009252 <_strtod_l+0x27a>
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	f7ff bbd4 	b.w	80092c8 <_strtod_l+0x2f0>
 8009b20:	ffc00000 	.word	0xffc00000
 8009b24:	41dfffff 	.word	0x41dfffff
 8009b28:	000fffff 	.word	0x000fffff
 8009b2c:	7ff00000 	.word	0x7ff00000
 8009b30:	7fefffff 	.word	0x7fefffff
 8009b34:	3ff00000 	.word	0x3ff00000
 8009b38:	7c9fffff 	.word	0x7c9fffff
 8009b3c:	bff00000 	.word	0xbff00000
 8009b40:	7fe00000 	.word	0x7fe00000

08009b44 <_strtod_r>:
 8009b44:	4b01      	ldr	r3, [pc, #4]	; (8009b4c <_strtod_r+0x8>)
 8009b46:	f7ff ba47 	b.w	8008fd8 <_strtod_l>
 8009b4a:	bf00      	nop
 8009b4c:	240000a0 	.word	0x240000a0

08009b50 <_strtol_l.constprop.0>:
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b56:	d001      	beq.n	8009b5c <_strtol_l.constprop.0+0xc>
 8009b58:	2b24      	cmp	r3, #36	; 0x24
 8009b5a:	d906      	bls.n	8009b6a <_strtol_l.constprop.0+0x1a>
 8009b5c:	f7fe fb68 	bl	8008230 <__errno>
 8009b60:	2316      	movs	r3, #22
 8009b62:	6003      	str	r3, [r0, #0]
 8009b64:	2000      	movs	r0, #0
 8009b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b6a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009c50 <_strtol_l.constprop.0+0x100>
 8009b6e:	460d      	mov	r5, r1
 8009b70:	462e      	mov	r6, r5
 8009b72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b76:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009b7a:	f017 0708 	ands.w	r7, r7, #8
 8009b7e:	d1f7      	bne.n	8009b70 <_strtol_l.constprop.0+0x20>
 8009b80:	2c2d      	cmp	r4, #45	; 0x2d
 8009b82:	d132      	bne.n	8009bea <_strtol_l.constprop.0+0x9a>
 8009b84:	782c      	ldrb	r4, [r5, #0]
 8009b86:	2701      	movs	r7, #1
 8009b88:	1cb5      	adds	r5, r6, #2
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d05b      	beq.n	8009c46 <_strtol_l.constprop.0+0xf6>
 8009b8e:	2b10      	cmp	r3, #16
 8009b90:	d109      	bne.n	8009ba6 <_strtol_l.constprop.0+0x56>
 8009b92:	2c30      	cmp	r4, #48	; 0x30
 8009b94:	d107      	bne.n	8009ba6 <_strtol_l.constprop.0+0x56>
 8009b96:	782c      	ldrb	r4, [r5, #0]
 8009b98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009b9c:	2c58      	cmp	r4, #88	; 0x58
 8009b9e:	d14d      	bne.n	8009c3c <_strtol_l.constprop.0+0xec>
 8009ba0:	786c      	ldrb	r4, [r5, #1]
 8009ba2:	2310      	movs	r3, #16
 8009ba4:	3502      	adds	r5, #2
 8009ba6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009baa:	f108 38ff 	add.w	r8, r8, #4294967295
 8009bae:	f04f 0c00 	mov.w	ip, #0
 8009bb2:	fbb8 f9f3 	udiv	r9, r8, r3
 8009bb6:	4666      	mov	r6, ip
 8009bb8:	fb03 8a19 	mls	sl, r3, r9, r8
 8009bbc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009bc0:	f1be 0f09 	cmp.w	lr, #9
 8009bc4:	d816      	bhi.n	8009bf4 <_strtol_l.constprop.0+0xa4>
 8009bc6:	4674      	mov	r4, lr
 8009bc8:	42a3      	cmp	r3, r4
 8009bca:	dd24      	ble.n	8009c16 <_strtol_l.constprop.0+0xc6>
 8009bcc:	f1bc 0f00 	cmp.w	ip, #0
 8009bd0:	db1e      	blt.n	8009c10 <_strtol_l.constprop.0+0xc0>
 8009bd2:	45b1      	cmp	r9, r6
 8009bd4:	d31c      	bcc.n	8009c10 <_strtol_l.constprop.0+0xc0>
 8009bd6:	d101      	bne.n	8009bdc <_strtol_l.constprop.0+0x8c>
 8009bd8:	45a2      	cmp	sl, r4
 8009bda:	db19      	blt.n	8009c10 <_strtol_l.constprop.0+0xc0>
 8009bdc:	fb06 4603 	mla	r6, r6, r3, r4
 8009be0:	f04f 0c01 	mov.w	ip, #1
 8009be4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009be8:	e7e8      	b.n	8009bbc <_strtol_l.constprop.0+0x6c>
 8009bea:	2c2b      	cmp	r4, #43	; 0x2b
 8009bec:	bf04      	itt	eq
 8009bee:	782c      	ldrbeq	r4, [r5, #0]
 8009bf0:	1cb5      	addeq	r5, r6, #2
 8009bf2:	e7ca      	b.n	8009b8a <_strtol_l.constprop.0+0x3a>
 8009bf4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009bf8:	f1be 0f19 	cmp.w	lr, #25
 8009bfc:	d801      	bhi.n	8009c02 <_strtol_l.constprop.0+0xb2>
 8009bfe:	3c37      	subs	r4, #55	; 0x37
 8009c00:	e7e2      	b.n	8009bc8 <_strtol_l.constprop.0+0x78>
 8009c02:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009c06:	f1be 0f19 	cmp.w	lr, #25
 8009c0a:	d804      	bhi.n	8009c16 <_strtol_l.constprop.0+0xc6>
 8009c0c:	3c57      	subs	r4, #87	; 0x57
 8009c0e:	e7db      	b.n	8009bc8 <_strtol_l.constprop.0+0x78>
 8009c10:	f04f 3cff 	mov.w	ip, #4294967295
 8009c14:	e7e6      	b.n	8009be4 <_strtol_l.constprop.0+0x94>
 8009c16:	f1bc 0f00 	cmp.w	ip, #0
 8009c1a:	da05      	bge.n	8009c28 <_strtol_l.constprop.0+0xd8>
 8009c1c:	2322      	movs	r3, #34	; 0x22
 8009c1e:	6003      	str	r3, [r0, #0]
 8009c20:	4646      	mov	r6, r8
 8009c22:	b942      	cbnz	r2, 8009c36 <_strtol_l.constprop.0+0xe6>
 8009c24:	4630      	mov	r0, r6
 8009c26:	e79e      	b.n	8009b66 <_strtol_l.constprop.0+0x16>
 8009c28:	b107      	cbz	r7, 8009c2c <_strtol_l.constprop.0+0xdc>
 8009c2a:	4276      	negs	r6, r6
 8009c2c:	2a00      	cmp	r2, #0
 8009c2e:	d0f9      	beq.n	8009c24 <_strtol_l.constprop.0+0xd4>
 8009c30:	f1bc 0f00 	cmp.w	ip, #0
 8009c34:	d000      	beq.n	8009c38 <_strtol_l.constprop.0+0xe8>
 8009c36:	1e69      	subs	r1, r5, #1
 8009c38:	6011      	str	r1, [r2, #0]
 8009c3a:	e7f3      	b.n	8009c24 <_strtol_l.constprop.0+0xd4>
 8009c3c:	2430      	movs	r4, #48	; 0x30
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1b1      	bne.n	8009ba6 <_strtol_l.constprop.0+0x56>
 8009c42:	2308      	movs	r3, #8
 8009c44:	e7af      	b.n	8009ba6 <_strtol_l.constprop.0+0x56>
 8009c46:	2c30      	cmp	r4, #48	; 0x30
 8009c48:	d0a5      	beq.n	8009b96 <_strtol_l.constprop.0+0x46>
 8009c4a:	230a      	movs	r3, #10
 8009c4c:	e7ab      	b.n	8009ba6 <_strtol_l.constprop.0+0x56>
 8009c4e:	bf00      	nop
 8009c50:	0800ca91 	.word	0x0800ca91

08009c54 <_strtol_r>:
 8009c54:	f7ff bf7c 	b.w	8009b50 <_strtol_l.constprop.0>

08009c58 <quorem>:
 8009c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	6903      	ldr	r3, [r0, #16]
 8009c5e:	690c      	ldr	r4, [r1, #16]
 8009c60:	42a3      	cmp	r3, r4
 8009c62:	4607      	mov	r7, r0
 8009c64:	f2c0 8081 	blt.w	8009d6a <quorem+0x112>
 8009c68:	3c01      	subs	r4, #1
 8009c6a:	f101 0814 	add.w	r8, r1, #20
 8009c6e:	f100 0514 	add.w	r5, r0, #20
 8009c72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c76:	9301      	str	r3, [sp, #4]
 8009c78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c80:	3301      	adds	r3, #1
 8009c82:	429a      	cmp	r2, r3
 8009c84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c90:	d331      	bcc.n	8009cf6 <quorem+0x9e>
 8009c92:	f04f 0e00 	mov.w	lr, #0
 8009c96:	4640      	mov	r0, r8
 8009c98:	46ac      	mov	ip, r5
 8009c9a:	46f2      	mov	sl, lr
 8009c9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ca0:	b293      	uxth	r3, r2
 8009ca2:	fb06 e303 	mla	r3, r6, r3, lr
 8009ca6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	ebaa 0303 	sub.w	r3, sl, r3
 8009cb0:	f8dc a000 	ldr.w	sl, [ip]
 8009cb4:	0c12      	lsrs	r2, r2, #16
 8009cb6:	fa13 f38a 	uxtah	r3, r3, sl
 8009cba:	fb06 e202 	mla	r2, r6, r2, lr
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	9b00      	ldr	r3, [sp, #0]
 8009cc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009cc6:	b292      	uxth	r2, r2
 8009cc8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009ccc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cd0:	f8bd 3000 	ldrh.w	r3, [sp]
 8009cd4:	4581      	cmp	r9, r0
 8009cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cda:	f84c 3b04 	str.w	r3, [ip], #4
 8009cde:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ce2:	d2db      	bcs.n	8009c9c <quorem+0x44>
 8009ce4:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ce8:	b92b      	cbnz	r3, 8009cf6 <quorem+0x9e>
 8009cea:	9b01      	ldr	r3, [sp, #4]
 8009cec:	3b04      	subs	r3, #4
 8009cee:	429d      	cmp	r5, r3
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	d32e      	bcc.n	8009d52 <quorem+0xfa>
 8009cf4:	613c      	str	r4, [r7, #16]
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	f001 fd08 	bl	800b70c <__mcmp>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	db24      	blt.n	8009d4a <quorem+0xf2>
 8009d00:	3601      	adds	r6, #1
 8009d02:	4628      	mov	r0, r5
 8009d04:	f04f 0c00 	mov.w	ip, #0
 8009d08:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d0c:	f8d0 e000 	ldr.w	lr, [r0]
 8009d10:	b293      	uxth	r3, r2
 8009d12:	ebac 0303 	sub.w	r3, ip, r3
 8009d16:	0c12      	lsrs	r2, r2, #16
 8009d18:	fa13 f38e 	uxtah	r3, r3, lr
 8009d1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d2a:	45c1      	cmp	r9, r8
 8009d2c:	f840 3b04 	str.w	r3, [r0], #4
 8009d30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009d34:	d2e8      	bcs.n	8009d08 <quorem+0xb0>
 8009d36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d3e:	b922      	cbnz	r2, 8009d4a <quorem+0xf2>
 8009d40:	3b04      	subs	r3, #4
 8009d42:	429d      	cmp	r5, r3
 8009d44:	461a      	mov	r2, r3
 8009d46:	d30a      	bcc.n	8009d5e <quorem+0x106>
 8009d48:	613c      	str	r4, [r7, #16]
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	b003      	add	sp, #12
 8009d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d52:	6812      	ldr	r2, [r2, #0]
 8009d54:	3b04      	subs	r3, #4
 8009d56:	2a00      	cmp	r2, #0
 8009d58:	d1cc      	bne.n	8009cf4 <quorem+0x9c>
 8009d5a:	3c01      	subs	r4, #1
 8009d5c:	e7c7      	b.n	8009cee <quorem+0x96>
 8009d5e:	6812      	ldr	r2, [r2, #0]
 8009d60:	3b04      	subs	r3, #4
 8009d62:	2a00      	cmp	r2, #0
 8009d64:	d1f0      	bne.n	8009d48 <quorem+0xf0>
 8009d66:	3c01      	subs	r4, #1
 8009d68:	e7eb      	b.n	8009d42 <quorem+0xea>
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	e7ee      	b.n	8009d4c <quorem+0xf4>
	...

08009d70 <_dtoa_r>:
 8009d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	ed2d 8b02 	vpush	{d8}
 8009d78:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009d7a:	b091      	sub	sp, #68	; 0x44
 8009d7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d80:	ec59 8b10 	vmov	r8, r9, d0
 8009d84:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009d86:	9106      	str	r1, [sp, #24]
 8009d88:	4606      	mov	r6, r0
 8009d8a:	9208      	str	r2, [sp, #32]
 8009d8c:	930c      	str	r3, [sp, #48]	; 0x30
 8009d8e:	b975      	cbnz	r5, 8009dae <_dtoa_r+0x3e>
 8009d90:	2010      	movs	r0, #16
 8009d92:	f001 f9c7 	bl	800b124 <malloc>
 8009d96:	4602      	mov	r2, r0
 8009d98:	6270      	str	r0, [r6, #36]	; 0x24
 8009d9a:	b920      	cbnz	r0, 8009da6 <_dtoa_r+0x36>
 8009d9c:	4baa      	ldr	r3, [pc, #680]	; (800a048 <_dtoa_r+0x2d8>)
 8009d9e:	21ea      	movs	r1, #234	; 0xea
 8009da0:	48aa      	ldr	r0, [pc, #680]	; (800a04c <_dtoa_r+0x2dc>)
 8009da2:	f002 fba1 	bl	800c4e8 <__assert_func>
 8009da6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009daa:	6005      	str	r5, [r0, #0]
 8009dac:	60c5      	str	r5, [r0, #12]
 8009dae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009db0:	6819      	ldr	r1, [r3, #0]
 8009db2:	b151      	cbz	r1, 8009dca <_dtoa_r+0x5a>
 8009db4:	685a      	ldr	r2, [r3, #4]
 8009db6:	604a      	str	r2, [r1, #4]
 8009db8:	2301      	movs	r3, #1
 8009dba:	4093      	lsls	r3, r2
 8009dbc:	608b      	str	r3, [r1, #8]
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	f001 fa18 	bl	800b1f4 <_Bfree>
 8009dc4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	601a      	str	r2, [r3, #0]
 8009dca:	f1b9 0300 	subs.w	r3, r9, #0
 8009dce:	bfbb      	ittet	lt
 8009dd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009dd4:	9303      	strlt	r3, [sp, #12]
 8009dd6:	2300      	movge	r3, #0
 8009dd8:	2201      	movlt	r2, #1
 8009dda:	bfac      	ite	ge
 8009ddc:	6023      	strge	r3, [r4, #0]
 8009dde:	6022      	strlt	r2, [r4, #0]
 8009de0:	4b9b      	ldr	r3, [pc, #620]	; (800a050 <_dtoa_r+0x2e0>)
 8009de2:	9c03      	ldr	r4, [sp, #12]
 8009de4:	43a3      	bics	r3, r4
 8009de6:	d11c      	bne.n	8009e22 <_dtoa_r+0xb2>
 8009de8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dea:	f242 730f 	movw	r3, #9999	; 0x270f
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009df4:	ea53 0308 	orrs.w	r3, r3, r8
 8009df8:	f000 84fd 	beq.w	800a7f6 <_dtoa_r+0xa86>
 8009dfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009dfe:	b963      	cbnz	r3, 8009e1a <_dtoa_r+0xaa>
 8009e00:	4b94      	ldr	r3, [pc, #592]	; (800a054 <_dtoa_r+0x2e4>)
 8009e02:	e01f      	b.n	8009e44 <_dtoa_r+0xd4>
 8009e04:	4b94      	ldr	r3, [pc, #592]	; (800a058 <_dtoa_r+0x2e8>)
 8009e06:	9301      	str	r3, [sp, #4]
 8009e08:	3308      	adds	r3, #8
 8009e0a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009e0c:	6013      	str	r3, [r2, #0]
 8009e0e:	9801      	ldr	r0, [sp, #4]
 8009e10:	b011      	add	sp, #68	; 0x44
 8009e12:	ecbd 8b02 	vpop	{d8}
 8009e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1a:	4b8e      	ldr	r3, [pc, #568]	; (800a054 <_dtoa_r+0x2e4>)
 8009e1c:	9301      	str	r3, [sp, #4]
 8009e1e:	3303      	adds	r3, #3
 8009e20:	e7f3      	b.n	8009e0a <_dtoa_r+0x9a>
 8009e22:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009e26:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e2e:	d10b      	bne.n	8009e48 <_dtoa_r+0xd8>
 8009e30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e32:	2301      	movs	r3, #1
 8009e34:	6013      	str	r3, [r2, #0]
 8009e36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f000 84d9 	beq.w	800a7f0 <_dtoa_r+0xa80>
 8009e3e:	4887      	ldr	r0, [pc, #540]	; (800a05c <_dtoa_r+0x2ec>)
 8009e40:	6018      	str	r0, [r3, #0]
 8009e42:	1e43      	subs	r3, r0, #1
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	e7e2      	b.n	8009e0e <_dtoa_r+0x9e>
 8009e48:	a90f      	add	r1, sp, #60	; 0x3c
 8009e4a:	aa0e      	add	r2, sp, #56	; 0x38
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	eeb0 0b48 	vmov.f64	d0, d8
 8009e52:	f001 fd7d 	bl	800b950 <__d2b>
 8009e56:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009e5e:	2900      	cmp	r1, #0
 8009e60:	d046      	beq.n	8009ef0 <_dtoa_r+0x180>
 8009e62:	ee18 4a90 	vmov	r4, s17
 8009e66:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009e6a:	ec53 2b18 	vmov	r2, r3, d8
 8009e6e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009e72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009e76:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009e7a:	2400      	movs	r4, #0
 8009e7c:	ec43 2b16 	vmov	d6, r2, r3
 8009e80:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009e84:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a030 <_dtoa_r+0x2c0>
 8009e88:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009e8c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a038 <_dtoa_r+0x2c8>
 8009e90:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009e94:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a040 <_dtoa_r+0x2d0>
 8009e98:	ee07 1a90 	vmov	s15, r1
 8009e9c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009ea0:	eeb0 7b46 	vmov.f64	d7, d6
 8009ea4:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009ea8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009eac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eb4:	ee16 ba90 	vmov	fp, s13
 8009eb8:	940a      	str	r4, [sp, #40]	; 0x28
 8009eba:	d508      	bpl.n	8009ece <_dtoa_r+0x15e>
 8009ebc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009ec0:	eeb4 6b47 	vcmp.f64	d6, d7
 8009ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec8:	bf18      	it	ne
 8009eca:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009ece:	f1bb 0f16 	cmp.w	fp, #22
 8009ed2:	d82f      	bhi.n	8009f34 <_dtoa_r+0x1c4>
 8009ed4:	4b62      	ldr	r3, [pc, #392]	; (800a060 <_dtoa_r+0x2f0>)
 8009ed6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009eda:	ed93 7b00 	vldr	d7, [r3]
 8009ede:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee6:	d501      	bpl.n	8009eec <_dtoa_r+0x17c>
 8009ee8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009eec:	2300      	movs	r3, #0
 8009eee:	e022      	b.n	8009f36 <_dtoa_r+0x1c6>
 8009ef0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ef2:	4401      	add	r1, r0
 8009ef4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009ef8:	2b20      	cmp	r3, #32
 8009efa:	bfc1      	itttt	gt
 8009efc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f00:	fa04 f303 	lslgt.w	r3, r4, r3
 8009f04:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009f08:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009f0c:	bfd6      	itet	le
 8009f0e:	f1c3 0320 	rsble	r3, r3, #32
 8009f12:	ea43 0808 	orrgt.w	r8, r3, r8
 8009f16:	fa08 f803 	lslle.w	r8, r8, r3
 8009f1a:	ee07 8a90 	vmov	s15, r8
 8009f1e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009f22:	3901      	subs	r1, #1
 8009f24:	ee17 4a90 	vmov	r4, s15
 8009f28:	ec53 2b17 	vmov	r2, r3, d7
 8009f2c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009f30:	2401      	movs	r4, #1
 8009f32:	e7a3      	b.n	8009e7c <_dtoa_r+0x10c>
 8009f34:	2301      	movs	r3, #1
 8009f36:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f38:	1a43      	subs	r3, r0, r1
 8009f3a:	1e5a      	subs	r2, r3, #1
 8009f3c:	bf45      	ittet	mi
 8009f3e:	f1c3 0301 	rsbmi	r3, r3, #1
 8009f42:	9304      	strmi	r3, [sp, #16]
 8009f44:	2300      	movpl	r3, #0
 8009f46:	2300      	movmi	r3, #0
 8009f48:	9205      	str	r2, [sp, #20]
 8009f4a:	bf54      	ite	pl
 8009f4c:	9304      	strpl	r3, [sp, #16]
 8009f4e:	9305      	strmi	r3, [sp, #20]
 8009f50:	f1bb 0f00 	cmp.w	fp, #0
 8009f54:	db18      	blt.n	8009f88 <_dtoa_r+0x218>
 8009f56:	9b05      	ldr	r3, [sp, #20]
 8009f58:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8009f5c:	445b      	add	r3, fp
 8009f5e:	9305      	str	r3, [sp, #20]
 8009f60:	2300      	movs	r3, #0
 8009f62:	9a06      	ldr	r2, [sp, #24]
 8009f64:	2a09      	cmp	r2, #9
 8009f66:	d849      	bhi.n	8009ffc <_dtoa_r+0x28c>
 8009f68:	2a05      	cmp	r2, #5
 8009f6a:	bfc4      	itt	gt
 8009f6c:	3a04      	subgt	r2, #4
 8009f6e:	9206      	strgt	r2, [sp, #24]
 8009f70:	9a06      	ldr	r2, [sp, #24]
 8009f72:	f1a2 0202 	sub.w	r2, r2, #2
 8009f76:	bfcc      	ite	gt
 8009f78:	2400      	movgt	r4, #0
 8009f7a:	2401      	movle	r4, #1
 8009f7c:	2a03      	cmp	r2, #3
 8009f7e:	d848      	bhi.n	800a012 <_dtoa_r+0x2a2>
 8009f80:	e8df f002 	tbb	[pc, r2]
 8009f84:	3a2c2e0b 	.word	0x3a2c2e0b
 8009f88:	9b04      	ldr	r3, [sp, #16]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	eba3 030b 	sub.w	r3, r3, fp
 8009f90:	9304      	str	r3, [sp, #16]
 8009f92:	9209      	str	r2, [sp, #36]	; 0x24
 8009f94:	f1cb 0300 	rsb	r3, fp, #0
 8009f98:	e7e3      	b.n	8009f62 <_dtoa_r+0x1f2>
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	9207      	str	r2, [sp, #28]
 8009f9e:	9a08      	ldr	r2, [sp, #32]
 8009fa0:	2a00      	cmp	r2, #0
 8009fa2:	dc39      	bgt.n	800a018 <_dtoa_r+0x2a8>
 8009fa4:	f04f 0a01 	mov.w	sl, #1
 8009fa8:	46d1      	mov	r9, sl
 8009faa:	4652      	mov	r2, sl
 8009fac:	f8cd a020 	str.w	sl, [sp, #32]
 8009fb0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	6079      	str	r1, [r7, #4]
 8009fb6:	2004      	movs	r0, #4
 8009fb8:	f100 0c14 	add.w	ip, r0, #20
 8009fbc:	4594      	cmp	ip, r2
 8009fbe:	6879      	ldr	r1, [r7, #4]
 8009fc0:	d92f      	bls.n	800a022 <_dtoa_r+0x2b2>
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	930d      	str	r3, [sp, #52]	; 0x34
 8009fc6:	f001 f8d5 	bl	800b174 <_Balloc>
 8009fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fcc:	9001      	str	r0, [sp, #4]
 8009fce:	4602      	mov	r2, r0
 8009fd0:	2800      	cmp	r0, #0
 8009fd2:	d149      	bne.n	800a068 <_dtoa_r+0x2f8>
 8009fd4:	4b23      	ldr	r3, [pc, #140]	; (800a064 <_dtoa_r+0x2f4>)
 8009fd6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009fda:	e6e1      	b.n	8009da0 <_dtoa_r+0x30>
 8009fdc:	2201      	movs	r2, #1
 8009fde:	e7dd      	b.n	8009f9c <_dtoa_r+0x22c>
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	9207      	str	r2, [sp, #28]
 8009fe4:	9a08      	ldr	r2, [sp, #32]
 8009fe6:	eb0b 0a02 	add.w	sl, fp, r2
 8009fea:	f10a 0901 	add.w	r9, sl, #1
 8009fee:	464a      	mov	r2, r9
 8009ff0:	2a01      	cmp	r2, #1
 8009ff2:	bfb8      	it	lt
 8009ff4:	2201      	movlt	r2, #1
 8009ff6:	e7db      	b.n	8009fb0 <_dtoa_r+0x240>
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	e7f2      	b.n	8009fe2 <_dtoa_r+0x272>
 8009ffc:	2401      	movs	r4, #1
 8009ffe:	2200      	movs	r2, #0
 800a000:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a004:	f04f 3aff 	mov.w	sl, #4294967295
 800a008:	2100      	movs	r1, #0
 800a00a:	46d1      	mov	r9, sl
 800a00c:	2212      	movs	r2, #18
 800a00e:	9108      	str	r1, [sp, #32]
 800a010:	e7ce      	b.n	8009fb0 <_dtoa_r+0x240>
 800a012:	2201      	movs	r2, #1
 800a014:	9207      	str	r2, [sp, #28]
 800a016:	e7f5      	b.n	800a004 <_dtoa_r+0x294>
 800a018:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a01c:	46d1      	mov	r9, sl
 800a01e:	4652      	mov	r2, sl
 800a020:	e7c6      	b.n	8009fb0 <_dtoa_r+0x240>
 800a022:	3101      	adds	r1, #1
 800a024:	6079      	str	r1, [r7, #4]
 800a026:	0040      	lsls	r0, r0, #1
 800a028:	e7c6      	b.n	8009fb8 <_dtoa_r+0x248>
 800a02a:	bf00      	nop
 800a02c:	f3af 8000 	nop.w
 800a030:	636f4361 	.word	0x636f4361
 800a034:	3fd287a7 	.word	0x3fd287a7
 800a038:	8b60c8b3 	.word	0x8b60c8b3
 800a03c:	3fc68a28 	.word	0x3fc68a28
 800a040:	509f79fb 	.word	0x509f79fb
 800a044:	3fd34413 	.word	0x3fd34413
 800a048:	0800cb9e 	.word	0x0800cb9e
 800a04c:	0800cbb5 	.word	0x0800cbb5
 800a050:	7ff00000 	.word	0x7ff00000
 800a054:	0800cb9a 	.word	0x0800cb9a
 800a058:	0800cb91 	.word	0x0800cb91
 800a05c:	0800ca11 	.word	0x0800ca11
 800a060:	0800cd88 	.word	0x0800cd88
 800a064:	0800cc10 	.word	0x0800cc10
 800a068:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a06a:	9901      	ldr	r1, [sp, #4]
 800a06c:	6011      	str	r1, [r2, #0]
 800a06e:	f1b9 0f0e 	cmp.w	r9, #14
 800a072:	d86c      	bhi.n	800a14e <_dtoa_r+0x3de>
 800a074:	2c00      	cmp	r4, #0
 800a076:	d06a      	beq.n	800a14e <_dtoa_r+0x3de>
 800a078:	f1bb 0f00 	cmp.w	fp, #0
 800a07c:	f340 80a0 	ble.w	800a1c0 <_dtoa_r+0x450>
 800a080:	49c1      	ldr	r1, [pc, #772]	; (800a388 <_dtoa_r+0x618>)
 800a082:	f00b 020f 	and.w	r2, fp, #15
 800a086:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a08a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a08e:	ed92 7b00 	vldr	d7, [r2]
 800a092:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a096:	f000 8087 	beq.w	800a1a8 <_dtoa_r+0x438>
 800a09a:	4abc      	ldr	r2, [pc, #752]	; (800a38c <_dtoa_r+0x61c>)
 800a09c:	ed92 6b08 	vldr	d6, [r2, #32]
 800a0a0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a0a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a0a8:	f001 010f 	and.w	r1, r1, #15
 800a0ac:	2203      	movs	r2, #3
 800a0ae:	48b7      	ldr	r0, [pc, #732]	; (800a38c <_dtoa_r+0x61c>)
 800a0b0:	2900      	cmp	r1, #0
 800a0b2:	d17b      	bne.n	800a1ac <_dtoa_r+0x43c>
 800a0b4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a0b8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a0bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a0c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0c2:	2900      	cmp	r1, #0
 800a0c4:	f000 80a2 	beq.w	800a20c <_dtoa_r+0x49c>
 800a0c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a0cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0d8:	f140 8098 	bpl.w	800a20c <_dtoa_r+0x49c>
 800a0dc:	f1b9 0f00 	cmp.w	r9, #0
 800a0e0:	f000 8094 	beq.w	800a20c <_dtoa_r+0x49c>
 800a0e4:	f1ba 0f00 	cmp.w	sl, #0
 800a0e8:	dd2f      	ble.n	800a14a <_dtoa_r+0x3da>
 800a0ea:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a0ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a0f2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a0f6:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a0fa:	3201      	adds	r2, #1
 800a0fc:	4650      	mov	r0, sl
 800a0fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a102:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a106:	ee07 2a90 	vmov	s15, r2
 800a10a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a10e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a112:	ee15 4a90 	vmov	r4, s11
 800a116:	ec52 1b15 	vmov	r1, r2, d5
 800a11a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a11e:	2800      	cmp	r0, #0
 800a120:	d177      	bne.n	800a212 <_dtoa_r+0x4a2>
 800a122:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a126:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a12a:	ec42 1b17 	vmov	d7, r1, r2
 800a12e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a136:	f300 8263 	bgt.w	800a600 <_dtoa_r+0x890>
 800a13a:	eeb1 7b47 	vneg.f64	d7, d7
 800a13e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a146:	f100 8258 	bmi.w	800a5fa <_dtoa_r+0x88a>
 800a14a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a14e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a150:	2a00      	cmp	r2, #0
 800a152:	f2c0 811d 	blt.w	800a390 <_dtoa_r+0x620>
 800a156:	f1bb 0f0e 	cmp.w	fp, #14
 800a15a:	f300 8119 	bgt.w	800a390 <_dtoa_r+0x620>
 800a15e:	4b8a      	ldr	r3, [pc, #552]	; (800a388 <_dtoa_r+0x618>)
 800a160:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a164:	ed93 6b00 	vldr	d6, [r3]
 800a168:	9b08      	ldr	r3, [sp, #32]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f280 80b7 	bge.w	800a2de <_dtoa_r+0x56e>
 800a170:	f1b9 0f00 	cmp.w	r9, #0
 800a174:	f300 80b3 	bgt.w	800a2de <_dtoa_r+0x56e>
 800a178:	f040 823f 	bne.w	800a5fa <_dtoa_r+0x88a>
 800a17c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a180:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a184:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a188:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a190:	464c      	mov	r4, r9
 800a192:	464f      	mov	r7, r9
 800a194:	f280 8215 	bge.w	800a5c2 <_dtoa_r+0x852>
 800a198:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a19c:	2331      	movs	r3, #49	; 0x31
 800a19e:	f808 3b01 	strb.w	r3, [r8], #1
 800a1a2:	f10b 0b01 	add.w	fp, fp, #1
 800a1a6:	e211      	b.n	800a5cc <_dtoa_r+0x85c>
 800a1a8:	2202      	movs	r2, #2
 800a1aa:	e780      	b.n	800a0ae <_dtoa_r+0x33e>
 800a1ac:	07cc      	lsls	r4, r1, #31
 800a1ae:	d504      	bpl.n	800a1ba <_dtoa_r+0x44a>
 800a1b0:	ed90 6b00 	vldr	d6, [r0]
 800a1b4:	3201      	adds	r2, #1
 800a1b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a1ba:	1049      	asrs	r1, r1, #1
 800a1bc:	3008      	adds	r0, #8
 800a1be:	e777      	b.n	800a0b0 <_dtoa_r+0x340>
 800a1c0:	d022      	beq.n	800a208 <_dtoa_r+0x498>
 800a1c2:	f1cb 0100 	rsb	r1, fp, #0
 800a1c6:	4a70      	ldr	r2, [pc, #448]	; (800a388 <_dtoa_r+0x618>)
 800a1c8:	f001 000f 	and.w	r0, r1, #15
 800a1cc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a1d0:	ed92 7b00 	vldr	d7, [r2]
 800a1d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a1d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a1dc:	486b      	ldr	r0, [pc, #428]	; (800a38c <_dtoa_r+0x61c>)
 800a1de:	1109      	asrs	r1, r1, #4
 800a1e0:	2400      	movs	r4, #0
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	b929      	cbnz	r1, 800a1f2 <_dtoa_r+0x482>
 800a1e6:	2c00      	cmp	r4, #0
 800a1e8:	f43f af6a 	beq.w	800a0c0 <_dtoa_r+0x350>
 800a1ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a1f0:	e766      	b.n	800a0c0 <_dtoa_r+0x350>
 800a1f2:	07cf      	lsls	r7, r1, #31
 800a1f4:	d505      	bpl.n	800a202 <_dtoa_r+0x492>
 800a1f6:	ed90 6b00 	vldr	d6, [r0]
 800a1fa:	3201      	adds	r2, #1
 800a1fc:	2401      	movs	r4, #1
 800a1fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a202:	1049      	asrs	r1, r1, #1
 800a204:	3008      	adds	r0, #8
 800a206:	e7ed      	b.n	800a1e4 <_dtoa_r+0x474>
 800a208:	2202      	movs	r2, #2
 800a20a:	e759      	b.n	800a0c0 <_dtoa_r+0x350>
 800a20c:	465f      	mov	r7, fp
 800a20e:	4648      	mov	r0, r9
 800a210:	e775      	b.n	800a0fe <_dtoa_r+0x38e>
 800a212:	ec42 1b17 	vmov	d7, r1, r2
 800a216:	4a5c      	ldr	r2, [pc, #368]	; (800a388 <_dtoa_r+0x618>)
 800a218:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a21c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a220:	9a01      	ldr	r2, [sp, #4]
 800a222:	1814      	adds	r4, r2, r0
 800a224:	9a07      	ldr	r2, [sp, #28]
 800a226:	b352      	cbz	r2, 800a27e <_dtoa_r+0x50e>
 800a228:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a22c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a230:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a234:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a238:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a23c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a240:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a244:	ee14 2a90 	vmov	r2, s9
 800a248:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a24c:	3230      	adds	r2, #48	; 0x30
 800a24e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a252:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a25a:	f808 2b01 	strb.w	r2, [r8], #1
 800a25e:	d439      	bmi.n	800a2d4 <_dtoa_r+0x564>
 800a260:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a264:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a26c:	d472      	bmi.n	800a354 <_dtoa_r+0x5e4>
 800a26e:	45a0      	cmp	r8, r4
 800a270:	f43f af6b 	beq.w	800a14a <_dtoa_r+0x3da>
 800a274:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a278:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a27c:	e7e0      	b.n	800a240 <_dtoa_r+0x4d0>
 800a27e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a282:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a286:	4621      	mov	r1, r4
 800a288:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a28c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a290:	ee14 2a90 	vmov	r2, s9
 800a294:	3230      	adds	r2, #48	; 0x30
 800a296:	f808 2b01 	strb.w	r2, [r8], #1
 800a29a:	45a0      	cmp	r8, r4
 800a29c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a2a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a2a4:	d118      	bne.n	800a2d8 <_dtoa_r+0x568>
 800a2a6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a2aa:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a2ae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2b6:	dc4d      	bgt.n	800a354 <_dtoa_r+0x5e4>
 800a2b8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a2bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c4:	f57f af41 	bpl.w	800a14a <_dtoa_r+0x3da>
 800a2c8:	4688      	mov	r8, r1
 800a2ca:	3901      	subs	r1, #1
 800a2cc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a2d0:	2b30      	cmp	r3, #48	; 0x30
 800a2d2:	d0f9      	beq.n	800a2c8 <_dtoa_r+0x558>
 800a2d4:	46bb      	mov	fp, r7
 800a2d6:	e02a      	b.n	800a32e <_dtoa_r+0x5be>
 800a2d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a2dc:	e7d6      	b.n	800a28c <_dtoa_r+0x51c>
 800a2de:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2e2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a2e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a2ea:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a2ee:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a2f2:	ee15 3a10 	vmov	r3, s10
 800a2f6:	3330      	adds	r3, #48	; 0x30
 800a2f8:	f808 3b01 	strb.w	r3, [r8], #1
 800a2fc:	9b01      	ldr	r3, [sp, #4]
 800a2fe:	eba8 0303 	sub.w	r3, r8, r3
 800a302:	4599      	cmp	r9, r3
 800a304:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a308:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a30c:	d133      	bne.n	800a376 <_dtoa_r+0x606>
 800a30e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a312:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a31a:	dc1a      	bgt.n	800a352 <_dtoa_r+0x5e2>
 800a31c:	eeb4 7b46 	vcmp.f64	d7, d6
 800a320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a324:	d103      	bne.n	800a32e <_dtoa_r+0x5be>
 800a326:	ee15 3a10 	vmov	r3, s10
 800a32a:	07d9      	lsls	r1, r3, #31
 800a32c:	d411      	bmi.n	800a352 <_dtoa_r+0x5e2>
 800a32e:	4629      	mov	r1, r5
 800a330:	4630      	mov	r0, r6
 800a332:	f000 ff5f 	bl	800b1f4 <_Bfree>
 800a336:	2300      	movs	r3, #0
 800a338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a33a:	f888 3000 	strb.w	r3, [r8]
 800a33e:	f10b 0301 	add.w	r3, fp, #1
 800a342:	6013      	str	r3, [r2, #0]
 800a344:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a346:	2b00      	cmp	r3, #0
 800a348:	f43f ad61 	beq.w	8009e0e <_dtoa_r+0x9e>
 800a34c:	f8c3 8000 	str.w	r8, [r3]
 800a350:	e55d      	b.n	8009e0e <_dtoa_r+0x9e>
 800a352:	465f      	mov	r7, fp
 800a354:	4643      	mov	r3, r8
 800a356:	4698      	mov	r8, r3
 800a358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a35c:	2a39      	cmp	r2, #57	; 0x39
 800a35e:	d106      	bne.n	800a36e <_dtoa_r+0x5fe>
 800a360:	9a01      	ldr	r2, [sp, #4]
 800a362:	429a      	cmp	r2, r3
 800a364:	d1f7      	bne.n	800a356 <_dtoa_r+0x5e6>
 800a366:	9901      	ldr	r1, [sp, #4]
 800a368:	2230      	movs	r2, #48	; 0x30
 800a36a:	3701      	adds	r7, #1
 800a36c:	700a      	strb	r2, [r1, #0]
 800a36e:	781a      	ldrb	r2, [r3, #0]
 800a370:	3201      	adds	r2, #1
 800a372:	701a      	strb	r2, [r3, #0]
 800a374:	e7ae      	b.n	800a2d4 <_dtoa_r+0x564>
 800a376:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a37a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a382:	d1b2      	bne.n	800a2ea <_dtoa_r+0x57a>
 800a384:	e7d3      	b.n	800a32e <_dtoa_r+0x5be>
 800a386:	bf00      	nop
 800a388:	0800cd88 	.word	0x0800cd88
 800a38c:	0800cd60 	.word	0x0800cd60
 800a390:	9907      	ldr	r1, [sp, #28]
 800a392:	2900      	cmp	r1, #0
 800a394:	f000 80d0 	beq.w	800a538 <_dtoa_r+0x7c8>
 800a398:	9906      	ldr	r1, [sp, #24]
 800a39a:	2901      	cmp	r1, #1
 800a39c:	f300 80b4 	bgt.w	800a508 <_dtoa_r+0x798>
 800a3a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a3a2:	2900      	cmp	r1, #0
 800a3a4:	f000 80ac 	beq.w	800a500 <_dtoa_r+0x790>
 800a3a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a3ac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a3b0:	461c      	mov	r4, r3
 800a3b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a3b4:	9b04      	ldr	r3, [sp, #16]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	9304      	str	r3, [sp, #16]
 800a3ba:	9b05      	ldr	r3, [sp, #20]
 800a3bc:	2101      	movs	r1, #1
 800a3be:	4413      	add	r3, r2
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	9305      	str	r3, [sp, #20]
 800a3c4:	f001 f818 	bl	800b3f8 <__i2b>
 800a3c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ca:	4607      	mov	r7, r0
 800a3cc:	f1b8 0f00 	cmp.w	r8, #0
 800a3d0:	dd0d      	ble.n	800a3ee <_dtoa_r+0x67e>
 800a3d2:	9a05      	ldr	r2, [sp, #20]
 800a3d4:	2a00      	cmp	r2, #0
 800a3d6:	dd0a      	ble.n	800a3ee <_dtoa_r+0x67e>
 800a3d8:	4542      	cmp	r2, r8
 800a3da:	9904      	ldr	r1, [sp, #16]
 800a3dc:	bfa8      	it	ge
 800a3de:	4642      	movge	r2, r8
 800a3e0:	1a89      	subs	r1, r1, r2
 800a3e2:	9104      	str	r1, [sp, #16]
 800a3e4:	9905      	ldr	r1, [sp, #20]
 800a3e6:	eba8 0802 	sub.w	r8, r8, r2
 800a3ea:	1a8a      	subs	r2, r1, r2
 800a3ec:	9205      	str	r2, [sp, #20]
 800a3ee:	b303      	cbz	r3, 800a432 <_dtoa_r+0x6c2>
 800a3f0:	9a07      	ldr	r2, [sp, #28]
 800a3f2:	2a00      	cmp	r2, #0
 800a3f4:	f000 80a5 	beq.w	800a542 <_dtoa_r+0x7d2>
 800a3f8:	2c00      	cmp	r4, #0
 800a3fa:	dd13      	ble.n	800a424 <_dtoa_r+0x6b4>
 800a3fc:	4639      	mov	r1, r7
 800a3fe:	4622      	mov	r2, r4
 800a400:	4630      	mov	r0, r6
 800a402:	930d      	str	r3, [sp, #52]	; 0x34
 800a404:	f001 f8b8 	bl	800b578 <__pow5mult>
 800a408:	462a      	mov	r2, r5
 800a40a:	4601      	mov	r1, r0
 800a40c:	4607      	mov	r7, r0
 800a40e:	4630      	mov	r0, r6
 800a410:	f001 f808 	bl	800b424 <__multiply>
 800a414:	4629      	mov	r1, r5
 800a416:	900a      	str	r0, [sp, #40]	; 0x28
 800a418:	4630      	mov	r0, r6
 800a41a:	f000 feeb 	bl	800b1f4 <_Bfree>
 800a41e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a422:	4615      	mov	r5, r2
 800a424:	1b1a      	subs	r2, r3, r4
 800a426:	d004      	beq.n	800a432 <_dtoa_r+0x6c2>
 800a428:	4629      	mov	r1, r5
 800a42a:	4630      	mov	r0, r6
 800a42c:	f001 f8a4 	bl	800b578 <__pow5mult>
 800a430:	4605      	mov	r5, r0
 800a432:	2101      	movs	r1, #1
 800a434:	4630      	mov	r0, r6
 800a436:	f000 ffdf 	bl	800b3f8 <__i2b>
 800a43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	4604      	mov	r4, r0
 800a440:	f340 8081 	ble.w	800a546 <_dtoa_r+0x7d6>
 800a444:	461a      	mov	r2, r3
 800a446:	4601      	mov	r1, r0
 800a448:	4630      	mov	r0, r6
 800a44a:	f001 f895 	bl	800b578 <__pow5mult>
 800a44e:	9b06      	ldr	r3, [sp, #24]
 800a450:	2b01      	cmp	r3, #1
 800a452:	4604      	mov	r4, r0
 800a454:	dd7a      	ble.n	800a54c <_dtoa_r+0x7dc>
 800a456:	2300      	movs	r3, #0
 800a458:	930a      	str	r3, [sp, #40]	; 0x28
 800a45a:	6922      	ldr	r2, [r4, #16]
 800a45c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a460:	6910      	ldr	r0, [r2, #16]
 800a462:	f000 ff79 	bl	800b358 <__hi0bits>
 800a466:	f1c0 0020 	rsb	r0, r0, #32
 800a46a:	9b05      	ldr	r3, [sp, #20]
 800a46c:	4418      	add	r0, r3
 800a46e:	f010 001f 	ands.w	r0, r0, #31
 800a472:	f000 808c 	beq.w	800a58e <_dtoa_r+0x81e>
 800a476:	f1c0 0220 	rsb	r2, r0, #32
 800a47a:	2a04      	cmp	r2, #4
 800a47c:	f340 8085 	ble.w	800a58a <_dtoa_r+0x81a>
 800a480:	f1c0 001c 	rsb	r0, r0, #28
 800a484:	9b04      	ldr	r3, [sp, #16]
 800a486:	4403      	add	r3, r0
 800a488:	9304      	str	r3, [sp, #16]
 800a48a:	9b05      	ldr	r3, [sp, #20]
 800a48c:	4403      	add	r3, r0
 800a48e:	4480      	add	r8, r0
 800a490:	9305      	str	r3, [sp, #20]
 800a492:	9b04      	ldr	r3, [sp, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	dd05      	ble.n	800a4a4 <_dtoa_r+0x734>
 800a498:	4629      	mov	r1, r5
 800a49a:	461a      	mov	r2, r3
 800a49c:	4630      	mov	r0, r6
 800a49e:	f001 f8c5 	bl	800b62c <__lshift>
 800a4a2:	4605      	mov	r5, r0
 800a4a4:	9b05      	ldr	r3, [sp, #20]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	dd05      	ble.n	800a4b6 <_dtoa_r+0x746>
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f001 f8bc 	bl	800b62c <__lshift>
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d06a      	beq.n	800a592 <_dtoa_r+0x822>
 800a4bc:	4621      	mov	r1, r4
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f001 f924 	bl	800b70c <__mcmp>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	da64      	bge.n	800a592 <_dtoa_r+0x822>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	220a      	movs	r2, #10
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	f000 feb2 	bl	800b238 <__multadd>
 800a4d4:	9b07      	ldr	r3, [sp, #28]
 800a4d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a4da:	4605      	mov	r5, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 8191 	beq.w	800a804 <_dtoa_r+0xa94>
 800a4e2:	4639      	mov	r1, r7
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	220a      	movs	r2, #10
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f000 fea5 	bl	800b238 <__multadd>
 800a4ee:	f1ba 0f00 	cmp.w	sl, #0
 800a4f2:	4607      	mov	r7, r0
 800a4f4:	f300 808d 	bgt.w	800a612 <_dtoa_r+0x8a2>
 800a4f8:	9b06      	ldr	r3, [sp, #24]
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	dc50      	bgt.n	800a5a0 <_dtoa_r+0x830>
 800a4fe:	e088      	b.n	800a612 <_dtoa_r+0x8a2>
 800a500:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a502:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a506:	e751      	b.n	800a3ac <_dtoa_r+0x63c>
 800a508:	f109 34ff 	add.w	r4, r9, #4294967295
 800a50c:	42a3      	cmp	r3, r4
 800a50e:	bfbf      	itttt	lt
 800a510:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a512:	1ae3      	sublt	r3, r4, r3
 800a514:	18d2      	addlt	r2, r2, r3
 800a516:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a518:	bfb6      	itet	lt
 800a51a:	4623      	movlt	r3, r4
 800a51c:	1b1c      	subge	r4, r3, r4
 800a51e:	2400      	movlt	r4, #0
 800a520:	f1b9 0f00 	cmp.w	r9, #0
 800a524:	bfb5      	itete	lt
 800a526:	9a04      	ldrlt	r2, [sp, #16]
 800a528:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a52c:	eba2 0809 	sublt.w	r8, r2, r9
 800a530:	464a      	movge	r2, r9
 800a532:	bfb8      	it	lt
 800a534:	2200      	movlt	r2, #0
 800a536:	e73c      	b.n	800a3b2 <_dtoa_r+0x642>
 800a538:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a53c:	9f07      	ldr	r7, [sp, #28]
 800a53e:	461c      	mov	r4, r3
 800a540:	e744      	b.n	800a3cc <_dtoa_r+0x65c>
 800a542:	461a      	mov	r2, r3
 800a544:	e770      	b.n	800a428 <_dtoa_r+0x6b8>
 800a546:	9b06      	ldr	r3, [sp, #24]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	dc18      	bgt.n	800a57e <_dtoa_r+0x80e>
 800a54c:	9b02      	ldr	r3, [sp, #8]
 800a54e:	b9b3      	cbnz	r3, 800a57e <_dtoa_r+0x80e>
 800a550:	9b03      	ldr	r3, [sp, #12]
 800a552:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a556:	b9a2      	cbnz	r2, 800a582 <_dtoa_r+0x812>
 800a558:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a55c:	0d12      	lsrs	r2, r2, #20
 800a55e:	0512      	lsls	r2, r2, #20
 800a560:	b18a      	cbz	r2, 800a586 <_dtoa_r+0x816>
 800a562:	9b04      	ldr	r3, [sp, #16]
 800a564:	3301      	adds	r3, #1
 800a566:	9304      	str	r3, [sp, #16]
 800a568:	9b05      	ldr	r3, [sp, #20]
 800a56a:	3301      	adds	r3, #1
 800a56c:	9305      	str	r3, [sp, #20]
 800a56e:	2301      	movs	r3, #1
 800a570:	930a      	str	r3, [sp, #40]	; 0x28
 800a572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a574:	2b00      	cmp	r3, #0
 800a576:	f47f af70 	bne.w	800a45a <_dtoa_r+0x6ea>
 800a57a:	2001      	movs	r0, #1
 800a57c:	e775      	b.n	800a46a <_dtoa_r+0x6fa>
 800a57e:	2300      	movs	r3, #0
 800a580:	e7f6      	b.n	800a570 <_dtoa_r+0x800>
 800a582:	9b02      	ldr	r3, [sp, #8]
 800a584:	e7f4      	b.n	800a570 <_dtoa_r+0x800>
 800a586:	920a      	str	r2, [sp, #40]	; 0x28
 800a588:	e7f3      	b.n	800a572 <_dtoa_r+0x802>
 800a58a:	d082      	beq.n	800a492 <_dtoa_r+0x722>
 800a58c:	4610      	mov	r0, r2
 800a58e:	301c      	adds	r0, #28
 800a590:	e778      	b.n	800a484 <_dtoa_r+0x714>
 800a592:	f1b9 0f00 	cmp.w	r9, #0
 800a596:	dc37      	bgt.n	800a608 <_dtoa_r+0x898>
 800a598:	9b06      	ldr	r3, [sp, #24]
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	dd34      	ble.n	800a608 <_dtoa_r+0x898>
 800a59e:	46ca      	mov	sl, r9
 800a5a0:	f1ba 0f00 	cmp.w	sl, #0
 800a5a4:	d10d      	bne.n	800a5c2 <_dtoa_r+0x852>
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	4653      	mov	r3, sl
 800a5aa:	2205      	movs	r2, #5
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	f000 fe43 	bl	800b238 <__multadd>
 800a5b2:	4601      	mov	r1, r0
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	f001 f8a8 	bl	800b70c <__mcmp>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	f73f adeb 	bgt.w	800a198 <_dtoa_r+0x428>
 800a5c2:	9b08      	ldr	r3, [sp, #32]
 800a5c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a5c8:	ea6f 0b03 	mvn.w	fp, r3
 800a5cc:	f04f 0900 	mov.w	r9, #0
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f000 fe0e 	bl	800b1f4 <_Bfree>
 800a5d8:	2f00      	cmp	r7, #0
 800a5da:	f43f aea8 	beq.w	800a32e <_dtoa_r+0x5be>
 800a5de:	f1b9 0f00 	cmp.w	r9, #0
 800a5e2:	d005      	beq.n	800a5f0 <_dtoa_r+0x880>
 800a5e4:	45b9      	cmp	r9, r7
 800a5e6:	d003      	beq.n	800a5f0 <_dtoa_r+0x880>
 800a5e8:	4649      	mov	r1, r9
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	f000 fe02 	bl	800b1f4 <_Bfree>
 800a5f0:	4639      	mov	r1, r7
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f000 fdfe 	bl	800b1f4 <_Bfree>
 800a5f8:	e699      	b.n	800a32e <_dtoa_r+0x5be>
 800a5fa:	2400      	movs	r4, #0
 800a5fc:	4627      	mov	r7, r4
 800a5fe:	e7e0      	b.n	800a5c2 <_dtoa_r+0x852>
 800a600:	46bb      	mov	fp, r7
 800a602:	4604      	mov	r4, r0
 800a604:	4607      	mov	r7, r0
 800a606:	e5c7      	b.n	800a198 <_dtoa_r+0x428>
 800a608:	9b07      	ldr	r3, [sp, #28]
 800a60a:	46ca      	mov	sl, r9
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f000 8100 	beq.w	800a812 <_dtoa_r+0xaa2>
 800a612:	f1b8 0f00 	cmp.w	r8, #0
 800a616:	dd05      	ble.n	800a624 <_dtoa_r+0x8b4>
 800a618:	4639      	mov	r1, r7
 800a61a:	4642      	mov	r2, r8
 800a61c:	4630      	mov	r0, r6
 800a61e:	f001 f805 	bl	800b62c <__lshift>
 800a622:	4607      	mov	r7, r0
 800a624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a626:	2b00      	cmp	r3, #0
 800a628:	d05d      	beq.n	800a6e6 <_dtoa_r+0x976>
 800a62a:	6879      	ldr	r1, [r7, #4]
 800a62c:	4630      	mov	r0, r6
 800a62e:	f000 fda1 	bl	800b174 <_Balloc>
 800a632:	4680      	mov	r8, r0
 800a634:	b928      	cbnz	r0, 800a642 <_dtoa_r+0x8d2>
 800a636:	4b82      	ldr	r3, [pc, #520]	; (800a840 <_dtoa_r+0xad0>)
 800a638:	4602      	mov	r2, r0
 800a63a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a63e:	f7ff bbaf 	b.w	8009da0 <_dtoa_r+0x30>
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	3202      	adds	r2, #2
 800a646:	0092      	lsls	r2, r2, #2
 800a648:	f107 010c 	add.w	r1, r7, #12
 800a64c:	300c      	adds	r0, #12
 800a64e:	f000 fd83 	bl	800b158 <memcpy>
 800a652:	2201      	movs	r2, #1
 800a654:	4641      	mov	r1, r8
 800a656:	4630      	mov	r0, r6
 800a658:	f000 ffe8 	bl	800b62c <__lshift>
 800a65c:	9b01      	ldr	r3, [sp, #4]
 800a65e:	3301      	adds	r3, #1
 800a660:	9304      	str	r3, [sp, #16]
 800a662:	9b01      	ldr	r3, [sp, #4]
 800a664:	4453      	add	r3, sl
 800a666:	9308      	str	r3, [sp, #32]
 800a668:	9b02      	ldr	r3, [sp, #8]
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	46b9      	mov	r9, r7
 800a670:	9307      	str	r3, [sp, #28]
 800a672:	4607      	mov	r7, r0
 800a674:	9b04      	ldr	r3, [sp, #16]
 800a676:	4621      	mov	r1, r4
 800a678:	3b01      	subs	r3, #1
 800a67a:	4628      	mov	r0, r5
 800a67c:	9302      	str	r3, [sp, #8]
 800a67e:	f7ff faeb 	bl	8009c58 <quorem>
 800a682:	4603      	mov	r3, r0
 800a684:	3330      	adds	r3, #48	; 0x30
 800a686:	9005      	str	r0, [sp, #20]
 800a688:	4649      	mov	r1, r9
 800a68a:	4628      	mov	r0, r5
 800a68c:	9309      	str	r3, [sp, #36]	; 0x24
 800a68e:	f001 f83d 	bl	800b70c <__mcmp>
 800a692:	463a      	mov	r2, r7
 800a694:	4682      	mov	sl, r0
 800a696:	4621      	mov	r1, r4
 800a698:	4630      	mov	r0, r6
 800a69a:	f001 f853 	bl	800b744 <__mdiff>
 800a69e:	68c2      	ldr	r2, [r0, #12]
 800a6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a2:	4680      	mov	r8, r0
 800a6a4:	bb0a      	cbnz	r2, 800a6ea <_dtoa_r+0x97a>
 800a6a6:	4601      	mov	r1, r0
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	f001 f82f 	bl	800b70c <__mcmp>
 800a6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	4641      	mov	r1, r8
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a6ba:	f000 fd9b 	bl	800b1f4 <_Bfree>
 800a6be:	9b06      	ldr	r3, [sp, #24]
 800a6c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6c2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a6c6:	ea43 0102 	orr.w	r1, r3, r2
 800a6ca:	9b07      	ldr	r3, [sp, #28]
 800a6cc:	430b      	orrs	r3, r1
 800a6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d0:	d10d      	bne.n	800a6ee <_dtoa_r+0x97e>
 800a6d2:	2b39      	cmp	r3, #57	; 0x39
 800a6d4:	d029      	beq.n	800a72a <_dtoa_r+0x9ba>
 800a6d6:	f1ba 0f00 	cmp.w	sl, #0
 800a6da:	dd01      	ble.n	800a6e0 <_dtoa_r+0x970>
 800a6dc:	9b05      	ldr	r3, [sp, #20]
 800a6de:	3331      	adds	r3, #49	; 0x31
 800a6e0:	9a02      	ldr	r2, [sp, #8]
 800a6e2:	7013      	strb	r3, [r2, #0]
 800a6e4:	e774      	b.n	800a5d0 <_dtoa_r+0x860>
 800a6e6:	4638      	mov	r0, r7
 800a6e8:	e7b8      	b.n	800a65c <_dtoa_r+0x8ec>
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	e7e1      	b.n	800a6b2 <_dtoa_r+0x942>
 800a6ee:	f1ba 0f00 	cmp.w	sl, #0
 800a6f2:	db06      	blt.n	800a702 <_dtoa_r+0x992>
 800a6f4:	9906      	ldr	r1, [sp, #24]
 800a6f6:	ea41 0a0a 	orr.w	sl, r1, sl
 800a6fa:	9907      	ldr	r1, [sp, #28]
 800a6fc:	ea5a 0101 	orrs.w	r1, sl, r1
 800a700:	d120      	bne.n	800a744 <_dtoa_r+0x9d4>
 800a702:	2a00      	cmp	r2, #0
 800a704:	ddec      	ble.n	800a6e0 <_dtoa_r+0x970>
 800a706:	4629      	mov	r1, r5
 800a708:	2201      	movs	r2, #1
 800a70a:	4630      	mov	r0, r6
 800a70c:	9304      	str	r3, [sp, #16]
 800a70e:	f000 ff8d 	bl	800b62c <__lshift>
 800a712:	4621      	mov	r1, r4
 800a714:	4605      	mov	r5, r0
 800a716:	f000 fff9 	bl	800b70c <__mcmp>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	9b04      	ldr	r3, [sp, #16]
 800a71e:	dc02      	bgt.n	800a726 <_dtoa_r+0x9b6>
 800a720:	d1de      	bne.n	800a6e0 <_dtoa_r+0x970>
 800a722:	07da      	lsls	r2, r3, #31
 800a724:	d5dc      	bpl.n	800a6e0 <_dtoa_r+0x970>
 800a726:	2b39      	cmp	r3, #57	; 0x39
 800a728:	d1d8      	bne.n	800a6dc <_dtoa_r+0x96c>
 800a72a:	9a02      	ldr	r2, [sp, #8]
 800a72c:	2339      	movs	r3, #57	; 0x39
 800a72e:	7013      	strb	r3, [r2, #0]
 800a730:	4643      	mov	r3, r8
 800a732:	4698      	mov	r8, r3
 800a734:	3b01      	subs	r3, #1
 800a736:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a73a:	2a39      	cmp	r2, #57	; 0x39
 800a73c:	d051      	beq.n	800a7e2 <_dtoa_r+0xa72>
 800a73e:	3201      	adds	r2, #1
 800a740:	701a      	strb	r2, [r3, #0]
 800a742:	e745      	b.n	800a5d0 <_dtoa_r+0x860>
 800a744:	2a00      	cmp	r2, #0
 800a746:	dd03      	ble.n	800a750 <_dtoa_r+0x9e0>
 800a748:	2b39      	cmp	r3, #57	; 0x39
 800a74a:	d0ee      	beq.n	800a72a <_dtoa_r+0x9ba>
 800a74c:	3301      	adds	r3, #1
 800a74e:	e7c7      	b.n	800a6e0 <_dtoa_r+0x970>
 800a750:	9a04      	ldr	r2, [sp, #16]
 800a752:	9908      	ldr	r1, [sp, #32]
 800a754:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a758:	428a      	cmp	r2, r1
 800a75a:	d02b      	beq.n	800a7b4 <_dtoa_r+0xa44>
 800a75c:	4629      	mov	r1, r5
 800a75e:	2300      	movs	r3, #0
 800a760:	220a      	movs	r2, #10
 800a762:	4630      	mov	r0, r6
 800a764:	f000 fd68 	bl	800b238 <__multadd>
 800a768:	45b9      	cmp	r9, r7
 800a76a:	4605      	mov	r5, r0
 800a76c:	f04f 0300 	mov.w	r3, #0
 800a770:	f04f 020a 	mov.w	r2, #10
 800a774:	4649      	mov	r1, r9
 800a776:	4630      	mov	r0, r6
 800a778:	d107      	bne.n	800a78a <_dtoa_r+0xa1a>
 800a77a:	f000 fd5d 	bl	800b238 <__multadd>
 800a77e:	4681      	mov	r9, r0
 800a780:	4607      	mov	r7, r0
 800a782:	9b04      	ldr	r3, [sp, #16]
 800a784:	3301      	adds	r3, #1
 800a786:	9304      	str	r3, [sp, #16]
 800a788:	e774      	b.n	800a674 <_dtoa_r+0x904>
 800a78a:	f000 fd55 	bl	800b238 <__multadd>
 800a78e:	4639      	mov	r1, r7
 800a790:	4681      	mov	r9, r0
 800a792:	2300      	movs	r3, #0
 800a794:	220a      	movs	r2, #10
 800a796:	4630      	mov	r0, r6
 800a798:	f000 fd4e 	bl	800b238 <__multadd>
 800a79c:	4607      	mov	r7, r0
 800a79e:	e7f0      	b.n	800a782 <_dtoa_r+0xa12>
 800a7a0:	f1ba 0f00 	cmp.w	sl, #0
 800a7a4:	9a01      	ldr	r2, [sp, #4]
 800a7a6:	bfcc      	ite	gt
 800a7a8:	46d0      	movgt	r8, sl
 800a7aa:	f04f 0801 	movle.w	r8, #1
 800a7ae:	4490      	add	r8, r2
 800a7b0:	f04f 0900 	mov.w	r9, #0
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	9302      	str	r3, [sp, #8]
 800a7bc:	f000 ff36 	bl	800b62c <__lshift>
 800a7c0:	4621      	mov	r1, r4
 800a7c2:	4605      	mov	r5, r0
 800a7c4:	f000 ffa2 	bl	800b70c <__mcmp>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	dcb1      	bgt.n	800a730 <_dtoa_r+0x9c0>
 800a7cc:	d102      	bne.n	800a7d4 <_dtoa_r+0xa64>
 800a7ce:	9b02      	ldr	r3, [sp, #8]
 800a7d0:	07db      	lsls	r3, r3, #31
 800a7d2:	d4ad      	bmi.n	800a730 <_dtoa_r+0x9c0>
 800a7d4:	4643      	mov	r3, r8
 800a7d6:	4698      	mov	r8, r3
 800a7d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7dc:	2a30      	cmp	r2, #48	; 0x30
 800a7de:	d0fa      	beq.n	800a7d6 <_dtoa_r+0xa66>
 800a7e0:	e6f6      	b.n	800a5d0 <_dtoa_r+0x860>
 800a7e2:	9a01      	ldr	r2, [sp, #4]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d1a4      	bne.n	800a732 <_dtoa_r+0x9c2>
 800a7e8:	f10b 0b01 	add.w	fp, fp, #1
 800a7ec:	2331      	movs	r3, #49	; 0x31
 800a7ee:	e778      	b.n	800a6e2 <_dtoa_r+0x972>
 800a7f0:	4b14      	ldr	r3, [pc, #80]	; (800a844 <_dtoa_r+0xad4>)
 800a7f2:	f7ff bb27 	b.w	8009e44 <_dtoa_r+0xd4>
 800a7f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f47f ab03 	bne.w	8009e04 <_dtoa_r+0x94>
 800a7fe:	4b12      	ldr	r3, [pc, #72]	; (800a848 <_dtoa_r+0xad8>)
 800a800:	f7ff bb20 	b.w	8009e44 <_dtoa_r+0xd4>
 800a804:	f1ba 0f00 	cmp.w	sl, #0
 800a808:	dc03      	bgt.n	800a812 <_dtoa_r+0xaa2>
 800a80a:	9b06      	ldr	r3, [sp, #24]
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	f73f aec7 	bgt.w	800a5a0 <_dtoa_r+0x830>
 800a812:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a816:	4621      	mov	r1, r4
 800a818:	4628      	mov	r0, r5
 800a81a:	f7ff fa1d 	bl	8009c58 <quorem>
 800a81e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a822:	f808 3b01 	strb.w	r3, [r8], #1
 800a826:	9a01      	ldr	r2, [sp, #4]
 800a828:	eba8 0202 	sub.w	r2, r8, r2
 800a82c:	4592      	cmp	sl, r2
 800a82e:	ddb7      	ble.n	800a7a0 <_dtoa_r+0xa30>
 800a830:	4629      	mov	r1, r5
 800a832:	2300      	movs	r3, #0
 800a834:	220a      	movs	r2, #10
 800a836:	4630      	mov	r0, r6
 800a838:	f000 fcfe 	bl	800b238 <__multadd>
 800a83c:	4605      	mov	r5, r0
 800a83e:	e7ea      	b.n	800a816 <_dtoa_r+0xaa6>
 800a840:	0800cc10 	.word	0x0800cc10
 800a844:	0800ca10 	.word	0x0800ca10
 800a848:	0800cb91 	.word	0x0800cb91

0800a84c <std>:
 800a84c:	2300      	movs	r3, #0
 800a84e:	b510      	push	{r4, lr}
 800a850:	4604      	mov	r4, r0
 800a852:	e9c0 3300 	strd	r3, r3, [r0]
 800a856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a85a:	6083      	str	r3, [r0, #8]
 800a85c:	8181      	strh	r1, [r0, #12]
 800a85e:	6643      	str	r3, [r0, #100]	; 0x64
 800a860:	81c2      	strh	r2, [r0, #14]
 800a862:	6183      	str	r3, [r0, #24]
 800a864:	4619      	mov	r1, r3
 800a866:	2208      	movs	r2, #8
 800a868:	305c      	adds	r0, #92	; 0x5c
 800a86a:	f7fd fd0b 	bl	8008284 <memset>
 800a86e:	4b05      	ldr	r3, [pc, #20]	; (800a884 <std+0x38>)
 800a870:	6263      	str	r3, [r4, #36]	; 0x24
 800a872:	4b05      	ldr	r3, [pc, #20]	; (800a888 <std+0x3c>)
 800a874:	62a3      	str	r3, [r4, #40]	; 0x28
 800a876:	4b05      	ldr	r3, [pc, #20]	; (800a88c <std+0x40>)
 800a878:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a87a:	4b05      	ldr	r3, [pc, #20]	; (800a890 <std+0x44>)
 800a87c:	6224      	str	r4, [r4, #32]
 800a87e:	6323      	str	r3, [r4, #48]	; 0x30
 800a880:	bd10      	pop	{r4, pc}
 800a882:	bf00      	nop
 800a884:	0800c279 	.word	0x0800c279
 800a888:	0800c29b 	.word	0x0800c29b
 800a88c:	0800c2d3 	.word	0x0800c2d3
 800a890:	0800c2f7 	.word	0x0800c2f7

0800a894 <_cleanup_r>:
 800a894:	4901      	ldr	r1, [pc, #4]	; (800a89c <_cleanup_r+0x8>)
 800a896:	f000 b8af 	b.w	800a9f8 <_fwalk_reent>
 800a89a:	bf00      	nop
 800a89c:	0800c651 	.word	0x0800c651

0800a8a0 <__sfmoreglue>:
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	2268      	movs	r2, #104	; 0x68
 800a8a4:	1e4d      	subs	r5, r1, #1
 800a8a6:	4355      	muls	r5, r2
 800a8a8:	460e      	mov	r6, r1
 800a8aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a8ae:	f001 f9a1 	bl	800bbf4 <_malloc_r>
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	b140      	cbz	r0, 800a8c8 <__sfmoreglue+0x28>
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	e9c0 1600 	strd	r1, r6, [r0]
 800a8bc:	300c      	adds	r0, #12
 800a8be:	60a0      	str	r0, [r4, #8]
 800a8c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a8c4:	f7fd fcde 	bl	8008284 <memset>
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	bd70      	pop	{r4, r5, r6, pc}

0800a8cc <__sfp_lock_acquire>:
 800a8cc:	4801      	ldr	r0, [pc, #4]	; (800a8d4 <__sfp_lock_acquire+0x8>)
 800a8ce:	f000 bc26 	b.w	800b11e <__retarget_lock_acquire_recursive>
 800a8d2:	bf00      	nop
 800a8d4:	24000569 	.word	0x24000569

0800a8d8 <__sfp_lock_release>:
 800a8d8:	4801      	ldr	r0, [pc, #4]	; (800a8e0 <__sfp_lock_release+0x8>)
 800a8da:	f000 bc21 	b.w	800b120 <__retarget_lock_release_recursive>
 800a8de:	bf00      	nop
 800a8e0:	24000569 	.word	0x24000569

0800a8e4 <__sinit_lock_acquire>:
 800a8e4:	4801      	ldr	r0, [pc, #4]	; (800a8ec <__sinit_lock_acquire+0x8>)
 800a8e6:	f000 bc1a 	b.w	800b11e <__retarget_lock_acquire_recursive>
 800a8ea:	bf00      	nop
 800a8ec:	2400056a 	.word	0x2400056a

0800a8f0 <__sinit_lock_release>:
 800a8f0:	4801      	ldr	r0, [pc, #4]	; (800a8f8 <__sinit_lock_release+0x8>)
 800a8f2:	f000 bc15 	b.w	800b120 <__retarget_lock_release_recursive>
 800a8f6:	bf00      	nop
 800a8f8:	2400056a 	.word	0x2400056a

0800a8fc <__sinit>:
 800a8fc:	b510      	push	{r4, lr}
 800a8fe:	4604      	mov	r4, r0
 800a900:	f7ff fff0 	bl	800a8e4 <__sinit_lock_acquire>
 800a904:	69a3      	ldr	r3, [r4, #24]
 800a906:	b11b      	cbz	r3, 800a910 <__sinit+0x14>
 800a908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a90c:	f7ff bff0 	b.w	800a8f0 <__sinit_lock_release>
 800a910:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a914:	6523      	str	r3, [r4, #80]	; 0x50
 800a916:	4b13      	ldr	r3, [pc, #76]	; (800a964 <__sinit+0x68>)
 800a918:	4a13      	ldr	r2, [pc, #76]	; (800a968 <__sinit+0x6c>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a91e:	42a3      	cmp	r3, r4
 800a920:	bf04      	itt	eq
 800a922:	2301      	moveq	r3, #1
 800a924:	61a3      	streq	r3, [r4, #24]
 800a926:	4620      	mov	r0, r4
 800a928:	f000 f820 	bl	800a96c <__sfp>
 800a92c:	6060      	str	r0, [r4, #4]
 800a92e:	4620      	mov	r0, r4
 800a930:	f000 f81c 	bl	800a96c <__sfp>
 800a934:	60a0      	str	r0, [r4, #8]
 800a936:	4620      	mov	r0, r4
 800a938:	f000 f818 	bl	800a96c <__sfp>
 800a93c:	2200      	movs	r2, #0
 800a93e:	60e0      	str	r0, [r4, #12]
 800a940:	2104      	movs	r1, #4
 800a942:	6860      	ldr	r0, [r4, #4]
 800a944:	f7ff ff82 	bl	800a84c <std>
 800a948:	68a0      	ldr	r0, [r4, #8]
 800a94a:	2201      	movs	r2, #1
 800a94c:	2109      	movs	r1, #9
 800a94e:	f7ff ff7d 	bl	800a84c <std>
 800a952:	68e0      	ldr	r0, [r4, #12]
 800a954:	2202      	movs	r2, #2
 800a956:	2112      	movs	r1, #18
 800a958:	f7ff ff78 	bl	800a84c <std>
 800a95c:	2301      	movs	r3, #1
 800a95e:	61a3      	str	r3, [r4, #24]
 800a960:	e7d2      	b.n	800a908 <__sinit+0xc>
 800a962:	bf00      	nop
 800a964:	0800c9fc 	.word	0x0800c9fc
 800a968:	0800a895 	.word	0x0800a895

0800a96c <__sfp>:
 800a96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96e:	4607      	mov	r7, r0
 800a970:	f7ff ffac 	bl	800a8cc <__sfp_lock_acquire>
 800a974:	4b1e      	ldr	r3, [pc, #120]	; (800a9f0 <__sfp+0x84>)
 800a976:	681e      	ldr	r6, [r3, #0]
 800a978:	69b3      	ldr	r3, [r6, #24]
 800a97a:	b913      	cbnz	r3, 800a982 <__sfp+0x16>
 800a97c:	4630      	mov	r0, r6
 800a97e:	f7ff ffbd 	bl	800a8fc <__sinit>
 800a982:	3648      	adds	r6, #72	; 0x48
 800a984:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a988:	3b01      	subs	r3, #1
 800a98a:	d503      	bpl.n	800a994 <__sfp+0x28>
 800a98c:	6833      	ldr	r3, [r6, #0]
 800a98e:	b30b      	cbz	r3, 800a9d4 <__sfp+0x68>
 800a990:	6836      	ldr	r6, [r6, #0]
 800a992:	e7f7      	b.n	800a984 <__sfp+0x18>
 800a994:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a998:	b9d5      	cbnz	r5, 800a9d0 <__sfp+0x64>
 800a99a:	4b16      	ldr	r3, [pc, #88]	; (800a9f4 <__sfp+0x88>)
 800a99c:	60e3      	str	r3, [r4, #12]
 800a99e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a9a2:	6665      	str	r5, [r4, #100]	; 0x64
 800a9a4:	f000 fbba 	bl	800b11c <__retarget_lock_init_recursive>
 800a9a8:	f7ff ff96 	bl	800a8d8 <__sfp_lock_release>
 800a9ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a9b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a9b4:	6025      	str	r5, [r4, #0]
 800a9b6:	61a5      	str	r5, [r4, #24]
 800a9b8:	2208      	movs	r2, #8
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a9c0:	f7fd fc60 	bl	8008284 <memset>
 800a9c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a9c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9d0:	3468      	adds	r4, #104	; 0x68
 800a9d2:	e7d9      	b.n	800a988 <__sfp+0x1c>
 800a9d4:	2104      	movs	r1, #4
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	f7ff ff62 	bl	800a8a0 <__sfmoreglue>
 800a9dc:	4604      	mov	r4, r0
 800a9de:	6030      	str	r0, [r6, #0]
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d1d5      	bne.n	800a990 <__sfp+0x24>
 800a9e4:	f7ff ff78 	bl	800a8d8 <__sfp_lock_release>
 800a9e8:	230c      	movs	r3, #12
 800a9ea:	603b      	str	r3, [r7, #0]
 800a9ec:	e7ee      	b.n	800a9cc <__sfp+0x60>
 800a9ee:	bf00      	nop
 800a9f0:	0800c9fc 	.word	0x0800c9fc
 800a9f4:	ffff0001 	.word	0xffff0001

0800a9f8 <_fwalk_reent>:
 800a9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	4688      	mov	r8, r1
 800aa00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa04:	2700      	movs	r7, #0
 800aa06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa0a:	f1b9 0901 	subs.w	r9, r9, #1
 800aa0e:	d505      	bpl.n	800aa1c <_fwalk_reent+0x24>
 800aa10:	6824      	ldr	r4, [r4, #0]
 800aa12:	2c00      	cmp	r4, #0
 800aa14:	d1f7      	bne.n	800aa06 <_fwalk_reent+0xe>
 800aa16:	4638      	mov	r0, r7
 800aa18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa1c:	89ab      	ldrh	r3, [r5, #12]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d907      	bls.n	800aa32 <_fwalk_reent+0x3a>
 800aa22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa26:	3301      	adds	r3, #1
 800aa28:	d003      	beq.n	800aa32 <_fwalk_reent+0x3a>
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	47c0      	blx	r8
 800aa30:	4307      	orrs	r7, r0
 800aa32:	3568      	adds	r5, #104	; 0x68
 800aa34:	e7e9      	b.n	800aa0a <_fwalk_reent+0x12>

0800aa36 <rshift>:
 800aa36:	6903      	ldr	r3, [r0, #16]
 800aa38:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aa3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa40:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aa44:	f100 0414 	add.w	r4, r0, #20
 800aa48:	dd45      	ble.n	800aad6 <rshift+0xa0>
 800aa4a:	f011 011f 	ands.w	r1, r1, #31
 800aa4e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa52:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa56:	d10c      	bne.n	800aa72 <rshift+0x3c>
 800aa58:	f100 0710 	add.w	r7, r0, #16
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	42b1      	cmp	r1, r6
 800aa60:	d334      	bcc.n	800aacc <rshift+0x96>
 800aa62:	1a9b      	subs	r3, r3, r2
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	1eea      	subs	r2, r5, #3
 800aa68:	4296      	cmp	r6, r2
 800aa6a:	bf38      	it	cc
 800aa6c:	2300      	movcc	r3, #0
 800aa6e:	4423      	add	r3, r4
 800aa70:	e015      	b.n	800aa9e <rshift+0x68>
 800aa72:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aa76:	f1c1 0820 	rsb	r8, r1, #32
 800aa7a:	40cf      	lsrs	r7, r1
 800aa7c:	f105 0e04 	add.w	lr, r5, #4
 800aa80:	46a1      	mov	r9, r4
 800aa82:	4576      	cmp	r6, lr
 800aa84:	46f4      	mov	ip, lr
 800aa86:	d815      	bhi.n	800aab4 <rshift+0x7e>
 800aa88:	1a9a      	subs	r2, r3, r2
 800aa8a:	0092      	lsls	r2, r2, #2
 800aa8c:	3a04      	subs	r2, #4
 800aa8e:	3501      	adds	r5, #1
 800aa90:	42ae      	cmp	r6, r5
 800aa92:	bf38      	it	cc
 800aa94:	2200      	movcc	r2, #0
 800aa96:	18a3      	adds	r3, r4, r2
 800aa98:	50a7      	str	r7, [r4, r2]
 800aa9a:	b107      	cbz	r7, 800aa9e <rshift+0x68>
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	1b1a      	subs	r2, r3, r4
 800aaa0:	42a3      	cmp	r3, r4
 800aaa2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aaa6:	bf08      	it	eq
 800aaa8:	2300      	moveq	r3, #0
 800aaaa:	6102      	str	r2, [r0, #16]
 800aaac:	bf08      	it	eq
 800aaae:	6143      	streq	r3, [r0, #20]
 800aab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aab4:	f8dc c000 	ldr.w	ip, [ip]
 800aab8:	fa0c fc08 	lsl.w	ip, ip, r8
 800aabc:	ea4c 0707 	orr.w	r7, ip, r7
 800aac0:	f849 7b04 	str.w	r7, [r9], #4
 800aac4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aac8:	40cf      	lsrs	r7, r1
 800aaca:	e7da      	b.n	800aa82 <rshift+0x4c>
 800aacc:	f851 cb04 	ldr.w	ip, [r1], #4
 800aad0:	f847 cf04 	str.w	ip, [r7, #4]!
 800aad4:	e7c3      	b.n	800aa5e <rshift+0x28>
 800aad6:	4623      	mov	r3, r4
 800aad8:	e7e1      	b.n	800aa9e <rshift+0x68>

0800aada <__hexdig_fun>:
 800aada:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aade:	2b09      	cmp	r3, #9
 800aae0:	d802      	bhi.n	800aae8 <__hexdig_fun+0xe>
 800aae2:	3820      	subs	r0, #32
 800aae4:	b2c0      	uxtb	r0, r0
 800aae6:	4770      	bx	lr
 800aae8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aaec:	2b05      	cmp	r3, #5
 800aaee:	d801      	bhi.n	800aaf4 <__hexdig_fun+0x1a>
 800aaf0:	3847      	subs	r0, #71	; 0x47
 800aaf2:	e7f7      	b.n	800aae4 <__hexdig_fun+0xa>
 800aaf4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aaf8:	2b05      	cmp	r3, #5
 800aafa:	d801      	bhi.n	800ab00 <__hexdig_fun+0x26>
 800aafc:	3827      	subs	r0, #39	; 0x27
 800aafe:	e7f1      	b.n	800aae4 <__hexdig_fun+0xa>
 800ab00:	2000      	movs	r0, #0
 800ab02:	4770      	bx	lr

0800ab04 <__gethex>:
 800ab04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab08:	ed2d 8b02 	vpush	{d8}
 800ab0c:	b089      	sub	sp, #36	; 0x24
 800ab0e:	ee08 0a10 	vmov	s16, r0
 800ab12:	9304      	str	r3, [sp, #16]
 800ab14:	4bb4      	ldr	r3, [pc, #720]	; (800ade8 <__gethex+0x2e4>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	9301      	str	r3, [sp, #4]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	468b      	mov	fp, r1
 800ab1e:	4690      	mov	r8, r2
 800ab20:	f7f5 fbe6 	bl	80002f0 <strlen>
 800ab24:	9b01      	ldr	r3, [sp, #4]
 800ab26:	f8db 2000 	ldr.w	r2, [fp]
 800ab2a:	4403      	add	r3, r0
 800ab2c:	4682      	mov	sl, r0
 800ab2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ab32:	9305      	str	r3, [sp, #20]
 800ab34:	1c93      	adds	r3, r2, #2
 800ab36:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ab3a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ab3e:	32fe      	adds	r2, #254	; 0xfe
 800ab40:	18d1      	adds	r1, r2, r3
 800ab42:	461f      	mov	r7, r3
 800ab44:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab48:	9100      	str	r1, [sp, #0]
 800ab4a:	2830      	cmp	r0, #48	; 0x30
 800ab4c:	d0f8      	beq.n	800ab40 <__gethex+0x3c>
 800ab4e:	f7ff ffc4 	bl	800aada <__hexdig_fun>
 800ab52:	4604      	mov	r4, r0
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d13a      	bne.n	800abce <__gethex+0xca>
 800ab58:	9901      	ldr	r1, [sp, #4]
 800ab5a:	4652      	mov	r2, sl
 800ab5c:	4638      	mov	r0, r7
 800ab5e:	f001 fbce 	bl	800c2fe <strncmp>
 800ab62:	4605      	mov	r5, r0
 800ab64:	2800      	cmp	r0, #0
 800ab66:	d168      	bne.n	800ac3a <__gethex+0x136>
 800ab68:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ab6c:	eb07 060a 	add.w	r6, r7, sl
 800ab70:	f7ff ffb3 	bl	800aada <__hexdig_fun>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d062      	beq.n	800ac3e <__gethex+0x13a>
 800ab78:	4633      	mov	r3, r6
 800ab7a:	7818      	ldrb	r0, [r3, #0]
 800ab7c:	2830      	cmp	r0, #48	; 0x30
 800ab7e:	461f      	mov	r7, r3
 800ab80:	f103 0301 	add.w	r3, r3, #1
 800ab84:	d0f9      	beq.n	800ab7a <__gethex+0x76>
 800ab86:	f7ff ffa8 	bl	800aada <__hexdig_fun>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	fab0 f480 	clz	r4, r0
 800ab90:	0964      	lsrs	r4, r4, #5
 800ab92:	4635      	mov	r5, r6
 800ab94:	9300      	str	r3, [sp, #0]
 800ab96:	463a      	mov	r2, r7
 800ab98:	4616      	mov	r6, r2
 800ab9a:	3201      	adds	r2, #1
 800ab9c:	7830      	ldrb	r0, [r6, #0]
 800ab9e:	f7ff ff9c 	bl	800aada <__hexdig_fun>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d1f8      	bne.n	800ab98 <__gethex+0x94>
 800aba6:	9901      	ldr	r1, [sp, #4]
 800aba8:	4652      	mov	r2, sl
 800abaa:	4630      	mov	r0, r6
 800abac:	f001 fba7 	bl	800c2fe <strncmp>
 800abb0:	b980      	cbnz	r0, 800abd4 <__gethex+0xd0>
 800abb2:	b94d      	cbnz	r5, 800abc8 <__gethex+0xc4>
 800abb4:	eb06 050a 	add.w	r5, r6, sl
 800abb8:	462a      	mov	r2, r5
 800abba:	4616      	mov	r6, r2
 800abbc:	3201      	adds	r2, #1
 800abbe:	7830      	ldrb	r0, [r6, #0]
 800abc0:	f7ff ff8b 	bl	800aada <__hexdig_fun>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d1f8      	bne.n	800abba <__gethex+0xb6>
 800abc8:	1bad      	subs	r5, r5, r6
 800abca:	00ad      	lsls	r5, r5, #2
 800abcc:	e004      	b.n	800abd8 <__gethex+0xd4>
 800abce:	2400      	movs	r4, #0
 800abd0:	4625      	mov	r5, r4
 800abd2:	e7e0      	b.n	800ab96 <__gethex+0x92>
 800abd4:	2d00      	cmp	r5, #0
 800abd6:	d1f7      	bne.n	800abc8 <__gethex+0xc4>
 800abd8:	7833      	ldrb	r3, [r6, #0]
 800abda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800abde:	2b50      	cmp	r3, #80	; 0x50
 800abe0:	d13b      	bne.n	800ac5a <__gethex+0x156>
 800abe2:	7873      	ldrb	r3, [r6, #1]
 800abe4:	2b2b      	cmp	r3, #43	; 0x2b
 800abe6:	d02c      	beq.n	800ac42 <__gethex+0x13e>
 800abe8:	2b2d      	cmp	r3, #45	; 0x2d
 800abea:	d02e      	beq.n	800ac4a <__gethex+0x146>
 800abec:	1c71      	adds	r1, r6, #1
 800abee:	f04f 0900 	mov.w	r9, #0
 800abf2:	7808      	ldrb	r0, [r1, #0]
 800abf4:	f7ff ff71 	bl	800aada <__hexdig_fun>
 800abf8:	1e43      	subs	r3, r0, #1
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b18      	cmp	r3, #24
 800abfe:	d82c      	bhi.n	800ac5a <__gethex+0x156>
 800ac00:	f1a0 0210 	sub.w	r2, r0, #16
 800ac04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac08:	f7ff ff67 	bl	800aada <__hexdig_fun>
 800ac0c:	1e43      	subs	r3, r0, #1
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	2b18      	cmp	r3, #24
 800ac12:	d91d      	bls.n	800ac50 <__gethex+0x14c>
 800ac14:	f1b9 0f00 	cmp.w	r9, #0
 800ac18:	d000      	beq.n	800ac1c <__gethex+0x118>
 800ac1a:	4252      	negs	r2, r2
 800ac1c:	4415      	add	r5, r2
 800ac1e:	f8cb 1000 	str.w	r1, [fp]
 800ac22:	b1e4      	cbz	r4, 800ac5e <__gethex+0x15a>
 800ac24:	9b00      	ldr	r3, [sp, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	bf14      	ite	ne
 800ac2a:	2700      	movne	r7, #0
 800ac2c:	2706      	moveq	r7, #6
 800ac2e:	4638      	mov	r0, r7
 800ac30:	b009      	add	sp, #36	; 0x24
 800ac32:	ecbd 8b02 	vpop	{d8}
 800ac36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3a:	463e      	mov	r6, r7
 800ac3c:	4625      	mov	r5, r4
 800ac3e:	2401      	movs	r4, #1
 800ac40:	e7ca      	b.n	800abd8 <__gethex+0xd4>
 800ac42:	f04f 0900 	mov.w	r9, #0
 800ac46:	1cb1      	adds	r1, r6, #2
 800ac48:	e7d3      	b.n	800abf2 <__gethex+0xee>
 800ac4a:	f04f 0901 	mov.w	r9, #1
 800ac4e:	e7fa      	b.n	800ac46 <__gethex+0x142>
 800ac50:	230a      	movs	r3, #10
 800ac52:	fb03 0202 	mla	r2, r3, r2, r0
 800ac56:	3a10      	subs	r2, #16
 800ac58:	e7d4      	b.n	800ac04 <__gethex+0x100>
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	e7df      	b.n	800ac1e <__gethex+0x11a>
 800ac5e:	1bf3      	subs	r3, r6, r7
 800ac60:	3b01      	subs	r3, #1
 800ac62:	4621      	mov	r1, r4
 800ac64:	2b07      	cmp	r3, #7
 800ac66:	dc0b      	bgt.n	800ac80 <__gethex+0x17c>
 800ac68:	ee18 0a10 	vmov	r0, s16
 800ac6c:	f000 fa82 	bl	800b174 <_Balloc>
 800ac70:	4604      	mov	r4, r0
 800ac72:	b940      	cbnz	r0, 800ac86 <__gethex+0x182>
 800ac74:	4b5d      	ldr	r3, [pc, #372]	; (800adec <__gethex+0x2e8>)
 800ac76:	4602      	mov	r2, r0
 800ac78:	21de      	movs	r1, #222	; 0xde
 800ac7a:	485d      	ldr	r0, [pc, #372]	; (800adf0 <__gethex+0x2ec>)
 800ac7c:	f001 fc34 	bl	800c4e8 <__assert_func>
 800ac80:	3101      	adds	r1, #1
 800ac82:	105b      	asrs	r3, r3, #1
 800ac84:	e7ee      	b.n	800ac64 <__gethex+0x160>
 800ac86:	f100 0914 	add.w	r9, r0, #20
 800ac8a:	f04f 0b00 	mov.w	fp, #0
 800ac8e:	f1ca 0301 	rsb	r3, sl, #1
 800ac92:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac96:	f8cd b000 	str.w	fp, [sp]
 800ac9a:	9306      	str	r3, [sp, #24]
 800ac9c:	42b7      	cmp	r7, r6
 800ac9e:	d340      	bcc.n	800ad22 <__gethex+0x21e>
 800aca0:	9802      	ldr	r0, [sp, #8]
 800aca2:	9b00      	ldr	r3, [sp, #0]
 800aca4:	f840 3b04 	str.w	r3, [r0], #4
 800aca8:	eba0 0009 	sub.w	r0, r0, r9
 800acac:	1080      	asrs	r0, r0, #2
 800acae:	0146      	lsls	r6, r0, #5
 800acb0:	6120      	str	r0, [r4, #16]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 fb50 	bl	800b358 <__hi0bits>
 800acb8:	1a30      	subs	r0, r6, r0
 800acba:	f8d8 6000 	ldr.w	r6, [r8]
 800acbe:	42b0      	cmp	r0, r6
 800acc0:	dd63      	ble.n	800ad8a <__gethex+0x286>
 800acc2:	1b87      	subs	r7, r0, r6
 800acc4:	4639      	mov	r1, r7
 800acc6:	4620      	mov	r0, r4
 800acc8:	f000 fef1 	bl	800baae <__any_on>
 800accc:	4682      	mov	sl, r0
 800acce:	b1a8      	cbz	r0, 800acfc <__gethex+0x1f8>
 800acd0:	1e7b      	subs	r3, r7, #1
 800acd2:	1159      	asrs	r1, r3, #5
 800acd4:	f003 021f 	and.w	r2, r3, #31
 800acd8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800acdc:	f04f 0a01 	mov.w	sl, #1
 800ace0:	fa0a f202 	lsl.w	r2, sl, r2
 800ace4:	420a      	tst	r2, r1
 800ace6:	d009      	beq.n	800acfc <__gethex+0x1f8>
 800ace8:	4553      	cmp	r3, sl
 800acea:	dd05      	ble.n	800acf8 <__gethex+0x1f4>
 800acec:	1eb9      	subs	r1, r7, #2
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 fedd 	bl	800baae <__any_on>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d145      	bne.n	800ad84 <__gethex+0x280>
 800acf8:	f04f 0a02 	mov.w	sl, #2
 800acfc:	4639      	mov	r1, r7
 800acfe:	4620      	mov	r0, r4
 800ad00:	f7ff fe99 	bl	800aa36 <rshift>
 800ad04:	443d      	add	r5, r7
 800ad06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad0a:	42ab      	cmp	r3, r5
 800ad0c:	da4c      	bge.n	800ada8 <__gethex+0x2a4>
 800ad0e:	ee18 0a10 	vmov	r0, s16
 800ad12:	4621      	mov	r1, r4
 800ad14:	f000 fa6e 	bl	800b1f4 <_Bfree>
 800ad18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	6013      	str	r3, [r2, #0]
 800ad1e:	27a3      	movs	r7, #163	; 0xa3
 800ad20:	e785      	b.n	800ac2e <__gethex+0x12a>
 800ad22:	1e73      	subs	r3, r6, #1
 800ad24:	9a05      	ldr	r2, [sp, #20]
 800ad26:	9303      	str	r3, [sp, #12]
 800ad28:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d019      	beq.n	800ad64 <__gethex+0x260>
 800ad30:	f1bb 0f20 	cmp.w	fp, #32
 800ad34:	d107      	bne.n	800ad46 <__gethex+0x242>
 800ad36:	9b02      	ldr	r3, [sp, #8]
 800ad38:	9a00      	ldr	r2, [sp, #0]
 800ad3a:	f843 2b04 	str.w	r2, [r3], #4
 800ad3e:	9302      	str	r3, [sp, #8]
 800ad40:	2300      	movs	r3, #0
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	469b      	mov	fp, r3
 800ad46:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ad4a:	f7ff fec6 	bl	800aada <__hexdig_fun>
 800ad4e:	9b00      	ldr	r3, [sp, #0]
 800ad50:	f000 000f 	and.w	r0, r0, #15
 800ad54:	fa00 f00b 	lsl.w	r0, r0, fp
 800ad58:	4303      	orrs	r3, r0
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	f10b 0b04 	add.w	fp, fp, #4
 800ad60:	9b03      	ldr	r3, [sp, #12]
 800ad62:	e00d      	b.n	800ad80 <__gethex+0x27c>
 800ad64:	9b03      	ldr	r3, [sp, #12]
 800ad66:	9a06      	ldr	r2, [sp, #24]
 800ad68:	4413      	add	r3, r2
 800ad6a:	42bb      	cmp	r3, r7
 800ad6c:	d3e0      	bcc.n	800ad30 <__gethex+0x22c>
 800ad6e:	4618      	mov	r0, r3
 800ad70:	9901      	ldr	r1, [sp, #4]
 800ad72:	9307      	str	r3, [sp, #28]
 800ad74:	4652      	mov	r2, sl
 800ad76:	f001 fac2 	bl	800c2fe <strncmp>
 800ad7a:	9b07      	ldr	r3, [sp, #28]
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	d1d7      	bne.n	800ad30 <__gethex+0x22c>
 800ad80:	461e      	mov	r6, r3
 800ad82:	e78b      	b.n	800ac9c <__gethex+0x198>
 800ad84:	f04f 0a03 	mov.w	sl, #3
 800ad88:	e7b8      	b.n	800acfc <__gethex+0x1f8>
 800ad8a:	da0a      	bge.n	800ada2 <__gethex+0x29e>
 800ad8c:	1a37      	subs	r7, r6, r0
 800ad8e:	4621      	mov	r1, r4
 800ad90:	ee18 0a10 	vmov	r0, s16
 800ad94:	463a      	mov	r2, r7
 800ad96:	f000 fc49 	bl	800b62c <__lshift>
 800ad9a:	1bed      	subs	r5, r5, r7
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	f100 0914 	add.w	r9, r0, #20
 800ada2:	f04f 0a00 	mov.w	sl, #0
 800ada6:	e7ae      	b.n	800ad06 <__gethex+0x202>
 800ada8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800adac:	42a8      	cmp	r0, r5
 800adae:	dd72      	ble.n	800ae96 <__gethex+0x392>
 800adb0:	1b45      	subs	r5, r0, r5
 800adb2:	42ae      	cmp	r6, r5
 800adb4:	dc36      	bgt.n	800ae24 <__gethex+0x320>
 800adb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d02a      	beq.n	800ae14 <__gethex+0x310>
 800adbe:	2b03      	cmp	r3, #3
 800adc0:	d02c      	beq.n	800ae1c <__gethex+0x318>
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d11c      	bne.n	800ae00 <__gethex+0x2fc>
 800adc6:	42ae      	cmp	r6, r5
 800adc8:	d11a      	bne.n	800ae00 <__gethex+0x2fc>
 800adca:	2e01      	cmp	r6, #1
 800adcc:	d112      	bne.n	800adf4 <__gethex+0x2f0>
 800adce:	9a04      	ldr	r2, [sp, #16]
 800add0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800add4:	6013      	str	r3, [r2, #0]
 800add6:	2301      	movs	r3, #1
 800add8:	6123      	str	r3, [r4, #16]
 800adda:	f8c9 3000 	str.w	r3, [r9]
 800adde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ade0:	2762      	movs	r7, #98	; 0x62
 800ade2:	601c      	str	r4, [r3, #0]
 800ade4:	e723      	b.n	800ac2e <__gethex+0x12a>
 800ade6:	bf00      	nop
 800ade8:	0800ccec 	.word	0x0800ccec
 800adec:	0800cc10 	.word	0x0800cc10
 800adf0:	0800cc84 	.word	0x0800cc84
 800adf4:	1e71      	subs	r1, r6, #1
 800adf6:	4620      	mov	r0, r4
 800adf8:	f000 fe59 	bl	800baae <__any_on>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d1e6      	bne.n	800adce <__gethex+0x2ca>
 800ae00:	ee18 0a10 	vmov	r0, s16
 800ae04:	4621      	mov	r1, r4
 800ae06:	f000 f9f5 	bl	800b1f4 <_Bfree>
 800ae0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	2750      	movs	r7, #80	; 0x50
 800ae12:	e70c      	b.n	800ac2e <__gethex+0x12a>
 800ae14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d1f2      	bne.n	800ae00 <__gethex+0x2fc>
 800ae1a:	e7d8      	b.n	800adce <__gethex+0x2ca>
 800ae1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1d5      	bne.n	800adce <__gethex+0x2ca>
 800ae22:	e7ed      	b.n	800ae00 <__gethex+0x2fc>
 800ae24:	1e6f      	subs	r7, r5, #1
 800ae26:	f1ba 0f00 	cmp.w	sl, #0
 800ae2a:	d131      	bne.n	800ae90 <__gethex+0x38c>
 800ae2c:	b127      	cbz	r7, 800ae38 <__gethex+0x334>
 800ae2e:	4639      	mov	r1, r7
 800ae30:	4620      	mov	r0, r4
 800ae32:	f000 fe3c 	bl	800baae <__any_on>
 800ae36:	4682      	mov	sl, r0
 800ae38:	117b      	asrs	r3, r7, #5
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ae40:	f007 071f 	and.w	r7, r7, #31
 800ae44:	fa01 f707 	lsl.w	r7, r1, r7
 800ae48:	421f      	tst	r7, r3
 800ae4a:	4629      	mov	r1, r5
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	bf18      	it	ne
 800ae50:	f04a 0a02 	orrne.w	sl, sl, #2
 800ae54:	1b76      	subs	r6, r6, r5
 800ae56:	f7ff fdee 	bl	800aa36 <rshift>
 800ae5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ae5e:	2702      	movs	r7, #2
 800ae60:	f1ba 0f00 	cmp.w	sl, #0
 800ae64:	d048      	beq.n	800aef8 <__gethex+0x3f4>
 800ae66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d015      	beq.n	800ae9a <__gethex+0x396>
 800ae6e:	2b03      	cmp	r3, #3
 800ae70:	d017      	beq.n	800aea2 <__gethex+0x39e>
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d109      	bne.n	800ae8a <__gethex+0x386>
 800ae76:	f01a 0f02 	tst.w	sl, #2
 800ae7a:	d006      	beq.n	800ae8a <__gethex+0x386>
 800ae7c:	f8d9 0000 	ldr.w	r0, [r9]
 800ae80:	ea4a 0a00 	orr.w	sl, sl, r0
 800ae84:	f01a 0f01 	tst.w	sl, #1
 800ae88:	d10e      	bne.n	800aea8 <__gethex+0x3a4>
 800ae8a:	f047 0710 	orr.w	r7, r7, #16
 800ae8e:	e033      	b.n	800aef8 <__gethex+0x3f4>
 800ae90:	f04f 0a01 	mov.w	sl, #1
 800ae94:	e7d0      	b.n	800ae38 <__gethex+0x334>
 800ae96:	2701      	movs	r7, #1
 800ae98:	e7e2      	b.n	800ae60 <__gethex+0x35c>
 800ae9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae9c:	f1c3 0301 	rsb	r3, r3, #1
 800aea0:	9315      	str	r3, [sp, #84]	; 0x54
 800aea2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d0f0      	beq.n	800ae8a <__gethex+0x386>
 800aea8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aeac:	f104 0314 	add.w	r3, r4, #20
 800aeb0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aeb4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aeb8:	f04f 0c00 	mov.w	ip, #0
 800aebc:	4618      	mov	r0, r3
 800aebe:	f853 2b04 	ldr.w	r2, [r3], #4
 800aec2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aec6:	d01c      	beq.n	800af02 <__gethex+0x3fe>
 800aec8:	3201      	adds	r2, #1
 800aeca:	6002      	str	r2, [r0, #0]
 800aecc:	2f02      	cmp	r7, #2
 800aece:	f104 0314 	add.w	r3, r4, #20
 800aed2:	d13f      	bne.n	800af54 <__gethex+0x450>
 800aed4:	f8d8 2000 	ldr.w	r2, [r8]
 800aed8:	3a01      	subs	r2, #1
 800aeda:	42b2      	cmp	r2, r6
 800aedc:	d10a      	bne.n	800aef4 <__gethex+0x3f0>
 800aede:	1171      	asrs	r1, r6, #5
 800aee0:	2201      	movs	r2, #1
 800aee2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aee6:	f006 061f 	and.w	r6, r6, #31
 800aeea:	fa02 f606 	lsl.w	r6, r2, r6
 800aeee:	421e      	tst	r6, r3
 800aef0:	bf18      	it	ne
 800aef2:	4617      	movne	r7, r2
 800aef4:	f047 0720 	orr.w	r7, r7, #32
 800aef8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aefa:	601c      	str	r4, [r3, #0]
 800aefc:	9b04      	ldr	r3, [sp, #16]
 800aefe:	601d      	str	r5, [r3, #0]
 800af00:	e695      	b.n	800ac2e <__gethex+0x12a>
 800af02:	4299      	cmp	r1, r3
 800af04:	f843 cc04 	str.w	ip, [r3, #-4]
 800af08:	d8d8      	bhi.n	800aebc <__gethex+0x3b8>
 800af0a:	68a3      	ldr	r3, [r4, #8]
 800af0c:	459b      	cmp	fp, r3
 800af0e:	db19      	blt.n	800af44 <__gethex+0x440>
 800af10:	6861      	ldr	r1, [r4, #4]
 800af12:	ee18 0a10 	vmov	r0, s16
 800af16:	3101      	adds	r1, #1
 800af18:	f000 f92c 	bl	800b174 <_Balloc>
 800af1c:	4681      	mov	r9, r0
 800af1e:	b918      	cbnz	r0, 800af28 <__gethex+0x424>
 800af20:	4b1a      	ldr	r3, [pc, #104]	; (800af8c <__gethex+0x488>)
 800af22:	4602      	mov	r2, r0
 800af24:	2184      	movs	r1, #132	; 0x84
 800af26:	e6a8      	b.n	800ac7a <__gethex+0x176>
 800af28:	6922      	ldr	r2, [r4, #16]
 800af2a:	3202      	adds	r2, #2
 800af2c:	f104 010c 	add.w	r1, r4, #12
 800af30:	0092      	lsls	r2, r2, #2
 800af32:	300c      	adds	r0, #12
 800af34:	f000 f910 	bl	800b158 <memcpy>
 800af38:	4621      	mov	r1, r4
 800af3a:	ee18 0a10 	vmov	r0, s16
 800af3e:	f000 f959 	bl	800b1f4 <_Bfree>
 800af42:	464c      	mov	r4, r9
 800af44:	6923      	ldr	r3, [r4, #16]
 800af46:	1c5a      	adds	r2, r3, #1
 800af48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af4c:	6122      	str	r2, [r4, #16]
 800af4e:	2201      	movs	r2, #1
 800af50:	615a      	str	r2, [r3, #20]
 800af52:	e7bb      	b.n	800aecc <__gethex+0x3c8>
 800af54:	6922      	ldr	r2, [r4, #16]
 800af56:	455a      	cmp	r2, fp
 800af58:	dd0b      	ble.n	800af72 <__gethex+0x46e>
 800af5a:	2101      	movs	r1, #1
 800af5c:	4620      	mov	r0, r4
 800af5e:	f7ff fd6a 	bl	800aa36 <rshift>
 800af62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af66:	3501      	adds	r5, #1
 800af68:	42ab      	cmp	r3, r5
 800af6a:	f6ff aed0 	blt.w	800ad0e <__gethex+0x20a>
 800af6e:	2701      	movs	r7, #1
 800af70:	e7c0      	b.n	800aef4 <__gethex+0x3f0>
 800af72:	f016 061f 	ands.w	r6, r6, #31
 800af76:	d0fa      	beq.n	800af6e <__gethex+0x46a>
 800af78:	4453      	add	r3, sl
 800af7a:	f1c6 0620 	rsb	r6, r6, #32
 800af7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800af82:	f000 f9e9 	bl	800b358 <__hi0bits>
 800af86:	42b0      	cmp	r0, r6
 800af88:	dbe7      	blt.n	800af5a <__gethex+0x456>
 800af8a:	e7f0      	b.n	800af6e <__gethex+0x46a>
 800af8c:	0800cc10 	.word	0x0800cc10

0800af90 <L_shift>:
 800af90:	f1c2 0208 	rsb	r2, r2, #8
 800af94:	0092      	lsls	r2, r2, #2
 800af96:	b570      	push	{r4, r5, r6, lr}
 800af98:	f1c2 0620 	rsb	r6, r2, #32
 800af9c:	6843      	ldr	r3, [r0, #4]
 800af9e:	6804      	ldr	r4, [r0, #0]
 800afa0:	fa03 f506 	lsl.w	r5, r3, r6
 800afa4:	432c      	orrs	r4, r5
 800afa6:	40d3      	lsrs	r3, r2
 800afa8:	6004      	str	r4, [r0, #0]
 800afaa:	f840 3f04 	str.w	r3, [r0, #4]!
 800afae:	4288      	cmp	r0, r1
 800afb0:	d3f4      	bcc.n	800af9c <L_shift+0xc>
 800afb2:	bd70      	pop	{r4, r5, r6, pc}

0800afb4 <__match>:
 800afb4:	b530      	push	{r4, r5, lr}
 800afb6:	6803      	ldr	r3, [r0, #0]
 800afb8:	3301      	adds	r3, #1
 800afba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afbe:	b914      	cbnz	r4, 800afc6 <__match+0x12>
 800afc0:	6003      	str	r3, [r0, #0]
 800afc2:	2001      	movs	r0, #1
 800afc4:	bd30      	pop	{r4, r5, pc}
 800afc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800afce:	2d19      	cmp	r5, #25
 800afd0:	bf98      	it	ls
 800afd2:	3220      	addls	r2, #32
 800afd4:	42a2      	cmp	r2, r4
 800afd6:	d0f0      	beq.n	800afba <__match+0x6>
 800afd8:	2000      	movs	r0, #0
 800afda:	e7f3      	b.n	800afc4 <__match+0x10>

0800afdc <__hexnan>:
 800afdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe0:	680b      	ldr	r3, [r1, #0]
 800afe2:	115e      	asrs	r6, r3, #5
 800afe4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800afe8:	f013 031f 	ands.w	r3, r3, #31
 800afec:	b087      	sub	sp, #28
 800afee:	bf18      	it	ne
 800aff0:	3604      	addne	r6, #4
 800aff2:	2500      	movs	r5, #0
 800aff4:	1f37      	subs	r7, r6, #4
 800aff6:	4690      	mov	r8, r2
 800aff8:	6802      	ldr	r2, [r0, #0]
 800affa:	9301      	str	r3, [sp, #4]
 800affc:	4682      	mov	sl, r0
 800affe:	f846 5c04 	str.w	r5, [r6, #-4]
 800b002:	46b9      	mov	r9, r7
 800b004:	463c      	mov	r4, r7
 800b006:	9502      	str	r5, [sp, #8]
 800b008:	46ab      	mov	fp, r5
 800b00a:	7851      	ldrb	r1, [r2, #1]
 800b00c:	1c53      	adds	r3, r2, #1
 800b00e:	9303      	str	r3, [sp, #12]
 800b010:	b341      	cbz	r1, 800b064 <__hexnan+0x88>
 800b012:	4608      	mov	r0, r1
 800b014:	9205      	str	r2, [sp, #20]
 800b016:	9104      	str	r1, [sp, #16]
 800b018:	f7ff fd5f 	bl	800aada <__hexdig_fun>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d14f      	bne.n	800b0c0 <__hexnan+0xe4>
 800b020:	9904      	ldr	r1, [sp, #16]
 800b022:	9a05      	ldr	r2, [sp, #20]
 800b024:	2920      	cmp	r1, #32
 800b026:	d818      	bhi.n	800b05a <__hexnan+0x7e>
 800b028:	9b02      	ldr	r3, [sp, #8]
 800b02a:	459b      	cmp	fp, r3
 800b02c:	dd13      	ble.n	800b056 <__hexnan+0x7a>
 800b02e:	454c      	cmp	r4, r9
 800b030:	d206      	bcs.n	800b040 <__hexnan+0x64>
 800b032:	2d07      	cmp	r5, #7
 800b034:	dc04      	bgt.n	800b040 <__hexnan+0x64>
 800b036:	462a      	mov	r2, r5
 800b038:	4649      	mov	r1, r9
 800b03a:	4620      	mov	r0, r4
 800b03c:	f7ff ffa8 	bl	800af90 <L_shift>
 800b040:	4544      	cmp	r4, r8
 800b042:	d950      	bls.n	800b0e6 <__hexnan+0x10a>
 800b044:	2300      	movs	r3, #0
 800b046:	f1a4 0904 	sub.w	r9, r4, #4
 800b04a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b04e:	f8cd b008 	str.w	fp, [sp, #8]
 800b052:	464c      	mov	r4, r9
 800b054:	461d      	mov	r5, r3
 800b056:	9a03      	ldr	r2, [sp, #12]
 800b058:	e7d7      	b.n	800b00a <__hexnan+0x2e>
 800b05a:	2929      	cmp	r1, #41	; 0x29
 800b05c:	d156      	bne.n	800b10c <__hexnan+0x130>
 800b05e:	3202      	adds	r2, #2
 800b060:	f8ca 2000 	str.w	r2, [sl]
 800b064:	f1bb 0f00 	cmp.w	fp, #0
 800b068:	d050      	beq.n	800b10c <__hexnan+0x130>
 800b06a:	454c      	cmp	r4, r9
 800b06c:	d206      	bcs.n	800b07c <__hexnan+0xa0>
 800b06e:	2d07      	cmp	r5, #7
 800b070:	dc04      	bgt.n	800b07c <__hexnan+0xa0>
 800b072:	462a      	mov	r2, r5
 800b074:	4649      	mov	r1, r9
 800b076:	4620      	mov	r0, r4
 800b078:	f7ff ff8a 	bl	800af90 <L_shift>
 800b07c:	4544      	cmp	r4, r8
 800b07e:	d934      	bls.n	800b0ea <__hexnan+0x10e>
 800b080:	f1a8 0204 	sub.w	r2, r8, #4
 800b084:	4623      	mov	r3, r4
 800b086:	f853 1b04 	ldr.w	r1, [r3], #4
 800b08a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b08e:	429f      	cmp	r7, r3
 800b090:	d2f9      	bcs.n	800b086 <__hexnan+0xaa>
 800b092:	1b3b      	subs	r3, r7, r4
 800b094:	f023 0303 	bic.w	r3, r3, #3
 800b098:	3304      	adds	r3, #4
 800b09a:	3401      	adds	r4, #1
 800b09c:	3e03      	subs	r6, #3
 800b09e:	42b4      	cmp	r4, r6
 800b0a0:	bf88      	it	hi
 800b0a2:	2304      	movhi	r3, #4
 800b0a4:	4443      	add	r3, r8
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f843 2b04 	str.w	r2, [r3], #4
 800b0ac:	429f      	cmp	r7, r3
 800b0ae:	d2fb      	bcs.n	800b0a8 <__hexnan+0xcc>
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	b91b      	cbnz	r3, 800b0bc <__hexnan+0xe0>
 800b0b4:	4547      	cmp	r7, r8
 800b0b6:	d127      	bne.n	800b108 <__hexnan+0x12c>
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	603b      	str	r3, [r7, #0]
 800b0bc:	2005      	movs	r0, #5
 800b0be:	e026      	b.n	800b10e <__hexnan+0x132>
 800b0c0:	3501      	adds	r5, #1
 800b0c2:	2d08      	cmp	r5, #8
 800b0c4:	f10b 0b01 	add.w	fp, fp, #1
 800b0c8:	dd06      	ble.n	800b0d8 <__hexnan+0xfc>
 800b0ca:	4544      	cmp	r4, r8
 800b0cc:	d9c3      	bls.n	800b056 <__hexnan+0x7a>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0d4:	2501      	movs	r5, #1
 800b0d6:	3c04      	subs	r4, #4
 800b0d8:	6822      	ldr	r2, [r4, #0]
 800b0da:	f000 000f 	and.w	r0, r0, #15
 800b0de:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b0e2:	6022      	str	r2, [r4, #0]
 800b0e4:	e7b7      	b.n	800b056 <__hexnan+0x7a>
 800b0e6:	2508      	movs	r5, #8
 800b0e8:	e7b5      	b.n	800b056 <__hexnan+0x7a>
 800b0ea:	9b01      	ldr	r3, [sp, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d0df      	beq.n	800b0b0 <__hexnan+0xd4>
 800b0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f4:	f1c3 0320 	rsb	r3, r3, #32
 800b0f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b100:	401a      	ands	r2, r3
 800b102:	f846 2c04 	str.w	r2, [r6, #-4]
 800b106:	e7d3      	b.n	800b0b0 <__hexnan+0xd4>
 800b108:	3f04      	subs	r7, #4
 800b10a:	e7d1      	b.n	800b0b0 <__hexnan+0xd4>
 800b10c:	2004      	movs	r0, #4
 800b10e:	b007      	add	sp, #28
 800b110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b114 <_localeconv_r>:
 800b114:	4800      	ldr	r0, [pc, #0]	; (800b118 <_localeconv_r+0x4>)
 800b116:	4770      	bx	lr
 800b118:	24000190 	.word	0x24000190

0800b11c <__retarget_lock_init_recursive>:
 800b11c:	4770      	bx	lr

0800b11e <__retarget_lock_acquire_recursive>:
 800b11e:	4770      	bx	lr

0800b120 <__retarget_lock_release_recursive>:
 800b120:	4770      	bx	lr
	...

0800b124 <malloc>:
 800b124:	4b02      	ldr	r3, [pc, #8]	; (800b130 <malloc+0xc>)
 800b126:	4601      	mov	r1, r0
 800b128:	6818      	ldr	r0, [r3, #0]
 800b12a:	f000 bd63 	b.w	800bbf4 <_malloc_r>
 800b12e:	bf00      	nop
 800b130:	24000038 	.word	0x24000038

0800b134 <__ascii_mbtowc>:
 800b134:	b082      	sub	sp, #8
 800b136:	b901      	cbnz	r1, 800b13a <__ascii_mbtowc+0x6>
 800b138:	a901      	add	r1, sp, #4
 800b13a:	b142      	cbz	r2, 800b14e <__ascii_mbtowc+0x1a>
 800b13c:	b14b      	cbz	r3, 800b152 <__ascii_mbtowc+0x1e>
 800b13e:	7813      	ldrb	r3, [r2, #0]
 800b140:	600b      	str	r3, [r1, #0]
 800b142:	7812      	ldrb	r2, [r2, #0]
 800b144:	1e10      	subs	r0, r2, #0
 800b146:	bf18      	it	ne
 800b148:	2001      	movne	r0, #1
 800b14a:	b002      	add	sp, #8
 800b14c:	4770      	bx	lr
 800b14e:	4610      	mov	r0, r2
 800b150:	e7fb      	b.n	800b14a <__ascii_mbtowc+0x16>
 800b152:	f06f 0001 	mvn.w	r0, #1
 800b156:	e7f8      	b.n	800b14a <__ascii_mbtowc+0x16>

0800b158 <memcpy>:
 800b158:	440a      	add	r2, r1
 800b15a:	4291      	cmp	r1, r2
 800b15c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b160:	d100      	bne.n	800b164 <memcpy+0xc>
 800b162:	4770      	bx	lr
 800b164:	b510      	push	{r4, lr}
 800b166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b16a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b16e:	4291      	cmp	r1, r2
 800b170:	d1f9      	bne.n	800b166 <memcpy+0xe>
 800b172:	bd10      	pop	{r4, pc}

0800b174 <_Balloc>:
 800b174:	b570      	push	{r4, r5, r6, lr}
 800b176:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b178:	4604      	mov	r4, r0
 800b17a:	460d      	mov	r5, r1
 800b17c:	b976      	cbnz	r6, 800b19c <_Balloc+0x28>
 800b17e:	2010      	movs	r0, #16
 800b180:	f7ff ffd0 	bl	800b124 <malloc>
 800b184:	4602      	mov	r2, r0
 800b186:	6260      	str	r0, [r4, #36]	; 0x24
 800b188:	b920      	cbnz	r0, 800b194 <_Balloc+0x20>
 800b18a:	4b18      	ldr	r3, [pc, #96]	; (800b1ec <_Balloc+0x78>)
 800b18c:	4818      	ldr	r0, [pc, #96]	; (800b1f0 <_Balloc+0x7c>)
 800b18e:	2166      	movs	r1, #102	; 0x66
 800b190:	f001 f9aa 	bl	800c4e8 <__assert_func>
 800b194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b198:	6006      	str	r6, [r0, #0]
 800b19a:	60c6      	str	r6, [r0, #12]
 800b19c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b19e:	68f3      	ldr	r3, [r6, #12]
 800b1a0:	b183      	cbz	r3, 800b1c4 <_Balloc+0x50>
 800b1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1aa:	b9b8      	cbnz	r0, 800b1dc <_Balloc+0x68>
 800b1ac:	2101      	movs	r1, #1
 800b1ae:	fa01 f605 	lsl.w	r6, r1, r5
 800b1b2:	1d72      	adds	r2, r6, #5
 800b1b4:	0092      	lsls	r2, r2, #2
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	f000 fc9a 	bl	800baf0 <_calloc_r>
 800b1bc:	b160      	cbz	r0, 800b1d8 <_Balloc+0x64>
 800b1be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1c2:	e00e      	b.n	800b1e2 <_Balloc+0x6e>
 800b1c4:	2221      	movs	r2, #33	; 0x21
 800b1c6:	2104      	movs	r1, #4
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f000 fc91 	bl	800baf0 <_calloc_r>
 800b1ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1d0:	60f0      	str	r0, [r6, #12]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1e4      	bne.n	800b1a2 <_Balloc+0x2e>
 800b1d8:	2000      	movs	r0, #0
 800b1da:	bd70      	pop	{r4, r5, r6, pc}
 800b1dc:	6802      	ldr	r2, [r0, #0]
 800b1de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1e8:	e7f7      	b.n	800b1da <_Balloc+0x66>
 800b1ea:	bf00      	nop
 800b1ec:	0800cb9e 	.word	0x0800cb9e
 800b1f0:	0800cd00 	.word	0x0800cd00

0800b1f4 <_Bfree>:
 800b1f4:	b570      	push	{r4, r5, r6, lr}
 800b1f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1f8:	4605      	mov	r5, r0
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	b976      	cbnz	r6, 800b21c <_Bfree+0x28>
 800b1fe:	2010      	movs	r0, #16
 800b200:	f7ff ff90 	bl	800b124 <malloc>
 800b204:	4602      	mov	r2, r0
 800b206:	6268      	str	r0, [r5, #36]	; 0x24
 800b208:	b920      	cbnz	r0, 800b214 <_Bfree+0x20>
 800b20a:	4b09      	ldr	r3, [pc, #36]	; (800b230 <_Bfree+0x3c>)
 800b20c:	4809      	ldr	r0, [pc, #36]	; (800b234 <_Bfree+0x40>)
 800b20e:	218a      	movs	r1, #138	; 0x8a
 800b210:	f001 f96a 	bl	800c4e8 <__assert_func>
 800b214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b218:	6006      	str	r6, [r0, #0]
 800b21a:	60c6      	str	r6, [r0, #12]
 800b21c:	b13c      	cbz	r4, 800b22e <_Bfree+0x3a>
 800b21e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b220:	6862      	ldr	r2, [r4, #4]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b228:	6021      	str	r1, [r4, #0]
 800b22a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b22e:	bd70      	pop	{r4, r5, r6, pc}
 800b230:	0800cb9e 	.word	0x0800cb9e
 800b234:	0800cd00 	.word	0x0800cd00

0800b238 <__multadd>:
 800b238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b23c:	690d      	ldr	r5, [r1, #16]
 800b23e:	4607      	mov	r7, r0
 800b240:	460c      	mov	r4, r1
 800b242:	461e      	mov	r6, r3
 800b244:	f101 0c14 	add.w	ip, r1, #20
 800b248:	2000      	movs	r0, #0
 800b24a:	f8dc 3000 	ldr.w	r3, [ip]
 800b24e:	b299      	uxth	r1, r3
 800b250:	fb02 6101 	mla	r1, r2, r1, r6
 800b254:	0c1e      	lsrs	r6, r3, #16
 800b256:	0c0b      	lsrs	r3, r1, #16
 800b258:	fb02 3306 	mla	r3, r2, r6, r3
 800b25c:	b289      	uxth	r1, r1
 800b25e:	3001      	adds	r0, #1
 800b260:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b264:	4285      	cmp	r5, r0
 800b266:	f84c 1b04 	str.w	r1, [ip], #4
 800b26a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b26e:	dcec      	bgt.n	800b24a <__multadd+0x12>
 800b270:	b30e      	cbz	r6, 800b2b6 <__multadd+0x7e>
 800b272:	68a3      	ldr	r3, [r4, #8]
 800b274:	42ab      	cmp	r3, r5
 800b276:	dc19      	bgt.n	800b2ac <__multadd+0x74>
 800b278:	6861      	ldr	r1, [r4, #4]
 800b27a:	4638      	mov	r0, r7
 800b27c:	3101      	adds	r1, #1
 800b27e:	f7ff ff79 	bl	800b174 <_Balloc>
 800b282:	4680      	mov	r8, r0
 800b284:	b928      	cbnz	r0, 800b292 <__multadd+0x5a>
 800b286:	4602      	mov	r2, r0
 800b288:	4b0c      	ldr	r3, [pc, #48]	; (800b2bc <__multadd+0x84>)
 800b28a:	480d      	ldr	r0, [pc, #52]	; (800b2c0 <__multadd+0x88>)
 800b28c:	21b5      	movs	r1, #181	; 0xb5
 800b28e:	f001 f92b 	bl	800c4e8 <__assert_func>
 800b292:	6922      	ldr	r2, [r4, #16]
 800b294:	3202      	adds	r2, #2
 800b296:	f104 010c 	add.w	r1, r4, #12
 800b29a:	0092      	lsls	r2, r2, #2
 800b29c:	300c      	adds	r0, #12
 800b29e:	f7ff ff5b 	bl	800b158 <memcpy>
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	f7ff ffa5 	bl	800b1f4 <_Bfree>
 800b2aa:	4644      	mov	r4, r8
 800b2ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2b0:	3501      	adds	r5, #1
 800b2b2:	615e      	str	r6, [r3, #20]
 800b2b4:	6125      	str	r5, [r4, #16]
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2bc:	0800cc10 	.word	0x0800cc10
 800b2c0:	0800cd00 	.word	0x0800cd00

0800b2c4 <__s2b>:
 800b2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	4615      	mov	r5, r2
 800b2cc:	461f      	mov	r7, r3
 800b2ce:	2209      	movs	r2, #9
 800b2d0:	3308      	adds	r3, #8
 800b2d2:	4606      	mov	r6, r0
 800b2d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2d8:	2100      	movs	r1, #0
 800b2da:	2201      	movs	r2, #1
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	db09      	blt.n	800b2f4 <__s2b+0x30>
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f7ff ff47 	bl	800b174 <_Balloc>
 800b2e6:	b940      	cbnz	r0, 800b2fa <__s2b+0x36>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	4b19      	ldr	r3, [pc, #100]	; (800b350 <__s2b+0x8c>)
 800b2ec:	4819      	ldr	r0, [pc, #100]	; (800b354 <__s2b+0x90>)
 800b2ee:	21ce      	movs	r1, #206	; 0xce
 800b2f0:	f001 f8fa 	bl	800c4e8 <__assert_func>
 800b2f4:	0052      	lsls	r2, r2, #1
 800b2f6:	3101      	adds	r1, #1
 800b2f8:	e7f0      	b.n	800b2dc <__s2b+0x18>
 800b2fa:	9b08      	ldr	r3, [sp, #32]
 800b2fc:	6143      	str	r3, [r0, #20]
 800b2fe:	2d09      	cmp	r5, #9
 800b300:	f04f 0301 	mov.w	r3, #1
 800b304:	6103      	str	r3, [r0, #16]
 800b306:	dd16      	ble.n	800b336 <__s2b+0x72>
 800b308:	f104 0909 	add.w	r9, r4, #9
 800b30c:	46c8      	mov	r8, r9
 800b30e:	442c      	add	r4, r5
 800b310:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b314:	4601      	mov	r1, r0
 800b316:	3b30      	subs	r3, #48	; 0x30
 800b318:	220a      	movs	r2, #10
 800b31a:	4630      	mov	r0, r6
 800b31c:	f7ff ff8c 	bl	800b238 <__multadd>
 800b320:	45a0      	cmp	r8, r4
 800b322:	d1f5      	bne.n	800b310 <__s2b+0x4c>
 800b324:	f1a5 0408 	sub.w	r4, r5, #8
 800b328:	444c      	add	r4, r9
 800b32a:	1b2d      	subs	r5, r5, r4
 800b32c:	1963      	adds	r3, r4, r5
 800b32e:	42bb      	cmp	r3, r7
 800b330:	db04      	blt.n	800b33c <__s2b+0x78>
 800b332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b336:	340a      	adds	r4, #10
 800b338:	2509      	movs	r5, #9
 800b33a:	e7f6      	b.n	800b32a <__s2b+0x66>
 800b33c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b340:	4601      	mov	r1, r0
 800b342:	3b30      	subs	r3, #48	; 0x30
 800b344:	220a      	movs	r2, #10
 800b346:	4630      	mov	r0, r6
 800b348:	f7ff ff76 	bl	800b238 <__multadd>
 800b34c:	e7ee      	b.n	800b32c <__s2b+0x68>
 800b34e:	bf00      	nop
 800b350:	0800cc10 	.word	0x0800cc10
 800b354:	0800cd00 	.word	0x0800cd00

0800b358 <__hi0bits>:
 800b358:	0c03      	lsrs	r3, r0, #16
 800b35a:	041b      	lsls	r3, r3, #16
 800b35c:	b9d3      	cbnz	r3, 800b394 <__hi0bits+0x3c>
 800b35e:	0400      	lsls	r0, r0, #16
 800b360:	2310      	movs	r3, #16
 800b362:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b366:	bf04      	itt	eq
 800b368:	0200      	lsleq	r0, r0, #8
 800b36a:	3308      	addeq	r3, #8
 800b36c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b370:	bf04      	itt	eq
 800b372:	0100      	lsleq	r0, r0, #4
 800b374:	3304      	addeq	r3, #4
 800b376:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b37a:	bf04      	itt	eq
 800b37c:	0080      	lsleq	r0, r0, #2
 800b37e:	3302      	addeq	r3, #2
 800b380:	2800      	cmp	r0, #0
 800b382:	db05      	blt.n	800b390 <__hi0bits+0x38>
 800b384:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b388:	f103 0301 	add.w	r3, r3, #1
 800b38c:	bf08      	it	eq
 800b38e:	2320      	moveq	r3, #32
 800b390:	4618      	mov	r0, r3
 800b392:	4770      	bx	lr
 800b394:	2300      	movs	r3, #0
 800b396:	e7e4      	b.n	800b362 <__hi0bits+0xa>

0800b398 <__lo0bits>:
 800b398:	6803      	ldr	r3, [r0, #0]
 800b39a:	f013 0207 	ands.w	r2, r3, #7
 800b39e:	4601      	mov	r1, r0
 800b3a0:	d00b      	beq.n	800b3ba <__lo0bits+0x22>
 800b3a2:	07da      	lsls	r2, r3, #31
 800b3a4:	d423      	bmi.n	800b3ee <__lo0bits+0x56>
 800b3a6:	0798      	lsls	r0, r3, #30
 800b3a8:	bf49      	itett	mi
 800b3aa:	085b      	lsrmi	r3, r3, #1
 800b3ac:	089b      	lsrpl	r3, r3, #2
 800b3ae:	2001      	movmi	r0, #1
 800b3b0:	600b      	strmi	r3, [r1, #0]
 800b3b2:	bf5c      	itt	pl
 800b3b4:	600b      	strpl	r3, [r1, #0]
 800b3b6:	2002      	movpl	r0, #2
 800b3b8:	4770      	bx	lr
 800b3ba:	b298      	uxth	r0, r3
 800b3bc:	b9a8      	cbnz	r0, 800b3ea <__lo0bits+0x52>
 800b3be:	0c1b      	lsrs	r3, r3, #16
 800b3c0:	2010      	movs	r0, #16
 800b3c2:	b2da      	uxtb	r2, r3
 800b3c4:	b90a      	cbnz	r2, 800b3ca <__lo0bits+0x32>
 800b3c6:	3008      	adds	r0, #8
 800b3c8:	0a1b      	lsrs	r3, r3, #8
 800b3ca:	071a      	lsls	r2, r3, #28
 800b3cc:	bf04      	itt	eq
 800b3ce:	091b      	lsreq	r3, r3, #4
 800b3d0:	3004      	addeq	r0, #4
 800b3d2:	079a      	lsls	r2, r3, #30
 800b3d4:	bf04      	itt	eq
 800b3d6:	089b      	lsreq	r3, r3, #2
 800b3d8:	3002      	addeq	r0, #2
 800b3da:	07da      	lsls	r2, r3, #31
 800b3dc:	d403      	bmi.n	800b3e6 <__lo0bits+0x4e>
 800b3de:	085b      	lsrs	r3, r3, #1
 800b3e0:	f100 0001 	add.w	r0, r0, #1
 800b3e4:	d005      	beq.n	800b3f2 <__lo0bits+0x5a>
 800b3e6:	600b      	str	r3, [r1, #0]
 800b3e8:	4770      	bx	lr
 800b3ea:	4610      	mov	r0, r2
 800b3ec:	e7e9      	b.n	800b3c2 <__lo0bits+0x2a>
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	4770      	bx	lr
 800b3f2:	2020      	movs	r0, #32
 800b3f4:	4770      	bx	lr
	...

0800b3f8 <__i2b>:
 800b3f8:	b510      	push	{r4, lr}
 800b3fa:	460c      	mov	r4, r1
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	f7ff feb9 	bl	800b174 <_Balloc>
 800b402:	4602      	mov	r2, r0
 800b404:	b928      	cbnz	r0, 800b412 <__i2b+0x1a>
 800b406:	4b05      	ldr	r3, [pc, #20]	; (800b41c <__i2b+0x24>)
 800b408:	4805      	ldr	r0, [pc, #20]	; (800b420 <__i2b+0x28>)
 800b40a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b40e:	f001 f86b 	bl	800c4e8 <__assert_func>
 800b412:	2301      	movs	r3, #1
 800b414:	6144      	str	r4, [r0, #20]
 800b416:	6103      	str	r3, [r0, #16]
 800b418:	bd10      	pop	{r4, pc}
 800b41a:	bf00      	nop
 800b41c:	0800cc10 	.word	0x0800cc10
 800b420:	0800cd00 	.word	0x0800cd00

0800b424 <__multiply>:
 800b424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b428:	4691      	mov	r9, r2
 800b42a:	690a      	ldr	r2, [r1, #16]
 800b42c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b430:	429a      	cmp	r2, r3
 800b432:	bfb8      	it	lt
 800b434:	460b      	movlt	r3, r1
 800b436:	460c      	mov	r4, r1
 800b438:	bfbc      	itt	lt
 800b43a:	464c      	movlt	r4, r9
 800b43c:	4699      	movlt	r9, r3
 800b43e:	6927      	ldr	r7, [r4, #16]
 800b440:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b444:	68a3      	ldr	r3, [r4, #8]
 800b446:	6861      	ldr	r1, [r4, #4]
 800b448:	eb07 060a 	add.w	r6, r7, sl
 800b44c:	42b3      	cmp	r3, r6
 800b44e:	b085      	sub	sp, #20
 800b450:	bfb8      	it	lt
 800b452:	3101      	addlt	r1, #1
 800b454:	f7ff fe8e 	bl	800b174 <_Balloc>
 800b458:	b930      	cbnz	r0, 800b468 <__multiply+0x44>
 800b45a:	4602      	mov	r2, r0
 800b45c:	4b44      	ldr	r3, [pc, #272]	; (800b570 <__multiply+0x14c>)
 800b45e:	4845      	ldr	r0, [pc, #276]	; (800b574 <__multiply+0x150>)
 800b460:	f240 115d 	movw	r1, #349	; 0x15d
 800b464:	f001 f840 	bl	800c4e8 <__assert_func>
 800b468:	f100 0514 	add.w	r5, r0, #20
 800b46c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b470:	462b      	mov	r3, r5
 800b472:	2200      	movs	r2, #0
 800b474:	4543      	cmp	r3, r8
 800b476:	d321      	bcc.n	800b4bc <__multiply+0x98>
 800b478:	f104 0314 	add.w	r3, r4, #20
 800b47c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b480:	f109 0314 	add.w	r3, r9, #20
 800b484:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b488:	9202      	str	r2, [sp, #8]
 800b48a:	1b3a      	subs	r2, r7, r4
 800b48c:	3a15      	subs	r2, #21
 800b48e:	f022 0203 	bic.w	r2, r2, #3
 800b492:	3204      	adds	r2, #4
 800b494:	f104 0115 	add.w	r1, r4, #21
 800b498:	428f      	cmp	r7, r1
 800b49a:	bf38      	it	cc
 800b49c:	2204      	movcc	r2, #4
 800b49e:	9201      	str	r2, [sp, #4]
 800b4a0:	9a02      	ldr	r2, [sp, #8]
 800b4a2:	9303      	str	r3, [sp, #12]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d80c      	bhi.n	800b4c2 <__multiply+0x9e>
 800b4a8:	2e00      	cmp	r6, #0
 800b4aa:	dd03      	ble.n	800b4b4 <__multiply+0x90>
 800b4ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d05a      	beq.n	800b56a <__multiply+0x146>
 800b4b4:	6106      	str	r6, [r0, #16]
 800b4b6:	b005      	add	sp, #20
 800b4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4bc:	f843 2b04 	str.w	r2, [r3], #4
 800b4c0:	e7d8      	b.n	800b474 <__multiply+0x50>
 800b4c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b4c6:	f1ba 0f00 	cmp.w	sl, #0
 800b4ca:	d024      	beq.n	800b516 <__multiply+0xf2>
 800b4cc:	f104 0e14 	add.w	lr, r4, #20
 800b4d0:	46a9      	mov	r9, r5
 800b4d2:	f04f 0c00 	mov.w	ip, #0
 800b4d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b4da:	f8d9 1000 	ldr.w	r1, [r9]
 800b4de:	fa1f fb82 	uxth.w	fp, r2
 800b4e2:	b289      	uxth	r1, r1
 800b4e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b4e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b4ec:	f8d9 2000 	ldr.w	r2, [r9]
 800b4f0:	4461      	add	r1, ip
 800b4f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b4fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4fe:	b289      	uxth	r1, r1
 800b500:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b504:	4577      	cmp	r7, lr
 800b506:	f849 1b04 	str.w	r1, [r9], #4
 800b50a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b50e:	d8e2      	bhi.n	800b4d6 <__multiply+0xb2>
 800b510:	9a01      	ldr	r2, [sp, #4]
 800b512:	f845 c002 	str.w	ip, [r5, r2]
 800b516:	9a03      	ldr	r2, [sp, #12]
 800b518:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b51c:	3304      	adds	r3, #4
 800b51e:	f1b9 0f00 	cmp.w	r9, #0
 800b522:	d020      	beq.n	800b566 <__multiply+0x142>
 800b524:	6829      	ldr	r1, [r5, #0]
 800b526:	f104 0c14 	add.w	ip, r4, #20
 800b52a:	46ae      	mov	lr, r5
 800b52c:	f04f 0a00 	mov.w	sl, #0
 800b530:	f8bc b000 	ldrh.w	fp, [ip]
 800b534:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b538:	fb09 220b 	mla	r2, r9, fp, r2
 800b53c:	4492      	add	sl, r2
 800b53e:	b289      	uxth	r1, r1
 800b540:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b544:	f84e 1b04 	str.w	r1, [lr], #4
 800b548:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b54c:	f8be 1000 	ldrh.w	r1, [lr]
 800b550:	0c12      	lsrs	r2, r2, #16
 800b552:	fb09 1102 	mla	r1, r9, r2, r1
 800b556:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b55a:	4567      	cmp	r7, ip
 800b55c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b560:	d8e6      	bhi.n	800b530 <__multiply+0x10c>
 800b562:	9a01      	ldr	r2, [sp, #4]
 800b564:	50a9      	str	r1, [r5, r2]
 800b566:	3504      	adds	r5, #4
 800b568:	e79a      	b.n	800b4a0 <__multiply+0x7c>
 800b56a:	3e01      	subs	r6, #1
 800b56c:	e79c      	b.n	800b4a8 <__multiply+0x84>
 800b56e:	bf00      	nop
 800b570:	0800cc10 	.word	0x0800cc10
 800b574:	0800cd00 	.word	0x0800cd00

0800b578 <__pow5mult>:
 800b578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b57c:	4615      	mov	r5, r2
 800b57e:	f012 0203 	ands.w	r2, r2, #3
 800b582:	4606      	mov	r6, r0
 800b584:	460f      	mov	r7, r1
 800b586:	d007      	beq.n	800b598 <__pow5mult+0x20>
 800b588:	4c25      	ldr	r4, [pc, #148]	; (800b620 <__pow5mult+0xa8>)
 800b58a:	3a01      	subs	r2, #1
 800b58c:	2300      	movs	r3, #0
 800b58e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b592:	f7ff fe51 	bl	800b238 <__multadd>
 800b596:	4607      	mov	r7, r0
 800b598:	10ad      	asrs	r5, r5, #2
 800b59a:	d03d      	beq.n	800b618 <__pow5mult+0xa0>
 800b59c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b59e:	b97c      	cbnz	r4, 800b5c0 <__pow5mult+0x48>
 800b5a0:	2010      	movs	r0, #16
 800b5a2:	f7ff fdbf 	bl	800b124 <malloc>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	6270      	str	r0, [r6, #36]	; 0x24
 800b5aa:	b928      	cbnz	r0, 800b5b8 <__pow5mult+0x40>
 800b5ac:	4b1d      	ldr	r3, [pc, #116]	; (800b624 <__pow5mult+0xac>)
 800b5ae:	481e      	ldr	r0, [pc, #120]	; (800b628 <__pow5mult+0xb0>)
 800b5b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b5b4:	f000 ff98 	bl	800c4e8 <__assert_func>
 800b5b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5bc:	6004      	str	r4, [r0, #0]
 800b5be:	60c4      	str	r4, [r0, #12]
 800b5c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5c8:	b94c      	cbnz	r4, 800b5de <__pow5mult+0x66>
 800b5ca:	f240 2171 	movw	r1, #625	; 0x271
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	f7ff ff12 	bl	800b3f8 <__i2b>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5da:	4604      	mov	r4, r0
 800b5dc:	6003      	str	r3, [r0, #0]
 800b5de:	f04f 0900 	mov.w	r9, #0
 800b5e2:	07eb      	lsls	r3, r5, #31
 800b5e4:	d50a      	bpl.n	800b5fc <__pow5mult+0x84>
 800b5e6:	4639      	mov	r1, r7
 800b5e8:	4622      	mov	r2, r4
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	f7ff ff1a 	bl	800b424 <__multiply>
 800b5f0:	4639      	mov	r1, r7
 800b5f2:	4680      	mov	r8, r0
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	f7ff fdfd 	bl	800b1f4 <_Bfree>
 800b5fa:	4647      	mov	r7, r8
 800b5fc:	106d      	asrs	r5, r5, #1
 800b5fe:	d00b      	beq.n	800b618 <__pow5mult+0xa0>
 800b600:	6820      	ldr	r0, [r4, #0]
 800b602:	b938      	cbnz	r0, 800b614 <__pow5mult+0x9c>
 800b604:	4622      	mov	r2, r4
 800b606:	4621      	mov	r1, r4
 800b608:	4630      	mov	r0, r6
 800b60a:	f7ff ff0b 	bl	800b424 <__multiply>
 800b60e:	6020      	str	r0, [r4, #0]
 800b610:	f8c0 9000 	str.w	r9, [r0]
 800b614:	4604      	mov	r4, r0
 800b616:	e7e4      	b.n	800b5e2 <__pow5mult+0x6a>
 800b618:	4638      	mov	r0, r7
 800b61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b61e:	bf00      	nop
 800b620:	0800ce50 	.word	0x0800ce50
 800b624:	0800cb9e 	.word	0x0800cb9e
 800b628:	0800cd00 	.word	0x0800cd00

0800b62c <__lshift>:
 800b62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b630:	460c      	mov	r4, r1
 800b632:	6849      	ldr	r1, [r1, #4]
 800b634:	6923      	ldr	r3, [r4, #16]
 800b636:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b63a:	68a3      	ldr	r3, [r4, #8]
 800b63c:	4607      	mov	r7, r0
 800b63e:	4691      	mov	r9, r2
 800b640:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b644:	f108 0601 	add.w	r6, r8, #1
 800b648:	42b3      	cmp	r3, r6
 800b64a:	db0b      	blt.n	800b664 <__lshift+0x38>
 800b64c:	4638      	mov	r0, r7
 800b64e:	f7ff fd91 	bl	800b174 <_Balloc>
 800b652:	4605      	mov	r5, r0
 800b654:	b948      	cbnz	r0, 800b66a <__lshift+0x3e>
 800b656:	4602      	mov	r2, r0
 800b658:	4b2a      	ldr	r3, [pc, #168]	; (800b704 <__lshift+0xd8>)
 800b65a:	482b      	ldr	r0, [pc, #172]	; (800b708 <__lshift+0xdc>)
 800b65c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b660:	f000 ff42 	bl	800c4e8 <__assert_func>
 800b664:	3101      	adds	r1, #1
 800b666:	005b      	lsls	r3, r3, #1
 800b668:	e7ee      	b.n	800b648 <__lshift+0x1c>
 800b66a:	2300      	movs	r3, #0
 800b66c:	f100 0114 	add.w	r1, r0, #20
 800b670:	f100 0210 	add.w	r2, r0, #16
 800b674:	4618      	mov	r0, r3
 800b676:	4553      	cmp	r3, sl
 800b678:	db37      	blt.n	800b6ea <__lshift+0xbe>
 800b67a:	6920      	ldr	r0, [r4, #16]
 800b67c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b680:	f104 0314 	add.w	r3, r4, #20
 800b684:	f019 091f 	ands.w	r9, r9, #31
 800b688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b68c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b690:	d02f      	beq.n	800b6f2 <__lshift+0xc6>
 800b692:	f1c9 0e20 	rsb	lr, r9, #32
 800b696:	468a      	mov	sl, r1
 800b698:	f04f 0c00 	mov.w	ip, #0
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	fa02 f209 	lsl.w	r2, r2, r9
 800b6a2:	ea42 020c 	orr.w	r2, r2, ip
 800b6a6:	f84a 2b04 	str.w	r2, [sl], #4
 800b6aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6ae:	4298      	cmp	r0, r3
 800b6b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b6b4:	d8f2      	bhi.n	800b69c <__lshift+0x70>
 800b6b6:	1b03      	subs	r3, r0, r4
 800b6b8:	3b15      	subs	r3, #21
 800b6ba:	f023 0303 	bic.w	r3, r3, #3
 800b6be:	3304      	adds	r3, #4
 800b6c0:	f104 0215 	add.w	r2, r4, #21
 800b6c4:	4290      	cmp	r0, r2
 800b6c6:	bf38      	it	cc
 800b6c8:	2304      	movcc	r3, #4
 800b6ca:	f841 c003 	str.w	ip, [r1, r3]
 800b6ce:	f1bc 0f00 	cmp.w	ip, #0
 800b6d2:	d001      	beq.n	800b6d8 <__lshift+0xac>
 800b6d4:	f108 0602 	add.w	r6, r8, #2
 800b6d8:	3e01      	subs	r6, #1
 800b6da:	4638      	mov	r0, r7
 800b6dc:	612e      	str	r6, [r5, #16]
 800b6de:	4621      	mov	r1, r4
 800b6e0:	f7ff fd88 	bl	800b1f4 <_Bfree>
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	e7c1      	b.n	800b676 <__lshift+0x4a>
 800b6f2:	3904      	subs	r1, #4
 800b6f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6fc:	4298      	cmp	r0, r3
 800b6fe:	d8f9      	bhi.n	800b6f4 <__lshift+0xc8>
 800b700:	e7ea      	b.n	800b6d8 <__lshift+0xac>
 800b702:	bf00      	nop
 800b704:	0800cc10 	.word	0x0800cc10
 800b708:	0800cd00 	.word	0x0800cd00

0800b70c <__mcmp>:
 800b70c:	b530      	push	{r4, r5, lr}
 800b70e:	6902      	ldr	r2, [r0, #16]
 800b710:	690c      	ldr	r4, [r1, #16]
 800b712:	1b12      	subs	r2, r2, r4
 800b714:	d10e      	bne.n	800b734 <__mcmp+0x28>
 800b716:	f100 0314 	add.w	r3, r0, #20
 800b71a:	3114      	adds	r1, #20
 800b71c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b720:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b724:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b728:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b72c:	42a5      	cmp	r5, r4
 800b72e:	d003      	beq.n	800b738 <__mcmp+0x2c>
 800b730:	d305      	bcc.n	800b73e <__mcmp+0x32>
 800b732:	2201      	movs	r2, #1
 800b734:	4610      	mov	r0, r2
 800b736:	bd30      	pop	{r4, r5, pc}
 800b738:	4283      	cmp	r3, r0
 800b73a:	d3f3      	bcc.n	800b724 <__mcmp+0x18>
 800b73c:	e7fa      	b.n	800b734 <__mcmp+0x28>
 800b73e:	f04f 32ff 	mov.w	r2, #4294967295
 800b742:	e7f7      	b.n	800b734 <__mcmp+0x28>

0800b744 <__mdiff>:
 800b744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b748:	460c      	mov	r4, r1
 800b74a:	4606      	mov	r6, r0
 800b74c:	4611      	mov	r1, r2
 800b74e:	4620      	mov	r0, r4
 800b750:	4690      	mov	r8, r2
 800b752:	f7ff ffdb 	bl	800b70c <__mcmp>
 800b756:	1e05      	subs	r5, r0, #0
 800b758:	d110      	bne.n	800b77c <__mdiff+0x38>
 800b75a:	4629      	mov	r1, r5
 800b75c:	4630      	mov	r0, r6
 800b75e:	f7ff fd09 	bl	800b174 <_Balloc>
 800b762:	b930      	cbnz	r0, 800b772 <__mdiff+0x2e>
 800b764:	4b3a      	ldr	r3, [pc, #232]	; (800b850 <__mdiff+0x10c>)
 800b766:	4602      	mov	r2, r0
 800b768:	f240 2132 	movw	r1, #562	; 0x232
 800b76c:	4839      	ldr	r0, [pc, #228]	; (800b854 <__mdiff+0x110>)
 800b76e:	f000 febb 	bl	800c4e8 <__assert_func>
 800b772:	2301      	movs	r3, #1
 800b774:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b77c:	bfa4      	itt	ge
 800b77e:	4643      	movge	r3, r8
 800b780:	46a0      	movge	r8, r4
 800b782:	4630      	mov	r0, r6
 800b784:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b788:	bfa6      	itte	ge
 800b78a:	461c      	movge	r4, r3
 800b78c:	2500      	movge	r5, #0
 800b78e:	2501      	movlt	r5, #1
 800b790:	f7ff fcf0 	bl	800b174 <_Balloc>
 800b794:	b920      	cbnz	r0, 800b7a0 <__mdiff+0x5c>
 800b796:	4b2e      	ldr	r3, [pc, #184]	; (800b850 <__mdiff+0x10c>)
 800b798:	4602      	mov	r2, r0
 800b79a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b79e:	e7e5      	b.n	800b76c <__mdiff+0x28>
 800b7a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b7a4:	6926      	ldr	r6, [r4, #16]
 800b7a6:	60c5      	str	r5, [r0, #12]
 800b7a8:	f104 0914 	add.w	r9, r4, #20
 800b7ac:	f108 0514 	add.w	r5, r8, #20
 800b7b0:	f100 0e14 	add.w	lr, r0, #20
 800b7b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b7b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b7bc:	f108 0210 	add.w	r2, r8, #16
 800b7c0:	46f2      	mov	sl, lr
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b7cc:	fa1f f883 	uxth.w	r8, r3
 800b7d0:	fa11 f18b 	uxtah	r1, r1, fp
 800b7d4:	0c1b      	lsrs	r3, r3, #16
 800b7d6:	eba1 0808 	sub.w	r8, r1, r8
 800b7da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b7de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b7e2:	fa1f f888 	uxth.w	r8, r8
 800b7e6:	1419      	asrs	r1, r3, #16
 800b7e8:	454e      	cmp	r6, r9
 800b7ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b7ee:	f84a 3b04 	str.w	r3, [sl], #4
 800b7f2:	d8e7      	bhi.n	800b7c4 <__mdiff+0x80>
 800b7f4:	1b33      	subs	r3, r6, r4
 800b7f6:	3b15      	subs	r3, #21
 800b7f8:	f023 0303 	bic.w	r3, r3, #3
 800b7fc:	3304      	adds	r3, #4
 800b7fe:	3415      	adds	r4, #21
 800b800:	42a6      	cmp	r6, r4
 800b802:	bf38      	it	cc
 800b804:	2304      	movcc	r3, #4
 800b806:	441d      	add	r5, r3
 800b808:	4473      	add	r3, lr
 800b80a:	469e      	mov	lr, r3
 800b80c:	462e      	mov	r6, r5
 800b80e:	4566      	cmp	r6, ip
 800b810:	d30e      	bcc.n	800b830 <__mdiff+0xec>
 800b812:	f10c 0203 	add.w	r2, ip, #3
 800b816:	1b52      	subs	r2, r2, r5
 800b818:	f022 0203 	bic.w	r2, r2, #3
 800b81c:	3d03      	subs	r5, #3
 800b81e:	45ac      	cmp	ip, r5
 800b820:	bf38      	it	cc
 800b822:	2200      	movcc	r2, #0
 800b824:	441a      	add	r2, r3
 800b826:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b82a:	b17b      	cbz	r3, 800b84c <__mdiff+0x108>
 800b82c:	6107      	str	r7, [r0, #16]
 800b82e:	e7a3      	b.n	800b778 <__mdiff+0x34>
 800b830:	f856 8b04 	ldr.w	r8, [r6], #4
 800b834:	fa11 f288 	uxtah	r2, r1, r8
 800b838:	1414      	asrs	r4, r2, #16
 800b83a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b83e:	b292      	uxth	r2, r2
 800b840:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b844:	f84e 2b04 	str.w	r2, [lr], #4
 800b848:	1421      	asrs	r1, r4, #16
 800b84a:	e7e0      	b.n	800b80e <__mdiff+0xca>
 800b84c:	3f01      	subs	r7, #1
 800b84e:	e7ea      	b.n	800b826 <__mdiff+0xe2>
 800b850:	0800cc10 	.word	0x0800cc10
 800b854:	0800cd00 	.word	0x0800cd00

0800b858 <__ulp>:
 800b858:	b082      	sub	sp, #8
 800b85a:	ed8d 0b00 	vstr	d0, [sp]
 800b85e:	9b01      	ldr	r3, [sp, #4]
 800b860:	4912      	ldr	r1, [pc, #72]	; (800b8ac <__ulp+0x54>)
 800b862:	4019      	ands	r1, r3
 800b864:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b868:	2900      	cmp	r1, #0
 800b86a:	dd05      	ble.n	800b878 <__ulp+0x20>
 800b86c:	2200      	movs	r2, #0
 800b86e:	460b      	mov	r3, r1
 800b870:	ec43 2b10 	vmov	d0, r2, r3
 800b874:	b002      	add	sp, #8
 800b876:	4770      	bx	lr
 800b878:	4249      	negs	r1, r1
 800b87a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b87e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b882:	f04f 0200 	mov.w	r2, #0
 800b886:	f04f 0300 	mov.w	r3, #0
 800b88a:	da04      	bge.n	800b896 <__ulp+0x3e>
 800b88c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b890:	fa41 f300 	asr.w	r3, r1, r0
 800b894:	e7ec      	b.n	800b870 <__ulp+0x18>
 800b896:	f1a0 0114 	sub.w	r1, r0, #20
 800b89a:	291e      	cmp	r1, #30
 800b89c:	bfda      	itte	le
 800b89e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b8a2:	fa20 f101 	lsrle.w	r1, r0, r1
 800b8a6:	2101      	movgt	r1, #1
 800b8a8:	460a      	mov	r2, r1
 800b8aa:	e7e1      	b.n	800b870 <__ulp+0x18>
 800b8ac:	7ff00000 	.word	0x7ff00000

0800b8b0 <__b2d>:
 800b8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b2:	6905      	ldr	r5, [r0, #16]
 800b8b4:	f100 0714 	add.w	r7, r0, #20
 800b8b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b8bc:	1f2e      	subs	r6, r5, #4
 800b8be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f7ff fd48 	bl	800b358 <__hi0bits>
 800b8c8:	f1c0 0320 	rsb	r3, r0, #32
 800b8cc:	280a      	cmp	r0, #10
 800b8ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b94c <__b2d+0x9c>
 800b8d2:	600b      	str	r3, [r1, #0]
 800b8d4:	dc14      	bgt.n	800b900 <__b2d+0x50>
 800b8d6:	f1c0 0e0b 	rsb	lr, r0, #11
 800b8da:	fa24 f10e 	lsr.w	r1, r4, lr
 800b8de:	42b7      	cmp	r7, r6
 800b8e0:	ea41 030c 	orr.w	r3, r1, ip
 800b8e4:	bf34      	ite	cc
 800b8e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b8ea:	2100      	movcs	r1, #0
 800b8ec:	3015      	adds	r0, #21
 800b8ee:	fa04 f000 	lsl.w	r0, r4, r0
 800b8f2:	fa21 f10e 	lsr.w	r1, r1, lr
 800b8f6:	ea40 0201 	orr.w	r2, r0, r1
 800b8fa:	ec43 2b10 	vmov	d0, r2, r3
 800b8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b900:	42b7      	cmp	r7, r6
 800b902:	bf3a      	itte	cc
 800b904:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b908:	f1a5 0608 	subcc.w	r6, r5, #8
 800b90c:	2100      	movcs	r1, #0
 800b90e:	380b      	subs	r0, #11
 800b910:	d017      	beq.n	800b942 <__b2d+0x92>
 800b912:	f1c0 0c20 	rsb	ip, r0, #32
 800b916:	fa04 f500 	lsl.w	r5, r4, r0
 800b91a:	42be      	cmp	r6, r7
 800b91c:	fa21 f40c 	lsr.w	r4, r1, ip
 800b920:	ea45 0504 	orr.w	r5, r5, r4
 800b924:	bf8c      	ite	hi
 800b926:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b92a:	2400      	movls	r4, #0
 800b92c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b930:	fa01 f000 	lsl.w	r0, r1, r0
 800b934:	fa24 f40c 	lsr.w	r4, r4, ip
 800b938:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b93c:	ea40 0204 	orr.w	r2, r0, r4
 800b940:	e7db      	b.n	800b8fa <__b2d+0x4a>
 800b942:	ea44 030c 	orr.w	r3, r4, ip
 800b946:	460a      	mov	r2, r1
 800b948:	e7d7      	b.n	800b8fa <__b2d+0x4a>
 800b94a:	bf00      	nop
 800b94c:	3ff00000 	.word	0x3ff00000

0800b950 <__d2b>:
 800b950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b954:	4689      	mov	r9, r1
 800b956:	2101      	movs	r1, #1
 800b958:	ec57 6b10 	vmov	r6, r7, d0
 800b95c:	4690      	mov	r8, r2
 800b95e:	f7ff fc09 	bl	800b174 <_Balloc>
 800b962:	4604      	mov	r4, r0
 800b964:	b930      	cbnz	r0, 800b974 <__d2b+0x24>
 800b966:	4602      	mov	r2, r0
 800b968:	4b25      	ldr	r3, [pc, #148]	; (800ba00 <__d2b+0xb0>)
 800b96a:	4826      	ldr	r0, [pc, #152]	; (800ba04 <__d2b+0xb4>)
 800b96c:	f240 310a 	movw	r1, #778	; 0x30a
 800b970:	f000 fdba 	bl	800c4e8 <__assert_func>
 800b974:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b97c:	bb35      	cbnz	r5, 800b9cc <__d2b+0x7c>
 800b97e:	2e00      	cmp	r6, #0
 800b980:	9301      	str	r3, [sp, #4]
 800b982:	d028      	beq.n	800b9d6 <__d2b+0x86>
 800b984:	4668      	mov	r0, sp
 800b986:	9600      	str	r6, [sp, #0]
 800b988:	f7ff fd06 	bl	800b398 <__lo0bits>
 800b98c:	9900      	ldr	r1, [sp, #0]
 800b98e:	b300      	cbz	r0, 800b9d2 <__d2b+0x82>
 800b990:	9a01      	ldr	r2, [sp, #4]
 800b992:	f1c0 0320 	rsb	r3, r0, #32
 800b996:	fa02 f303 	lsl.w	r3, r2, r3
 800b99a:	430b      	orrs	r3, r1
 800b99c:	40c2      	lsrs	r2, r0
 800b99e:	6163      	str	r3, [r4, #20]
 800b9a0:	9201      	str	r2, [sp, #4]
 800b9a2:	9b01      	ldr	r3, [sp, #4]
 800b9a4:	61a3      	str	r3, [r4, #24]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	bf14      	ite	ne
 800b9aa:	2202      	movne	r2, #2
 800b9ac:	2201      	moveq	r2, #1
 800b9ae:	6122      	str	r2, [r4, #16]
 800b9b0:	b1d5      	cbz	r5, 800b9e8 <__d2b+0x98>
 800b9b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b9b6:	4405      	add	r5, r0
 800b9b8:	f8c9 5000 	str.w	r5, [r9]
 800b9bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b9c0:	f8c8 0000 	str.w	r0, [r8]
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	b003      	add	sp, #12
 800b9c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9d0:	e7d5      	b.n	800b97e <__d2b+0x2e>
 800b9d2:	6161      	str	r1, [r4, #20]
 800b9d4:	e7e5      	b.n	800b9a2 <__d2b+0x52>
 800b9d6:	a801      	add	r0, sp, #4
 800b9d8:	f7ff fcde 	bl	800b398 <__lo0bits>
 800b9dc:	9b01      	ldr	r3, [sp, #4]
 800b9de:	6163      	str	r3, [r4, #20]
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	6122      	str	r2, [r4, #16]
 800b9e4:	3020      	adds	r0, #32
 800b9e6:	e7e3      	b.n	800b9b0 <__d2b+0x60>
 800b9e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9f0:	f8c9 0000 	str.w	r0, [r9]
 800b9f4:	6918      	ldr	r0, [r3, #16]
 800b9f6:	f7ff fcaf 	bl	800b358 <__hi0bits>
 800b9fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9fe:	e7df      	b.n	800b9c0 <__d2b+0x70>
 800ba00:	0800cc10 	.word	0x0800cc10
 800ba04:	0800cd00 	.word	0x0800cd00

0800ba08 <__ratio>:
 800ba08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	4688      	mov	r8, r1
 800ba0e:	4669      	mov	r1, sp
 800ba10:	4681      	mov	r9, r0
 800ba12:	f7ff ff4d 	bl	800b8b0 <__b2d>
 800ba16:	a901      	add	r1, sp, #4
 800ba18:	4640      	mov	r0, r8
 800ba1a:	ec55 4b10 	vmov	r4, r5, d0
 800ba1e:	ee10 aa10 	vmov	sl, s0
 800ba22:	f7ff ff45 	bl	800b8b0 <__b2d>
 800ba26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba2a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ba2e:	1a59      	subs	r1, r3, r1
 800ba30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ba3a:	ec57 6b10 	vmov	r6, r7, d0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	bfd6      	itet	le
 800ba42:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba46:	462a      	movgt	r2, r5
 800ba48:	463a      	movle	r2, r7
 800ba4a:	46ab      	mov	fp, r5
 800ba4c:	bfd6      	itet	le
 800ba4e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800ba52:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ba56:	ee00 3a90 	vmovle	s1, r3
 800ba5a:	ec4b ab17 	vmov	d7, sl, fp
 800ba5e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800ba62:	b003      	add	sp, #12
 800ba64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba68 <__copybits>:
 800ba68:	3901      	subs	r1, #1
 800ba6a:	b570      	push	{r4, r5, r6, lr}
 800ba6c:	1149      	asrs	r1, r1, #5
 800ba6e:	6914      	ldr	r4, [r2, #16]
 800ba70:	3101      	adds	r1, #1
 800ba72:	f102 0314 	add.w	r3, r2, #20
 800ba76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba7e:	1f05      	subs	r5, r0, #4
 800ba80:	42a3      	cmp	r3, r4
 800ba82:	d30c      	bcc.n	800ba9e <__copybits+0x36>
 800ba84:	1aa3      	subs	r3, r4, r2
 800ba86:	3b11      	subs	r3, #17
 800ba88:	f023 0303 	bic.w	r3, r3, #3
 800ba8c:	3211      	adds	r2, #17
 800ba8e:	42a2      	cmp	r2, r4
 800ba90:	bf88      	it	hi
 800ba92:	2300      	movhi	r3, #0
 800ba94:	4418      	add	r0, r3
 800ba96:	2300      	movs	r3, #0
 800ba98:	4288      	cmp	r0, r1
 800ba9a:	d305      	bcc.n	800baa8 <__copybits+0x40>
 800ba9c:	bd70      	pop	{r4, r5, r6, pc}
 800ba9e:	f853 6b04 	ldr.w	r6, [r3], #4
 800baa2:	f845 6f04 	str.w	r6, [r5, #4]!
 800baa6:	e7eb      	b.n	800ba80 <__copybits+0x18>
 800baa8:	f840 3b04 	str.w	r3, [r0], #4
 800baac:	e7f4      	b.n	800ba98 <__copybits+0x30>

0800baae <__any_on>:
 800baae:	f100 0214 	add.w	r2, r0, #20
 800bab2:	6900      	ldr	r0, [r0, #16]
 800bab4:	114b      	asrs	r3, r1, #5
 800bab6:	4298      	cmp	r0, r3
 800bab8:	b510      	push	{r4, lr}
 800baba:	db11      	blt.n	800bae0 <__any_on+0x32>
 800babc:	dd0a      	ble.n	800bad4 <__any_on+0x26>
 800babe:	f011 011f 	ands.w	r1, r1, #31
 800bac2:	d007      	beq.n	800bad4 <__any_on+0x26>
 800bac4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bac8:	fa24 f001 	lsr.w	r0, r4, r1
 800bacc:	fa00 f101 	lsl.w	r1, r0, r1
 800bad0:	428c      	cmp	r4, r1
 800bad2:	d10b      	bne.n	800baec <__any_on+0x3e>
 800bad4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bad8:	4293      	cmp	r3, r2
 800bada:	d803      	bhi.n	800bae4 <__any_on+0x36>
 800badc:	2000      	movs	r0, #0
 800bade:	bd10      	pop	{r4, pc}
 800bae0:	4603      	mov	r3, r0
 800bae2:	e7f7      	b.n	800bad4 <__any_on+0x26>
 800bae4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bae8:	2900      	cmp	r1, #0
 800baea:	d0f5      	beq.n	800bad8 <__any_on+0x2a>
 800baec:	2001      	movs	r0, #1
 800baee:	e7f6      	b.n	800bade <__any_on+0x30>

0800baf0 <_calloc_r>:
 800baf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800baf2:	fba1 2402 	umull	r2, r4, r1, r2
 800baf6:	b94c      	cbnz	r4, 800bb0c <_calloc_r+0x1c>
 800baf8:	4611      	mov	r1, r2
 800bafa:	9201      	str	r2, [sp, #4]
 800bafc:	f000 f87a 	bl	800bbf4 <_malloc_r>
 800bb00:	9a01      	ldr	r2, [sp, #4]
 800bb02:	4605      	mov	r5, r0
 800bb04:	b930      	cbnz	r0, 800bb14 <_calloc_r+0x24>
 800bb06:	4628      	mov	r0, r5
 800bb08:	b003      	add	sp, #12
 800bb0a:	bd30      	pop	{r4, r5, pc}
 800bb0c:	220c      	movs	r2, #12
 800bb0e:	6002      	str	r2, [r0, #0]
 800bb10:	2500      	movs	r5, #0
 800bb12:	e7f8      	b.n	800bb06 <_calloc_r+0x16>
 800bb14:	4621      	mov	r1, r4
 800bb16:	f7fc fbb5 	bl	8008284 <memset>
 800bb1a:	e7f4      	b.n	800bb06 <_calloc_r+0x16>

0800bb1c <_free_r>:
 800bb1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb1e:	2900      	cmp	r1, #0
 800bb20:	d044      	beq.n	800bbac <_free_r+0x90>
 800bb22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb26:	9001      	str	r0, [sp, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f1a1 0404 	sub.w	r4, r1, #4
 800bb2e:	bfb8      	it	lt
 800bb30:	18e4      	addlt	r4, r4, r3
 800bb32:	f000 fe6d 	bl	800c810 <__malloc_lock>
 800bb36:	4a1e      	ldr	r2, [pc, #120]	; (800bbb0 <_free_r+0x94>)
 800bb38:	9801      	ldr	r0, [sp, #4]
 800bb3a:	6813      	ldr	r3, [r2, #0]
 800bb3c:	b933      	cbnz	r3, 800bb4c <_free_r+0x30>
 800bb3e:	6063      	str	r3, [r4, #4]
 800bb40:	6014      	str	r4, [r2, #0]
 800bb42:	b003      	add	sp, #12
 800bb44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb48:	f000 be68 	b.w	800c81c <__malloc_unlock>
 800bb4c:	42a3      	cmp	r3, r4
 800bb4e:	d908      	bls.n	800bb62 <_free_r+0x46>
 800bb50:	6825      	ldr	r5, [r4, #0]
 800bb52:	1961      	adds	r1, r4, r5
 800bb54:	428b      	cmp	r3, r1
 800bb56:	bf01      	itttt	eq
 800bb58:	6819      	ldreq	r1, [r3, #0]
 800bb5a:	685b      	ldreq	r3, [r3, #4]
 800bb5c:	1949      	addeq	r1, r1, r5
 800bb5e:	6021      	streq	r1, [r4, #0]
 800bb60:	e7ed      	b.n	800bb3e <_free_r+0x22>
 800bb62:	461a      	mov	r2, r3
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	b10b      	cbz	r3, 800bb6c <_free_r+0x50>
 800bb68:	42a3      	cmp	r3, r4
 800bb6a:	d9fa      	bls.n	800bb62 <_free_r+0x46>
 800bb6c:	6811      	ldr	r1, [r2, #0]
 800bb6e:	1855      	adds	r5, r2, r1
 800bb70:	42a5      	cmp	r5, r4
 800bb72:	d10b      	bne.n	800bb8c <_free_r+0x70>
 800bb74:	6824      	ldr	r4, [r4, #0]
 800bb76:	4421      	add	r1, r4
 800bb78:	1854      	adds	r4, r2, r1
 800bb7a:	42a3      	cmp	r3, r4
 800bb7c:	6011      	str	r1, [r2, #0]
 800bb7e:	d1e0      	bne.n	800bb42 <_free_r+0x26>
 800bb80:	681c      	ldr	r4, [r3, #0]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	6053      	str	r3, [r2, #4]
 800bb86:	4421      	add	r1, r4
 800bb88:	6011      	str	r1, [r2, #0]
 800bb8a:	e7da      	b.n	800bb42 <_free_r+0x26>
 800bb8c:	d902      	bls.n	800bb94 <_free_r+0x78>
 800bb8e:	230c      	movs	r3, #12
 800bb90:	6003      	str	r3, [r0, #0]
 800bb92:	e7d6      	b.n	800bb42 <_free_r+0x26>
 800bb94:	6825      	ldr	r5, [r4, #0]
 800bb96:	1961      	adds	r1, r4, r5
 800bb98:	428b      	cmp	r3, r1
 800bb9a:	bf04      	itt	eq
 800bb9c:	6819      	ldreq	r1, [r3, #0]
 800bb9e:	685b      	ldreq	r3, [r3, #4]
 800bba0:	6063      	str	r3, [r4, #4]
 800bba2:	bf04      	itt	eq
 800bba4:	1949      	addeq	r1, r1, r5
 800bba6:	6021      	streq	r1, [r4, #0]
 800bba8:	6054      	str	r4, [r2, #4]
 800bbaa:	e7ca      	b.n	800bb42 <_free_r+0x26>
 800bbac:	b003      	add	sp, #12
 800bbae:	bd30      	pop	{r4, r5, pc}
 800bbb0:	2400056c 	.word	0x2400056c

0800bbb4 <sbrk_aligned>:
 800bbb4:	b570      	push	{r4, r5, r6, lr}
 800bbb6:	4e0e      	ldr	r6, [pc, #56]	; (800bbf0 <sbrk_aligned+0x3c>)
 800bbb8:	460c      	mov	r4, r1
 800bbba:	6831      	ldr	r1, [r6, #0]
 800bbbc:	4605      	mov	r5, r0
 800bbbe:	b911      	cbnz	r1, 800bbc6 <sbrk_aligned+0x12>
 800bbc0:	f000 fb4a 	bl	800c258 <_sbrk_r>
 800bbc4:	6030      	str	r0, [r6, #0]
 800bbc6:	4621      	mov	r1, r4
 800bbc8:	4628      	mov	r0, r5
 800bbca:	f000 fb45 	bl	800c258 <_sbrk_r>
 800bbce:	1c43      	adds	r3, r0, #1
 800bbd0:	d00a      	beq.n	800bbe8 <sbrk_aligned+0x34>
 800bbd2:	1cc4      	adds	r4, r0, #3
 800bbd4:	f024 0403 	bic.w	r4, r4, #3
 800bbd8:	42a0      	cmp	r0, r4
 800bbda:	d007      	beq.n	800bbec <sbrk_aligned+0x38>
 800bbdc:	1a21      	subs	r1, r4, r0
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f000 fb3a 	bl	800c258 <_sbrk_r>
 800bbe4:	3001      	adds	r0, #1
 800bbe6:	d101      	bne.n	800bbec <sbrk_aligned+0x38>
 800bbe8:	f04f 34ff 	mov.w	r4, #4294967295
 800bbec:	4620      	mov	r0, r4
 800bbee:	bd70      	pop	{r4, r5, r6, pc}
 800bbf0:	24000570 	.word	0x24000570

0800bbf4 <_malloc_r>:
 800bbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf8:	1ccd      	adds	r5, r1, #3
 800bbfa:	f025 0503 	bic.w	r5, r5, #3
 800bbfe:	3508      	adds	r5, #8
 800bc00:	2d0c      	cmp	r5, #12
 800bc02:	bf38      	it	cc
 800bc04:	250c      	movcc	r5, #12
 800bc06:	2d00      	cmp	r5, #0
 800bc08:	4607      	mov	r7, r0
 800bc0a:	db01      	blt.n	800bc10 <_malloc_r+0x1c>
 800bc0c:	42a9      	cmp	r1, r5
 800bc0e:	d905      	bls.n	800bc1c <_malloc_r+0x28>
 800bc10:	230c      	movs	r3, #12
 800bc12:	603b      	str	r3, [r7, #0]
 800bc14:	2600      	movs	r6, #0
 800bc16:	4630      	mov	r0, r6
 800bc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc1c:	4e2e      	ldr	r6, [pc, #184]	; (800bcd8 <_malloc_r+0xe4>)
 800bc1e:	f000 fdf7 	bl	800c810 <__malloc_lock>
 800bc22:	6833      	ldr	r3, [r6, #0]
 800bc24:	461c      	mov	r4, r3
 800bc26:	bb34      	cbnz	r4, 800bc76 <_malloc_r+0x82>
 800bc28:	4629      	mov	r1, r5
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	f7ff ffc2 	bl	800bbb4 <sbrk_aligned>
 800bc30:	1c43      	adds	r3, r0, #1
 800bc32:	4604      	mov	r4, r0
 800bc34:	d14d      	bne.n	800bcd2 <_malloc_r+0xde>
 800bc36:	6834      	ldr	r4, [r6, #0]
 800bc38:	4626      	mov	r6, r4
 800bc3a:	2e00      	cmp	r6, #0
 800bc3c:	d140      	bne.n	800bcc0 <_malloc_r+0xcc>
 800bc3e:	6823      	ldr	r3, [r4, #0]
 800bc40:	4631      	mov	r1, r6
 800bc42:	4638      	mov	r0, r7
 800bc44:	eb04 0803 	add.w	r8, r4, r3
 800bc48:	f000 fb06 	bl	800c258 <_sbrk_r>
 800bc4c:	4580      	cmp	r8, r0
 800bc4e:	d13a      	bne.n	800bcc6 <_malloc_r+0xd2>
 800bc50:	6821      	ldr	r1, [r4, #0]
 800bc52:	3503      	adds	r5, #3
 800bc54:	1a6d      	subs	r5, r5, r1
 800bc56:	f025 0503 	bic.w	r5, r5, #3
 800bc5a:	3508      	adds	r5, #8
 800bc5c:	2d0c      	cmp	r5, #12
 800bc5e:	bf38      	it	cc
 800bc60:	250c      	movcc	r5, #12
 800bc62:	4629      	mov	r1, r5
 800bc64:	4638      	mov	r0, r7
 800bc66:	f7ff ffa5 	bl	800bbb4 <sbrk_aligned>
 800bc6a:	3001      	adds	r0, #1
 800bc6c:	d02b      	beq.n	800bcc6 <_malloc_r+0xd2>
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	442b      	add	r3, r5
 800bc72:	6023      	str	r3, [r4, #0]
 800bc74:	e00e      	b.n	800bc94 <_malloc_r+0xa0>
 800bc76:	6822      	ldr	r2, [r4, #0]
 800bc78:	1b52      	subs	r2, r2, r5
 800bc7a:	d41e      	bmi.n	800bcba <_malloc_r+0xc6>
 800bc7c:	2a0b      	cmp	r2, #11
 800bc7e:	d916      	bls.n	800bcae <_malloc_r+0xba>
 800bc80:	1961      	adds	r1, r4, r5
 800bc82:	42a3      	cmp	r3, r4
 800bc84:	6025      	str	r5, [r4, #0]
 800bc86:	bf18      	it	ne
 800bc88:	6059      	strne	r1, [r3, #4]
 800bc8a:	6863      	ldr	r3, [r4, #4]
 800bc8c:	bf08      	it	eq
 800bc8e:	6031      	streq	r1, [r6, #0]
 800bc90:	5162      	str	r2, [r4, r5]
 800bc92:	604b      	str	r3, [r1, #4]
 800bc94:	4638      	mov	r0, r7
 800bc96:	f104 060b 	add.w	r6, r4, #11
 800bc9a:	f000 fdbf 	bl	800c81c <__malloc_unlock>
 800bc9e:	f026 0607 	bic.w	r6, r6, #7
 800bca2:	1d23      	adds	r3, r4, #4
 800bca4:	1af2      	subs	r2, r6, r3
 800bca6:	d0b6      	beq.n	800bc16 <_malloc_r+0x22>
 800bca8:	1b9b      	subs	r3, r3, r6
 800bcaa:	50a3      	str	r3, [r4, r2]
 800bcac:	e7b3      	b.n	800bc16 <_malloc_r+0x22>
 800bcae:	6862      	ldr	r2, [r4, #4]
 800bcb0:	42a3      	cmp	r3, r4
 800bcb2:	bf0c      	ite	eq
 800bcb4:	6032      	streq	r2, [r6, #0]
 800bcb6:	605a      	strne	r2, [r3, #4]
 800bcb8:	e7ec      	b.n	800bc94 <_malloc_r+0xa0>
 800bcba:	4623      	mov	r3, r4
 800bcbc:	6864      	ldr	r4, [r4, #4]
 800bcbe:	e7b2      	b.n	800bc26 <_malloc_r+0x32>
 800bcc0:	4634      	mov	r4, r6
 800bcc2:	6876      	ldr	r6, [r6, #4]
 800bcc4:	e7b9      	b.n	800bc3a <_malloc_r+0x46>
 800bcc6:	230c      	movs	r3, #12
 800bcc8:	603b      	str	r3, [r7, #0]
 800bcca:	4638      	mov	r0, r7
 800bccc:	f000 fda6 	bl	800c81c <__malloc_unlock>
 800bcd0:	e7a1      	b.n	800bc16 <_malloc_r+0x22>
 800bcd2:	6025      	str	r5, [r4, #0]
 800bcd4:	e7de      	b.n	800bc94 <_malloc_r+0xa0>
 800bcd6:	bf00      	nop
 800bcd8:	2400056c 	.word	0x2400056c

0800bcdc <__ssputs_r>:
 800bcdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bce0:	688e      	ldr	r6, [r1, #8]
 800bce2:	429e      	cmp	r6, r3
 800bce4:	4682      	mov	sl, r0
 800bce6:	460c      	mov	r4, r1
 800bce8:	4690      	mov	r8, r2
 800bcea:	461f      	mov	r7, r3
 800bcec:	d838      	bhi.n	800bd60 <__ssputs_r+0x84>
 800bcee:	898a      	ldrh	r2, [r1, #12]
 800bcf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bcf4:	d032      	beq.n	800bd5c <__ssputs_r+0x80>
 800bcf6:	6825      	ldr	r5, [r4, #0]
 800bcf8:	6909      	ldr	r1, [r1, #16]
 800bcfa:	eba5 0901 	sub.w	r9, r5, r1
 800bcfe:	6965      	ldr	r5, [r4, #20]
 800bd00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd08:	3301      	adds	r3, #1
 800bd0a:	444b      	add	r3, r9
 800bd0c:	106d      	asrs	r5, r5, #1
 800bd0e:	429d      	cmp	r5, r3
 800bd10:	bf38      	it	cc
 800bd12:	461d      	movcc	r5, r3
 800bd14:	0553      	lsls	r3, r2, #21
 800bd16:	d531      	bpl.n	800bd7c <__ssputs_r+0xa0>
 800bd18:	4629      	mov	r1, r5
 800bd1a:	f7ff ff6b 	bl	800bbf4 <_malloc_r>
 800bd1e:	4606      	mov	r6, r0
 800bd20:	b950      	cbnz	r0, 800bd38 <__ssputs_r+0x5c>
 800bd22:	230c      	movs	r3, #12
 800bd24:	f8ca 3000 	str.w	r3, [sl]
 800bd28:	89a3      	ldrh	r3, [r4, #12]
 800bd2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd2e:	81a3      	strh	r3, [r4, #12]
 800bd30:	f04f 30ff 	mov.w	r0, #4294967295
 800bd34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd38:	6921      	ldr	r1, [r4, #16]
 800bd3a:	464a      	mov	r2, r9
 800bd3c:	f7ff fa0c 	bl	800b158 <memcpy>
 800bd40:	89a3      	ldrh	r3, [r4, #12]
 800bd42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd4a:	81a3      	strh	r3, [r4, #12]
 800bd4c:	6126      	str	r6, [r4, #16]
 800bd4e:	6165      	str	r5, [r4, #20]
 800bd50:	444e      	add	r6, r9
 800bd52:	eba5 0509 	sub.w	r5, r5, r9
 800bd56:	6026      	str	r6, [r4, #0]
 800bd58:	60a5      	str	r5, [r4, #8]
 800bd5a:	463e      	mov	r6, r7
 800bd5c:	42be      	cmp	r6, r7
 800bd5e:	d900      	bls.n	800bd62 <__ssputs_r+0x86>
 800bd60:	463e      	mov	r6, r7
 800bd62:	6820      	ldr	r0, [r4, #0]
 800bd64:	4632      	mov	r2, r6
 800bd66:	4641      	mov	r1, r8
 800bd68:	f000 fd38 	bl	800c7dc <memmove>
 800bd6c:	68a3      	ldr	r3, [r4, #8]
 800bd6e:	1b9b      	subs	r3, r3, r6
 800bd70:	60a3      	str	r3, [r4, #8]
 800bd72:	6823      	ldr	r3, [r4, #0]
 800bd74:	4433      	add	r3, r6
 800bd76:	6023      	str	r3, [r4, #0]
 800bd78:	2000      	movs	r0, #0
 800bd7a:	e7db      	b.n	800bd34 <__ssputs_r+0x58>
 800bd7c:	462a      	mov	r2, r5
 800bd7e:	f000 fd53 	bl	800c828 <_realloc_r>
 800bd82:	4606      	mov	r6, r0
 800bd84:	2800      	cmp	r0, #0
 800bd86:	d1e1      	bne.n	800bd4c <__ssputs_r+0x70>
 800bd88:	6921      	ldr	r1, [r4, #16]
 800bd8a:	4650      	mov	r0, sl
 800bd8c:	f7ff fec6 	bl	800bb1c <_free_r>
 800bd90:	e7c7      	b.n	800bd22 <__ssputs_r+0x46>
	...

0800bd94 <_svfiprintf_r>:
 800bd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd98:	4698      	mov	r8, r3
 800bd9a:	898b      	ldrh	r3, [r1, #12]
 800bd9c:	061b      	lsls	r3, r3, #24
 800bd9e:	b09d      	sub	sp, #116	; 0x74
 800bda0:	4607      	mov	r7, r0
 800bda2:	460d      	mov	r5, r1
 800bda4:	4614      	mov	r4, r2
 800bda6:	d50e      	bpl.n	800bdc6 <_svfiprintf_r+0x32>
 800bda8:	690b      	ldr	r3, [r1, #16]
 800bdaa:	b963      	cbnz	r3, 800bdc6 <_svfiprintf_r+0x32>
 800bdac:	2140      	movs	r1, #64	; 0x40
 800bdae:	f7ff ff21 	bl	800bbf4 <_malloc_r>
 800bdb2:	6028      	str	r0, [r5, #0]
 800bdb4:	6128      	str	r0, [r5, #16]
 800bdb6:	b920      	cbnz	r0, 800bdc2 <_svfiprintf_r+0x2e>
 800bdb8:	230c      	movs	r3, #12
 800bdba:	603b      	str	r3, [r7, #0]
 800bdbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc0:	e0d1      	b.n	800bf66 <_svfiprintf_r+0x1d2>
 800bdc2:	2340      	movs	r3, #64	; 0x40
 800bdc4:	616b      	str	r3, [r5, #20]
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdca:	2320      	movs	r3, #32
 800bdcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdd0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdd4:	2330      	movs	r3, #48	; 0x30
 800bdd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bf80 <_svfiprintf_r+0x1ec>
 800bdda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdde:	f04f 0901 	mov.w	r9, #1
 800bde2:	4623      	mov	r3, r4
 800bde4:	469a      	mov	sl, r3
 800bde6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdea:	b10a      	cbz	r2, 800bdf0 <_svfiprintf_r+0x5c>
 800bdec:	2a25      	cmp	r2, #37	; 0x25
 800bdee:	d1f9      	bne.n	800bde4 <_svfiprintf_r+0x50>
 800bdf0:	ebba 0b04 	subs.w	fp, sl, r4
 800bdf4:	d00b      	beq.n	800be0e <_svfiprintf_r+0x7a>
 800bdf6:	465b      	mov	r3, fp
 800bdf8:	4622      	mov	r2, r4
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	4638      	mov	r0, r7
 800bdfe:	f7ff ff6d 	bl	800bcdc <__ssputs_r>
 800be02:	3001      	adds	r0, #1
 800be04:	f000 80aa 	beq.w	800bf5c <_svfiprintf_r+0x1c8>
 800be08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be0a:	445a      	add	r2, fp
 800be0c:	9209      	str	r2, [sp, #36]	; 0x24
 800be0e:	f89a 3000 	ldrb.w	r3, [sl]
 800be12:	2b00      	cmp	r3, #0
 800be14:	f000 80a2 	beq.w	800bf5c <_svfiprintf_r+0x1c8>
 800be18:	2300      	movs	r3, #0
 800be1a:	f04f 32ff 	mov.w	r2, #4294967295
 800be1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be22:	f10a 0a01 	add.w	sl, sl, #1
 800be26:	9304      	str	r3, [sp, #16]
 800be28:	9307      	str	r3, [sp, #28]
 800be2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be2e:	931a      	str	r3, [sp, #104]	; 0x68
 800be30:	4654      	mov	r4, sl
 800be32:	2205      	movs	r2, #5
 800be34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be38:	4851      	ldr	r0, [pc, #324]	; (800bf80 <_svfiprintf_r+0x1ec>)
 800be3a:	f7f4 fa61 	bl	8000300 <memchr>
 800be3e:	9a04      	ldr	r2, [sp, #16]
 800be40:	b9d8      	cbnz	r0, 800be7a <_svfiprintf_r+0xe6>
 800be42:	06d0      	lsls	r0, r2, #27
 800be44:	bf44      	itt	mi
 800be46:	2320      	movmi	r3, #32
 800be48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be4c:	0711      	lsls	r1, r2, #28
 800be4e:	bf44      	itt	mi
 800be50:	232b      	movmi	r3, #43	; 0x2b
 800be52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be56:	f89a 3000 	ldrb.w	r3, [sl]
 800be5a:	2b2a      	cmp	r3, #42	; 0x2a
 800be5c:	d015      	beq.n	800be8a <_svfiprintf_r+0xf6>
 800be5e:	9a07      	ldr	r2, [sp, #28]
 800be60:	4654      	mov	r4, sl
 800be62:	2000      	movs	r0, #0
 800be64:	f04f 0c0a 	mov.w	ip, #10
 800be68:	4621      	mov	r1, r4
 800be6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be6e:	3b30      	subs	r3, #48	; 0x30
 800be70:	2b09      	cmp	r3, #9
 800be72:	d94e      	bls.n	800bf12 <_svfiprintf_r+0x17e>
 800be74:	b1b0      	cbz	r0, 800bea4 <_svfiprintf_r+0x110>
 800be76:	9207      	str	r2, [sp, #28]
 800be78:	e014      	b.n	800bea4 <_svfiprintf_r+0x110>
 800be7a:	eba0 0308 	sub.w	r3, r0, r8
 800be7e:	fa09 f303 	lsl.w	r3, r9, r3
 800be82:	4313      	orrs	r3, r2
 800be84:	9304      	str	r3, [sp, #16]
 800be86:	46a2      	mov	sl, r4
 800be88:	e7d2      	b.n	800be30 <_svfiprintf_r+0x9c>
 800be8a:	9b03      	ldr	r3, [sp, #12]
 800be8c:	1d19      	adds	r1, r3, #4
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	9103      	str	r1, [sp, #12]
 800be92:	2b00      	cmp	r3, #0
 800be94:	bfbb      	ittet	lt
 800be96:	425b      	neglt	r3, r3
 800be98:	f042 0202 	orrlt.w	r2, r2, #2
 800be9c:	9307      	strge	r3, [sp, #28]
 800be9e:	9307      	strlt	r3, [sp, #28]
 800bea0:	bfb8      	it	lt
 800bea2:	9204      	strlt	r2, [sp, #16]
 800bea4:	7823      	ldrb	r3, [r4, #0]
 800bea6:	2b2e      	cmp	r3, #46	; 0x2e
 800bea8:	d10c      	bne.n	800bec4 <_svfiprintf_r+0x130>
 800beaa:	7863      	ldrb	r3, [r4, #1]
 800beac:	2b2a      	cmp	r3, #42	; 0x2a
 800beae:	d135      	bne.n	800bf1c <_svfiprintf_r+0x188>
 800beb0:	9b03      	ldr	r3, [sp, #12]
 800beb2:	1d1a      	adds	r2, r3, #4
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	9203      	str	r2, [sp, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	bfb8      	it	lt
 800bebc:	f04f 33ff 	movlt.w	r3, #4294967295
 800bec0:	3402      	adds	r4, #2
 800bec2:	9305      	str	r3, [sp, #20]
 800bec4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bf90 <_svfiprintf_r+0x1fc>
 800bec8:	7821      	ldrb	r1, [r4, #0]
 800beca:	2203      	movs	r2, #3
 800becc:	4650      	mov	r0, sl
 800bece:	f7f4 fa17 	bl	8000300 <memchr>
 800bed2:	b140      	cbz	r0, 800bee6 <_svfiprintf_r+0x152>
 800bed4:	2340      	movs	r3, #64	; 0x40
 800bed6:	eba0 000a 	sub.w	r0, r0, sl
 800beda:	fa03 f000 	lsl.w	r0, r3, r0
 800bede:	9b04      	ldr	r3, [sp, #16]
 800bee0:	4303      	orrs	r3, r0
 800bee2:	3401      	adds	r4, #1
 800bee4:	9304      	str	r3, [sp, #16]
 800bee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beea:	4826      	ldr	r0, [pc, #152]	; (800bf84 <_svfiprintf_r+0x1f0>)
 800beec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bef0:	2206      	movs	r2, #6
 800bef2:	f7f4 fa05 	bl	8000300 <memchr>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d038      	beq.n	800bf6c <_svfiprintf_r+0x1d8>
 800befa:	4b23      	ldr	r3, [pc, #140]	; (800bf88 <_svfiprintf_r+0x1f4>)
 800befc:	bb1b      	cbnz	r3, 800bf46 <_svfiprintf_r+0x1b2>
 800befe:	9b03      	ldr	r3, [sp, #12]
 800bf00:	3307      	adds	r3, #7
 800bf02:	f023 0307 	bic.w	r3, r3, #7
 800bf06:	3308      	adds	r3, #8
 800bf08:	9303      	str	r3, [sp, #12]
 800bf0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf0c:	4433      	add	r3, r6
 800bf0e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf10:	e767      	b.n	800bde2 <_svfiprintf_r+0x4e>
 800bf12:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf16:	460c      	mov	r4, r1
 800bf18:	2001      	movs	r0, #1
 800bf1a:	e7a5      	b.n	800be68 <_svfiprintf_r+0xd4>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	3401      	adds	r4, #1
 800bf20:	9305      	str	r3, [sp, #20]
 800bf22:	4619      	mov	r1, r3
 800bf24:	f04f 0c0a 	mov.w	ip, #10
 800bf28:	4620      	mov	r0, r4
 800bf2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf2e:	3a30      	subs	r2, #48	; 0x30
 800bf30:	2a09      	cmp	r2, #9
 800bf32:	d903      	bls.n	800bf3c <_svfiprintf_r+0x1a8>
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d0c5      	beq.n	800bec4 <_svfiprintf_r+0x130>
 800bf38:	9105      	str	r1, [sp, #20]
 800bf3a:	e7c3      	b.n	800bec4 <_svfiprintf_r+0x130>
 800bf3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf40:	4604      	mov	r4, r0
 800bf42:	2301      	movs	r3, #1
 800bf44:	e7f0      	b.n	800bf28 <_svfiprintf_r+0x194>
 800bf46:	ab03      	add	r3, sp, #12
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	462a      	mov	r2, r5
 800bf4c:	4b0f      	ldr	r3, [pc, #60]	; (800bf8c <_svfiprintf_r+0x1f8>)
 800bf4e:	a904      	add	r1, sp, #16
 800bf50:	4638      	mov	r0, r7
 800bf52:	f7fc fa31 	bl	80083b8 <_printf_float>
 800bf56:	1c42      	adds	r2, r0, #1
 800bf58:	4606      	mov	r6, r0
 800bf5a:	d1d6      	bne.n	800bf0a <_svfiprintf_r+0x176>
 800bf5c:	89ab      	ldrh	r3, [r5, #12]
 800bf5e:	065b      	lsls	r3, r3, #25
 800bf60:	f53f af2c 	bmi.w	800bdbc <_svfiprintf_r+0x28>
 800bf64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf66:	b01d      	add	sp, #116	; 0x74
 800bf68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf6c:	ab03      	add	r3, sp, #12
 800bf6e:	9300      	str	r3, [sp, #0]
 800bf70:	462a      	mov	r2, r5
 800bf72:	4b06      	ldr	r3, [pc, #24]	; (800bf8c <_svfiprintf_r+0x1f8>)
 800bf74:	a904      	add	r1, sp, #16
 800bf76:	4638      	mov	r0, r7
 800bf78:	f7fc fcaa 	bl	80088d0 <_printf_i>
 800bf7c:	e7eb      	b.n	800bf56 <_svfiprintf_r+0x1c2>
 800bf7e:	bf00      	nop
 800bf80:	0800ce5c 	.word	0x0800ce5c
 800bf84:	0800ce66 	.word	0x0800ce66
 800bf88:	080083b9 	.word	0x080083b9
 800bf8c:	0800bcdd 	.word	0x0800bcdd
 800bf90:	0800ce62 	.word	0x0800ce62

0800bf94 <__sfputc_r>:
 800bf94:	6893      	ldr	r3, [r2, #8]
 800bf96:	3b01      	subs	r3, #1
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	b410      	push	{r4}
 800bf9c:	6093      	str	r3, [r2, #8]
 800bf9e:	da08      	bge.n	800bfb2 <__sfputc_r+0x1e>
 800bfa0:	6994      	ldr	r4, [r2, #24]
 800bfa2:	42a3      	cmp	r3, r4
 800bfa4:	db01      	blt.n	800bfaa <__sfputc_r+0x16>
 800bfa6:	290a      	cmp	r1, #10
 800bfa8:	d103      	bne.n	800bfb2 <__sfputc_r+0x1e>
 800bfaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfae:	f000 b9bb 	b.w	800c328 <__swbuf_r>
 800bfb2:	6813      	ldr	r3, [r2, #0]
 800bfb4:	1c58      	adds	r0, r3, #1
 800bfb6:	6010      	str	r0, [r2, #0]
 800bfb8:	7019      	strb	r1, [r3, #0]
 800bfba:	4608      	mov	r0, r1
 800bfbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfc0:	4770      	bx	lr

0800bfc2 <__sfputs_r>:
 800bfc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc4:	4606      	mov	r6, r0
 800bfc6:	460f      	mov	r7, r1
 800bfc8:	4614      	mov	r4, r2
 800bfca:	18d5      	adds	r5, r2, r3
 800bfcc:	42ac      	cmp	r4, r5
 800bfce:	d101      	bne.n	800bfd4 <__sfputs_r+0x12>
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	e007      	b.n	800bfe4 <__sfputs_r+0x22>
 800bfd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfd8:	463a      	mov	r2, r7
 800bfda:	4630      	mov	r0, r6
 800bfdc:	f7ff ffda 	bl	800bf94 <__sfputc_r>
 800bfe0:	1c43      	adds	r3, r0, #1
 800bfe2:	d1f3      	bne.n	800bfcc <__sfputs_r+0xa>
 800bfe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bfe8 <_vfiprintf_r>:
 800bfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfec:	460d      	mov	r5, r1
 800bfee:	b09d      	sub	sp, #116	; 0x74
 800bff0:	4614      	mov	r4, r2
 800bff2:	4698      	mov	r8, r3
 800bff4:	4606      	mov	r6, r0
 800bff6:	b118      	cbz	r0, 800c000 <_vfiprintf_r+0x18>
 800bff8:	6983      	ldr	r3, [r0, #24]
 800bffa:	b90b      	cbnz	r3, 800c000 <_vfiprintf_r+0x18>
 800bffc:	f7fe fc7e 	bl	800a8fc <__sinit>
 800c000:	4b89      	ldr	r3, [pc, #548]	; (800c228 <_vfiprintf_r+0x240>)
 800c002:	429d      	cmp	r5, r3
 800c004:	d11b      	bne.n	800c03e <_vfiprintf_r+0x56>
 800c006:	6875      	ldr	r5, [r6, #4]
 800c008:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c00a:	07d9      	lsls	r1, r3, #31
 800c00c:	d405      	bmi.n	800c01a <_vfiprintf_r+0x32>
 800c00e:	89ab      	ldrh	r3, [r5, #12]
 800c010:	059a      	lsls	r2, r3, #22
 800c012:	d402      	bmi.n	800c01a <_vfiprintf_r+0x32>
 800c014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c016:	f7ff f882 	bl	800b11e <__retarget_lock_acquire_recursive>
 800c01a:	89ab      	ldrh	r3, [r5, #12]
 800c01c:	071b      	lsls	r3, r3, #28
 800c01e:	d501      	bpl.n	800c024 <_vfiprintf_r+0x3c>
 800c020:	692b      	ldr	r3, [r5, #16]
 800c022:	b9eb      	cbnz	r3, 800c060 <_vfiprintf_r+0x78>
 800c024:	4629      	mov	r1, r5
 800c026:	4630      	mov	r0, r6
 800c028:	f000 f9f0 	bl	800c40c <__swsetup_r>
 800c02c:	b1c0      	cbz	r0, 800c060 <_vfiprintf_r+0x78>
 800c02e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c030:	07dc      	lsls	r4, r3, #31
 800c032:	d50e      	bpl.n	800c052 <_vfiprintf_r+0x6a>
 800c034:	f04f 30ff 	mov.w	r0, #4294967295
 800c038:	b01d      	add	sp, #116	; 0x74
 800c03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c03e:	4b7b      	ldr	r3, [pc, #492]	; (800c22c <_vfiprintf_r+0x244>)
 800c040:	429d      	cmp	r5, r3
 800c042:	d101      	bne.n	800c048 <_vfiprintf_r+0x60>
 800c044:	68b5      	ldr	r5, [r6, #8]
 800c046:	e7df      	b.n	800c008 <_vfiprintf_r+0x20>
 800c048:	4b79      	ldr	r3, [pc, #484]	; (800c230 <_vfiprintf_r+0x248>)
 800c04a:	429d      	cmp	r5, r3
 800c04c:	bf08      	it	eq
 800c04e:	68f5      	ldreq	r5, [r6, #12]
 800c050:	e7da      	b.n	800c008 <_vfiprintf_r+0x20>
 800c052:	89ab      	ldrh	r3, [r5, #12]
 800c054:	0598      	lsls	r0, r3, #22
 800c056:	d4ed      	bmi.n	800c034 <_vfiprintf_r+0x4c>
 800c058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c05a:	f7ff f861 	bl	800b120 <__retarget_lock_release_recursive>
 800c05e:	e7e9      	b.n	800c034 <_vfiprintf_r+0x4c>
 800c060:	2300      	movs	r3, #0
 800c062:	9309      	str	r3, [sp, #36]	; 0x24
 800c064:	2320      	movs	r3, #32
 800c066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c06a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c06e:	2330      	movs	r3, #48	; 0x30
 800c070:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c234 <_vfiprintf_r+0x24c>
 800c074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c078:	f04f 0901 	mov.w	r9, #1
 800c07c:	4623      	mov	r3, r4
 800c07e:	469a      	mov	sl, r3
 800c080:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c084:	b10a      	cbz	r2, 800c08a <_vfiprintf_r+0xa2>
 800c086:	2a25      	cmp	r2, #37	; 0x25
 800c088:	d1f9      	bne.n	800c07e <_vfiprintf_r+0x96>
 800c08a:	ebba 0b04 	subs.w	fp, sl, r4
 800c08e:	d00b      	beq.n	800c0a8 <_vfiprintf_r+0xc0>
 800c090:	465b      	mov	r3, fp
 800c092:	4622      	mov	r2, r4
 800c094:	4629      	mov	r1, r5
 800c096:	4630      	mov	r0, r6
 800c098:	f7ff ff93 	bl	800bfc2 <__sfputs_r>
 800c09c:	3001      	adds	r0, #1
 800c09e:	f000 80aa 	beq.w	800c1f6 <_vfiprintf_r+0x20e>
 800c0a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0a4:	445a      	add	r2, fp
 800c0a6:	9209      	str	r2, [sp, #36]	; 0x24
 800c0a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f000 80a2 	beq.w	800c1f6 <_vfiprintf_r+0x20e>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0bc:	f10a 0a01 	add.w	sl, sl, #1
 800c0c0:	9304      	str	r3, [sp, #16]
 800c0c2:	9307      	str	r3, [sp, #28]
 800c0c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0c8:	931a      	str	r3, [sp, #104]	; 0x68
 800c0ca:	4654      	mov	r4, sl
 800c0cc:	2205      	movs	r2, #5
 800c0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0d2:	4858      	ldr	r0, [pc, #352]	; (800c234 <_vfiprintf_r+0x24c>)
 800c0d4:	f7f4 f914 	bl	8000300 <memchr>
 800c0d8:	9a04      	ldr	r2, [sp, #16]
 800c0da:	b9d8      	cbnz	r0, 800c114 <_vfiprintf_r+0x12c>
 800c0dc:	06d1      	lsls	r1, r2, #27
 800c0de:	bf44      	itt	mi
 800c0e0:	2320      	movmi	r3, #32
 800c0e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0e6:	0713      	lsls	r3, r2, #28
 800c0e8:	bf44      	itt	mi
 800c0ea:	232b      	movmi	r3, #43	; 0x2b
 800c0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c0f4:	2b2a      	cmp	r3, #42	; 0x2a
 800c0f6:	d015      	beq.n	800c124 <_vfiprintf_r+0x13c>
 800c0f8:	9a07      	ldr	r2, [sp, #28]
 800c0fa:	4654      	mov	r4, sl
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	f04f 0c0a 	mov.w	ip, #10
 800c102:	4621      	mov	r1, r4
 800c104:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c108:	3b30      	subs	r3, #48	; 0x30
 800c10a:	2b09      	cmp	r3, #9
 800c10c:	d94e      	bls.n	800c1ac <_vfiprintf_r+0x1c4>
 800c10e:	b1b0      	cbz	r0, 800c13e <_vfiprintf_r+0x156>
 800c110:	9207      	str	r2, [sp, #28]
 800c112:	e014      	b.n	800c13e <_vfiprintf_r+0x156>
 800c114:	eba0 0308 	sub.w	r3, r0, r8
 800c118:	fa09 f303 	lsl.w	r3, r9, r3
 800c11c:	4313      	orrs	r3, r2
 800c11e:	9304      	str	r3, [sp, #16]
 800c120:	46a2      	mov	sl, r4
 800c122:	e7d2      	b.n	800c0ca <_vfiprintf_r+0xe2>
 800c124:	9b03      	ldr	r3, [sp, #12]
 800c126:	1d19      	adds	r1, r3, #4
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	9103      	str	r1, [sp, #12]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	bfbb      	ittet	lt
 800c130:	425b      	neglt	r3, r3
 800c132:	f042 0202 	orrlt.w	r2, r2, #2
 800c136:	9307      	strge	r3, [sp, #28]
 800c138:	9307      	strlt	r3, [sp, #28]
 800c13a:	bfb8      	it	lt
 800c13c:	9204      	strlt	r2, [sp, #16]
 800c13e:	7823      	ldrb	r3, [r4, #0]
 800c140:	2b2e      	cmp	r3, #46	; 0x2e
 800c142:	d10c      	bne.n	800c15e <_vfiprintf_r+0x176>
 800c144:	7863      	ldrb	r3, [r4, #1]
 800c146:	2b2a      	cmp	r3, #42	; 0x2a
 800c148:	d135      	bne.n	800c1b6 <_vfiprintf_r+0x1ce>
 800c14a:	9b03      	ldr	r3, [sp, #12]
 800c14c:	1d1a      	adds	r2, r3, #4
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	9203      	str	r2, [sp, #12]
 800c152:	2b00      	cmp	r3, #0
 800c154:	bfb8      	it	lt
 800c156:	f04f 33ff 	movlt.w	r3, #4294967295
 800c15a:	3402      	adds	r4, #2
 800c15c:	9305      	str	r3, [sp, #20]
 800c15e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c244 <_vfiprintf_r+0x25c>
 800c162:	7821      	ldrb	r1, [r4, #0]
 800c164:	2203      	movs	r2, #3
 800c166:	4650      	mov	r0, sl
 800c168:	f7f4 f8ca 	bl	8000300 <memchr>
 800c16c:	b140      	cbz	r0, 800c180 <_vfiprintf_r+0x198>
 800c16e:	2340      	movs	r3, #64	; 0x40
 800c170:	eba0 000a 	sub.w	r0, r0, sl
 800c174:	fa03 f000 	lsl.w	r0, r3, r0
 800c178:	9b04      	ldr	r3, [sp, #16]
 800c17a:	4303      	orrs	r3, r0
 800c17c:	3401      	adds	r4, #1
 800c17e:	9304      	str	r3, [sp, #16]
 800c180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c184:	482c      	ldr	r0, [pc, #176]	; (800c238 <_vfiprintf_r+0x250>)
 800c186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c18a:	2206      	movs	r2, #6
 800c18c:	f7f4 f8b8 	bl	8000300 <memchr>
 800c190:	2800      	cmp	r0, #0
 800c192:	d03f      	beq.n	800c214 <_vfiprintf_r+0x22c>
 800c194:	4b29      	ldr	r3, [pc, #164]	; (800c23c <_vfiprintf_r+0x254>)
 800c196:	bb1b      	cbnz	r3, 800c1e0 <_vfiprintf_r+0x1f8>
 800c198:	9b03      	ldr	r3, [sp, #12]
 800c19a:	3307      	adds	r3, #7
 800c19c:	f023 0307 	bic.w	r3, r3, #7
 800c1a0:	3308      	adds	r3, #8
 800c1a2:	9303      	str	r3, [sp, #12]
 800c1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1a6:	443b      	add	r3, r7
 800c1a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c1aa:	e767      	b.n	800c07c <_vfiprintf_r+0x94>
 800c1ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1b0:	460c      	mov	r4, r1
 800c1b2:	2001      	movs	r0, #1
 800c1b4:	e7a5      	b.n	800c102 <_vfiprintf_r+0x11a>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	3401      	adds	r4, #1
 800c1ba:	9305      	str	r3, [sp, #20]
 800c1bc:	4619      	mov	r1, r3
 800c1be:	f04f 0c0a 	mov.w	ip, #10
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1c8:	3a30      	subs	r2, #48	; 0x30
 800c1ca:	2a09      	cmp	r2, #9
 800c1cc:	d903      	bls.n	800c1d6 <_vfiprintf_r+0x1ee>
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d0c5      	beq.n	800c15e <_vfiprintf_r+0x176>
 800c1d2:	9105      	str	r1, [sp, #20]
 800c1d4:	e7c3      	b.n	800c15e <_vfiprintf_r+0x176>
 800c1d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1da:	4604      	mov	r4, r0
 800c1dc:	2301      	movs	r3, #1
 800c1de:	e7f0      	b.n	800c1c2 <_vfiprintf_r+0x1da>
 800c1e0:	ab03      	add	r3, sp, #12
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	462a      	mov	r2, r5
 800c1e6:	4b16      	ldr	r3, [pc, #88]	; (800c240 <_vfiprintf_r+0x258>)
 800c1e8:	a904      	add	r1, sp, #16
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	f7fc f8e4 	bl	80083b8 <_printf_float>
 800c1f0:	4607      	mov	r7, r0
 800c1f2:	1c78      	adds	r0, r7, #1
 800c1f4:	d1d6      	bne.n	800c1a4 <_vfiprintf_r+0x1bc>
 800c1f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1f8:	07d9      	lsls	r1, r3, #31
 800c1fa:	d405      	bmi.n	800c208 <_vfiprintf_r+0x220>
 800c1fc:	89ab      	ldrh	r3, [r5, #12]
 800c1fe:	059a      	lsls	r2, r3, #22
 800c200:	d402      	bmi.n	800c208 <_vfiprintf_r+0x220>
 800c202:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c204:	f7fe ff8c 	bl	800b120 <__retarget_lock_release_recursive>
 800c208:	89ab      	ldrh	r3, [r5, #12]
 800c20a:	065b      	lsls	r3, r3, #25
 800c20c:	f53f af12 	bmi.w	800c034 <_vfiprintf_r+0x4c>
 800c210:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c212:	e711      	b.n	800c038 <_vfiprintf_r+0x50>
 800c214:	ab03      	add	r3, sp, #12
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	462a      	mov	r2, r5
 800c21a:	4b09      	ldr	r3, [pc, #36]	; (800c240 <_vfiprintf_r+0x258>)
 800c21c:	a904      	add	r1, sp, #16
 800c21e:	4630      	mov	r0, r6
 800c220:	f7fc fb56 	bl	80088d0 <_printf_i>
 800c224:	e7e4      	b.n	800c1f0 <_vfiprintf_r+0x208>
 800c226:	bf00      	nop
 800c228:	0800cc44 	.word	0x0800cc44
 800c22c:	0800cc64 	.word	0x0800cc64
 800c230:	0800cc24 	.word	0x0800cc24
 800c234:	0800ce5c 	.word	0x0800ce5c
 800c238:	0800ce66 	.word	0x0800ce66
 800c23c:	080083b9 	.word	0x080083b9
 800c240:	0800bfc3 	.word	0x0800bfc3
 800c244:	0800ce62 	.word	0x0800ce62

0800c248 <nan>:
 800c248:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c250 <nan+0x8>
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	00000000 	.word	0x00000000
 800c254:	7ff80000 	.word	0x7ff80000

0800c258 <_sbrk_r>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	4d06      	ldr	r5, [pc, #24]	; (800c274 <_sbrk_r+0x1c>)
 800c25c:	2300      	movs	r3, #0
 800c25e:	4604      	mov	r4, r0
 800c260:	4608      	mov	r0, r1
 800c262:	602b      	str	r3, [r5, #0]
 800c264:	f7f5 ff14 	bl	8002090 <_sbrk>
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	d102      	bne.n	800c272 <_sbrk_r+0x1a>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	b103      	cbz	r3, 800c272 <_sbrk_r+0x1a>
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	bd38      	pop	{r3, r4, r5, pc}
 800c274:	24000574 	.word	0x24000574

0800c278 <__sread>:
 800c278:	b510      	push	{r4, lr}
 800c27a:	460c      	mov	r4, r1
 800c27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c280:	f000 fb02 	bl	800c888 <_read_r>
 800c284:	2800      	cmp	r0, #0
 800c286:	bfab      	itete	ge
 800c288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c28a:	89a3      	ldrhlt	r3, [r4, #12]
 800c28c:	181b      	addge	r3, r3, r0
 800c28e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c292:	bfac      	ite	ge
 800c294:	6563      	strge	r3, [r4, #84]	; 0x54
 800c296:	81a3      	strhlt	r3, [r4, #12]
 800c298:	bd10      	pop	{r4, pc}

0800c29a <__swrite>:
 800c29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c29e:	461f      	mov	r7, r3
 800c2a0:	898b      	ldrh	r3, [r1, #12]
 800c2a2:	05db      	lsls	r3, r3, #23
 800c2a4:	4605      	mov	r5, r0
 800c2a6:	460c      	mov	r4, r1
 800c2a8:	4616      	mov	r6, r2
 800c2aa:	d505      	bpl.n	800c2b8 <__swrite+0x1e>
 800c2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2b0:	2302      	movs	r3, #2
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f000 fa1a 	bl	800c6ec <_lseek_r>
 800c2b8:	89a3      	ldrh	r3, [r4, #12]
 800c2ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2c2:	81a3      	strh	r3, [r4, #12]
 800c2c4:	4632      	mov	r2, r6
 800c2c6:	463b      	mov	r3, r7
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ce:	f000 b88b 	b.w	800c3e8 <_write_r>

0800c2d2 <__sseek>:
 800c2d2:	b510      	push	{r4, lr}
 800c2d4:	460c      	mov	r4, r1
 800c2d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2da:	f000 fa07 	bl	800c6ec <_lseek_r>
 800c2de:	1c43      	adds	r3, r0, #1
 800c2e0:	89a3      	ldrh	r3, [r4, #12]
 800c2e2:	bf15      	itete	ne
 800c2e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2ee:	81a3      	strheq	r3, [r4, #12]
 800c2f0:	bf18      	it	ne
 800c2f2:	81a3      	strhne	r3, [r4, #12]
 800c2f4:	bd10      	pop	{r4, pc}

0800c2f6 <__sclose>:
 800c2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2fa:	f000 b913 	b.w	800c524 <_close_r>

0800c2fe <strncmp>:
 800c2fe:	b510      	push	{r4, lr}
 800c300:	b17a      	cbz	r2, 800c322 <strncmp+0x24>
 800c302:	4603      	mov	r3, r0
 800c304:	3901      	subs	r1, #1
 800c306:	1884      	adds	r4, r0, r2
 800c308:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c30c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c310:	4290      	cmp	r0, r2
 800c312:	d101      	bne.n	800c318 <strncmp+0x1a>
 800c314:	42a3      	cmp	r3, r4
 800c316:	d101      	bne.n	800c31c <strncmp+0x1e>
 800c318:	1a80      	subs	r0, r0, r2
 800c31a:	bd10      	pop	{r4, pc}
 800c31c:	2800      	cmp	r0, #0
 800c31e:	d1f3      	bne.n	800c308 <strncmp+0xa>
 800c320:	e7fa      	b.n	800c318 <strncmp+0x1a>
 800c322:	4610      	mov	r0, r2
 800c324:	e7f9      	b.n	800c31a <strncmp+0x1c>
	...

0800c328 <__swbuf_r>:
 800c328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32a:	460e      	mov	r6, r1
 800c32c:	4614      	mov	r4, r2
 800c32e:	4605      	mov	r5, r0
 800c330:	b118      	cbz	r0, 800c33a <__swbuf_r+0x12>
 800c332:	6983      	ldr	r3, [r0, #24]
 800c334:	b90b      	cbnz	r3, 800c33a <__swbuf_r+0x12>
 800c336:	f7fe fae1 	bl	800a8fc <__sinit>
 800c33a:	4b21      	ldr	r3, [pc, #132]	; (800c3c0 <__swbuf_r+0x98>)
 800c33c:	429c      	cmp	r4, r3
 800c33e:	d12b      	bne.n	800c398 <__swbuf_r+0x70>
 800c340:	686c      	ldr	r4, [r5, #4]
 800c342:	69a3      	ldr	r3, [r4, #24]
 800c344:	60a3      	str	r3, [r4, #8]
 800c346:	89a3      	ldrh	r3, [r4, #12]
 800c348:	071a      	lsls	r2, r3, #28
 800c34a:	d52f      	bpl.n	800c3ac <__swbuf_r+0x84>
 800c34c:	6923      	ldr	r3, [r4, #16]
 800c34e:	b36b      	cbz	r3, 800c3ac <__swbuf_r+0x84>
 800c350:	6923      	ldr	r3, [r4, #16]
 800c352:	6820      	ldr	r0, [r4, #0]
 800c354:	1ac0      	subs	r0, r0, r3
 800c356:	6963      	ldr	r3, [r4, #20]
 800c358:	b2f6      	uxtb	r6, r6
 800c35a:	4283      	cmp	r3, r0
 800c35c:	4637      	mov	r7, r6
 800c35e:	dc04      	bgt.n	800c36a <__swbuf_r+0x42>
 800c360:	4621      	mov	r1, r4
 800c362:	4628      	mov	r0, r5
 800c364:	f000 f974 	bl	800c650 <_fflush_r>
 800c368:	bb30      	cbnz	r0, 800c3b8 <__swbuf_r+0x90>
 800c36a:	68a3      	ldr	r3, [r4, #8]
 800c36c:	3b01      	subs	r3, #1
 800c36e:	60a3      	str	r3, [r4, #8]
 800c370:	6823      	ldr	r3, [r4, #0]
 800c372:	1c5a      	adds	r2, r3, #1
 800c374:	6022      	str	r2, [r4, #0]
 800c376:	701e      	strb	r6, [r3, #0]
 800c378:	6963      	ldr	r3, [r4, #20]
 800c37a:	3001      	adds	r0, #1
 800c37c:	4283      	cmp	r3, r0
 800c37e:	d004      	beq.n	800c38a <__swbuf_r+0x62>
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	07db      	lsls	r3, r3, #31
 800c384:	d506      	bpl.n	800c394 <__swbuf_r+0x6c>
 800c386:	2e0a      	cmp	r6, #10
 800c388:	d104      	bne.n	800c394 <__swbuf_r+0x6c>
 800c38a:	4621      	mov	r1, r4
 800c38c:	4628      	mov	r0, r5
 800c38e:	f000 f95f 	bl	800c650 <_fflush_r>
 800c392:	b988      	cbnz	r0, 800c3b8 <__swbuf_r+0x90>
 800c394:	4638      	mov	r0, r7
 800c396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c398:	4b0a      	ldr	r3, [pc, #40]	; (800c3c4 <__swbuf_r+0x9c>)
 800c39a:	429c      	cmp	r4, r3
 800c39c:	d101      	bne.n	800c3a2 <__swbuf_r+0x7a>
 800c39e:	68ac      	ldr	r4, [r5, #8]
 800c3a0:	e7cf      	b.n	800c342 <__swbuf_r+0x1a>
 800c3a2:	4b09      	ldr	r3, [pc, #36]	; (800c3c8 <__swbuf_r+0xa0>)
 800c3a4:	429c      	cmp	r4, r3
 800c3a6:	bf08      	it	eq
 800c3a8:	68ec      	ldreq	r4, [r5, #12]
 800c3aa:	e7ca      	b.n	800c342 <__swbuf_r+0x1a>
 800c3ac:	4621      	mov	r1, r4
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	f000 f82c 	bl	800c40c <__swsetup_r>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d0cb      	beq.n	800c350 <__swbuf_r+0x28>
 800c3b8:	f04f 37ff 	mov.w	r7, #4294967295
 800c3bc:	e7ea      	b.n	800c394 <__swbuf_r+0x6c>
 800c3be:	bf00      	nop
 800c3c0:	0800cc44 	.word	0x0800cc44
 800c3c4:	0800cc64 	.word	0x0800cc64
 800c3c8:	0800cc24 	.word	0x0800cc24

0800c3cc <__ascii_wctomb>:
 800c3cc:	b149      	cbz	r1, 800c3e2 <__ascii_wctomb+0x16>
 800c3ce:	2aff      	cmp	r2, #255	; 0xff
 800c3d0:	bf85      	ittet	hi
 800c3d2:	238a      	movhi	r3, #138	; 0x8a
 800c3d4:	6003      	strhi	r3, [r0, #0]
 800c3d6:	700a      	strbls	r2, [r1, #0]
 800c3d8:	f04f 30ff 	movhi.w	r0, #4294967295
 800c3dc:	bf98      	it	ls
 800c3de:	2001      	movls	r0, #1
 800c3e0:	4770      	bx	lr
 800c3e2:	4608      	mov	r0, r1
 800c3e4:	4770      	bx	lr
	...

0800c3e8 <_write_r>:
 800c3e8:	b538      	push	{r3, r4, r5, lr}
 800c3ea:	4d07      	ldr	r5, [pc, #28]	; (800c408 <_write_r+0x20>)
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	4608      	mov	r0, r1
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	602a      	str	r2, [r5, #0]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	f7f5 fdf9 	bl	8001fee <_write>
 800c3fc:	1c43      	adds	r3, r0, #1
 800c3fe:	d102      	bne.n	800c406 <_write_r+0x1e>
 800c400:	682b      	ldr	r3, [r5, #0]
 800c402:	b103      	cbz	r3, 800c406 <_write_r+0x1e>
 800c404:	6023      	str	r3, [r4, #0]
 800c406:	bd38      	pop	{r3, r4, r5, pc}
 800c408:	24000574 	.word	0x24000574

0800c40c <__swsetup_r>:
 800c40c:	4b32      	ldr	r3, [pc, #200]	; (800c4d8 <__swsetup_r+0xcc>)
 800c40e:	b570      	push	{r4, r5, r6, lr}
 800c410:	681d      	ldr	r5, [r3, #0]
 800c412:	4606      	mov	r6, r0
 800c414:	460c      	mov	r4, r1
 800c416:	b125      	cbz	r5, 800c422 <__swsetup_r+0x16>
 800c418:	69ab      	ldr	r3, [r5, #24]
 800c41a:	b913      	cbnz	r3, 800c422 <__swsetup_r+0x16>
 800c41c:	4628      	mov	r0, r5
 800c41e:	f7fe fa6d 	bl	800a8fc <__sinit>
 800c422:	4b2e      	ldr	r3, [pc, #184]	; (800c4dc <__swsetup_r+0xd0>)
 800c424:	429c      	cmp	r4, r3
 800c426:	d10f      	bne.n	800c448 <__swsetup_r+0x3c>
 800c428:	686c      	ldr	r4, [r5, #4]
 800c42a:	89a3      	ldrh	r3, [r4, #12]
 800c42c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c430:	0719      	lsls	r1, r3, #28
 800c432:	d42c      	bmi.n	800c48e <__swsetup_r+0x82>
 800c434:	06dd      	lsls	r5, r3, #27
 800c436:	d411      	bmi.n	800c45c <__swsetup_r+0x50>
 800c438:	2309      	movs	r3, #9
 800c43a:	6033      	str	r3, [r6, #0]
 800c43c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c440:	81a3      	strh	r3, [r4, #12]
 800c442:	f04f 30ff 	mov.w	r0, #4294967295
 800c446:	e03e      	b.n	800c4c6 <__swsetup_r+0xba>
 800c448:	4b25      	ldr	r3, [pc, #148]	; (800c4e0 <__swsetup_r+0xd4>)
 800c44a:	429c      	cmp	r4, r3
 800c44c:	d101      	bne.n	800c452 <__swsetup_r+0x46>
 800c44e:	68ac      	ldr	r4, [r5, #8]
 800c450:	e7eb      	b.n	800c42a <__swsetup_r+0x1e>
 800c452:	4b24      	ldr	r3, [pc, #144]	; (800c4e4 <__swsetup_r+0xd8>)
 800c454:	429c      	cmp	r4, r3
 800c456:	bf08      	it	eq
 800c458:	68ec      	ldreq	r4, [r5, #12]
 800c45a:	e7e6      	b.n	800c42a <__swsetup_r+0x1e>
 800c45c:	0758      	lsls	r0, r3, #29
 800c45e:	d512      	bpl.n	800c486 <__swsetup_r+0x7a>
 800c460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c462:	b141      	cbz	r1, 800c476 <__swsetup_r+0x6a>
 800c464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c468:	4299      	cmp	r1, r3
 800c46a:	d002      	beq.n	800c472 <__swsetup_r+0x66>
 800c46c:	4630      	mov	r0, r6
 800c46e:	f7ff fb55 	bl	800bb1c <_free_r>
 800c472:	2300      	movs	r3, #0
 800c474:	6363      	str	r3, [r4, #52]	; 0x34
 800c476:	89a3      	ldrh	r3, [r4, #12]
 800c478:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c47c:	81a3      	strh	r3, [r4, #12]
 800c47e:	2300      	movs	r3, #0
 800c480:	6063      	str	r3, [r4, #4]
 800c482:	6923      	ldr	r3, [r4, #16]
 800c484:	6023      	str	r3, [r4, #0]
 800c486:	89a3      	ldrh	r3, [r4, #12]
 800c488:	f043 0308 	orr.w	r3, r3, #8
 800c48c:	81a3      	strh	r3, [r4, #12]
 800c48e:	6923      	ldr	r3, [r4, #16]
 800c490:	b94b      	cbnz	r3, 800c4a6 <__swsetup_r+0x9a>
 800c492:	89a3      	ldrh	r3, [r4, #12]
 800c494:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c49c:	d003      	beq.n	800c4a6 <__swsetup_r+0x9a>
 800c49e:	4621      	mov	r1, r4
 800c4a0:	4630      	mov	r0, r6
 800c4a2:	f000 f95b 	bl	800c75c <__smakebuf_r>
 800c4a6:	89a0      	ldrh	r0, [r4, #12]
 800c4a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4ac:	f010 0301 	ands.w	r3, r0, #1
 800c4b0:	d00a      	beq.n	800c4c8 <__swsetup_r+0xbc>
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	60a3      	str	r3, [r4, #8]
 800c4b6:	6963      	ldr	r3, [r4, #20]
 800c4b8:	425b      	negs	r3, r3
 800c4ba:	61a3      	str	r3, [r4, #24]
 800c4bc:	6923      	ldr	r3, [r4, #16]
 800c4be:	b943      	cbnz	r3, 800c4d2 <__swsetup_r+0xc6>
 800c4c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4c4:	d1ba      	bne.n	800c43c <__swsetup_r+0x30>
 800c4c6:	bd70      	pop	{r4, r5, r6, pc}
 800c4c8:	0781      	lsls	r1, r0, #30
 800c4ca:	bf58      	it	pl
 800c4cc:	6963      	ldrpl	r3, [r4, #20]
 800c4ce:	60a3      	str	r3, [r4, #8]
 800c4d0:	e7f4      	b.n	800c4bc <__swsetup_r+0xb0>
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	e7f7      	b.n	800c4c6 <__swsetup_r+0xba>
 800c4d6:	bf00      	nop
 800c4d8:	24000038 	.word	0x24000038
 800c4dc:	0800cc44 	.word	0x0800cc44
 800c4e0:	0800cc64 	.word	0x0800cc64
 800c4e4:	0800cc24 	.word	0x0800cc24

0800c4e8 <__assert_func>:
 800c4e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4ea:	4614      	mov	r4, r2
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	4b09      	ldr	r3, [pc, #36]	; (800c514 <__assert_func+0x2c>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4605      	mov	r5, r0
 800c4f4:	68d8      	ldr	r0, [r3, #12]
 800c4f6:	b14c      	cbz	r4, 800c50c <__assert_func+0x24>
 800c4f8:	4b07      	ldr	r3, [pc, #28]	; (800c518 <__assert_func+0x30>)
 800c4fa:	9100      	str	r1, [sp, #0]
 800c4fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c500:	4906      	ldr	r1, [pc, #24]	; (800c51c <__assert_func+0x34>)
 800c502:	462b      	mov	r3, r5
 800c504:	f000 f8e0 	bl	800c6c8 <fiprintf>
 800c508:	f000 f9d0 	bl	800c8ac <abort>
 800c50c:	4b04      	ldr	r3, [pc, #16]	; (800c520 <__assert_func+0x38>)
 800c50e:	461c      	mov	r4, r3
 800c510:	e7f3      	b.n	800c4fa <__assert_func+0x12>
 800c512:	bf00      	nop
 800c514:	24000038 	.word	0x24000038
 800c518:	0800ce6d 	.word	0x0800ce6d
 800c51c:	0800ce7a 	.word	0x0800ce7a
 800c520:	0800cea8 	.word	0x0800cea8

0800c524 <_close_r>:
 800c524:	b538      	push	{r3, r4, r5, lr}
 800c526:	4d06      	ldr	r5, [pc, #24]	; (800c540 <_close_r+0x1c>)
 800c528:	2300      	movs	r3, #0
 800c52a:	4604      	mov	r4, r0
 800c52c:	4608      	mov	r0, r1
 800c52e:	602b      	str	r3, [r5, #0]
 800c530:	f7f5 fd79 	bl	8002026 <_close>
 800c534:	1c43      	adds	r3, r0, #1
 800c536:	d102      	bne.n	800c53e <_close_r+0x1a>
 800c538:	682b      	ldr	r3, [r5, #0]
 800c53a:	b103      	cbz	r3, 800c53e <_close_r+0x1a>
 800c53c:	6023      	str	r3, [r4, #0]
 800c53e:	bd38      	pop	{r3, r4, r5, pc}
 800c540:	24000574 	.word	0x24000574

0800c544 <__sflush_r>:
 800c544:	898a      	ldrh	r2, [r1, #12]
 800c546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c54a:	4605      	mov	r5, r0
 800c54c:	0710      	lsls	r0, r2, #28
 800c54e:	460c      	mov	r4, r1
 800c550:	d458      	bmi.n	800c604 <__sflush_r+0xc0>
 800c552:	684b      	ldr	r3, [r1, #4]
 800c554:	2b00      	cmp	r3, #0
 800c556:	dc05      	bgt.n	800c564 <__sflush_r+0x20>
 800c558:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	dc02      	bgt.n	800c564 <__sflush_r+0x20>
 800c55e:	2000      	movs	r0, #0
 800c560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c566:	2e00      	cmp	r6, #0
 800c568:	d0f9      	beq.n	800c55e <__sflush_r+0x1a>
 800c56a:	2300      	movs	r3, #0
 800c56c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c570:	682f      	ldr	r7, [r5, #0]
 800c572:	602b      	str	r3, [r5, #0]
 800c574:	d032      	beq.n	800c5dc <__sflush_r+0x98>
 800c576:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c578:	89a3      	ldrh	r3, [r4, #12]
 800c57a:	075a      	lsls	r2, r3, #29
 800c57c:	d505      	bpl.n	800c58a <__sflush_r+0x46>
 800c57e:	6863      	ldr	r3, [r4, #4]
 800c580:	1ac0      	subs	r0, r0, r3
 800c582:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c584:	b10b      	cbz	r3, 800c58a <__sflush_r+0x46>
 800c586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c588:	1ac0      	subs	r0, r0, r3
 800c58a:	2300      	movs	r3, #0
 800c58c:	4602      	mov	r2, r0
 800c58e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c590:	6a21      	ldr	r1, [r4, #32]
 800c592:	4628      	mov	r0, r5
 800c594:	47b0      	blx	r6
 800c596:	1c43      	adds	r3, r0, #1
 800c598:	89a3      	ldrh	r3, [r4, #12]
 800c59a:	d106      	bne.n	800c5aa <__sflush_r+0x66>
 800c59c:	6829      	ldr	r1, [r5, #0]
 800c59e:	291d      	cmp	r1, #29
 800c5a0:	d82c      	bhi.n	800c5fc <__sflush_r+0xb8>
 800c5a2:	4a2a      	ldr	r2, [pc, #168]	; (800c64c <__sflush_r+0x108>)
 800c5a4:	40ca      	lsrs	r2, r1
 800c5a6:	07d6      	lsls	r6, r2, #31
 800c5a8:	d528      	bpl.n	800c5fc <__sflush_r+0xb8>
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	6062      	str	r2, [r4, #4]
 800c5ae:	04d9      	lsls	r1, r3, #19
 800c5b0:	6922      	ldr	r2, [r4, #16]
 800c5b2:	6022      	str	r2, [r4, #0]
 800c5b4:	d504      	bpl.n	800c5c0 <__sflush_r+0x7c>
 800c5b6:	1c42      	adds	r2, r0, #1
 800c5b8:	d101      	bne.n	800c5be <__sflush_r+0x7a>
 800c5ba:	682b      	ldr	r3, [r5, #0]
 800c5bc:	b903      	cbnz	r3, 800c5c0 <__sflush_r+0x7c>
 800c5be:	6560      	str	r0, [r4, #84]	; 0x54
 800c5c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5c2:	602f      	str	r7, [r5, #0]
 800c5c4:	2900      	cmp	r1, #0
 800c5c6:	d0ca      	beq.n	800c55e <__sflush_r+0x1a>
 800c5c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5cc:	4299      	cmp	r1, r3
 800c5ce:	d002      	beq.n	800c5d6 <__sflush_r+0x92>
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	f7ff faa3 	bl	800bb1c <_free_r>
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	6360      	str	r0, [r4, #52]	; 0x34
 800c5da:	e7c1      	b.n	800c560 <__sflush_r+0x1c>
 800c5dc:	6a21      	ldr	r1, [r4, #32]
 800c5de:	2301      	movs	r3, #1
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	47b0      	blx	r6
 800c5e4:	1c41      	adds	r1, r0, #1
 800c5e6:	d1c7      	bne.n	800c578 <__sflush_r+0x34>
 800c5e8:	682b      	ldr	r3, [r5, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d0c4      	beq.n	800c578 <__sflush_r+0x34>
 800c5ee:	2b1d      	cmp	r3, #29
 800c5f0:	d001      	beq.n	800c5f6 <__sflush_r+0xb2>
 800c5f2:	2b16      	cmp	r3, #22
 800c5f4:	d101      	bne.n	800c5fa <__sflush_r+0xb6>
 800c5f6:	602f      	str	r7, [r5, #0]
 800c5f8:	e7b1      	b.n	800c55e <__sflush_r+0x1a>
 800c5fa:	89a3      	ldrh	r3, [r4, #12]
 800c5fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c600:	81a3      	strh	r3, [r4, #12]
 800c602:	e7ad      	b.n	800c560 <__sflush_r+0x1c>
 800c604:	690f      	ldr	r7, [r1, #16]
 800c606:	2f00      	cmp	r7, #0
 800c608:	d0a9      	beq.n	800c55e <__sflush_r+0x1a>
 800c60a:	0793      	lsls	r3, r2, #30
 800c60c:	680e      	ldr	r6, [r1, #0]
 800c60e:	bf08      	it	eq
 800c610:	694b      	ldreq	r3, [r1, #20]
 800c612:	600f      	str	r7, [r1, #0]
 800c614:	bf18      	it	ne
 800c616:	2300      	movne	r3, #0
 800c618:	eba6 0807 	sub.w	r8, r6, r7
 800c61c:	608b      	str	r3, [r1, #8]
 800c61e:	f1b8 0f00 	cmp.w	r8, #0
 800c622:	dd9c      	ble.n	800c55e <__sflush_r+0x1a>
 800c624:	6a21      	ldr	r1, [r4, #32]
 800c626:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c628:	4643      	mov	r3, r8
 800c62a:	463a      	mov	r2, r7
 800c62c:	4628      	mov	r0, r5
 800c62e:	47b0      	blx	r6
 800c630:	2800      	cmp	r0, #0
 800c632:	dc06      	bgt.n	800c642 <__sflush_r+0xfe>
 800c634:	89a3      	ldrh	r3, [r4, #12]
 800c636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c63a:	81a3      	strh	r3, [r4, #12]
 800c63c:	f04f 30ff 	mov.w	r0, #4294967295
 800c640:	e78e      	b.n	800c560 <__sflush_r+0x1c>
 800c642:	4407      	add	r7, r0
 800c644:	eba8 0800 	sub.w	r8, r8, r0
 800c648:	e7e9      	b.n	800c61e <__sflush_r+0xda>
 800c64a:	bf00      	nop
 800c64c:	20400001 	.word	0x20400001

0800c650 <_fflush_r>:
 800c650:	b538      	push	{r3, r4, r5, lr}
 800c652:	690b      	ldr	r3, [r1, #16]
 800c654:	4605      	mov	r5, r0
 800c656:	460c      	mov	r4, r1
 800c658:	b913      	cbnz	r3, 800c660 <_fflush_r+0x10>
 800c65a:	2500      	movs	r5, #0
 800c65c:	4628      	mov	r0, r5
 800c65e:	bd38      	pop	{r3, r4, r5, pc}
 800c660:	b118      	cbz	r0, 800c66a <_fflush_r+0x1a>
 800c662:	6983      	ldr	r3, [r0, #24]
 800c664:	b90b      	cbnz	r3, 800c66a <_fflush_r+0x1a>
 800c666:	f7fe f949 	bl	800a8fc <__sinit>
 800c66a:	4b14      	ldr	r3, [pc, #80]	; (800c6bc <_fflush_r+0x6c>)
 800c66c:	429c      	cmp	r4, r3
 800c66e:	d11b      	bne.n	800c6a8 <_fflush_r+0x58>
 800c670:	686c      	ldr	r4, [r5, #4]
 800c672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d0ef      	beq.n	800c65a <_fflush_r+0xa>
 800c67a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c67c:	07d0      	lsls	r0, r2, #31
 800c67e:	d404      	bmi.n	800c68a <_fflush_r+0x3a>
 800c680:	0599      	lsls	r1, r3, #22
 800c682:	d402      	bmi.n	800c68a <_fflush_r+0x3a>
 800c684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c686:	f7fe fd4a 	bl	800b11e <__retarget_lock_acquire_recursive>
 800c68a:	4628      	mov	r0, r5
 800c68c:	4621      	mov	r1, r4
 800c68e:	f7ff ff59 	bl	800c544 <__sflush_r>
 800c692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c694:	07da      	lsls	r2, r3, #31
 800c696:	4605      	mov	r5, r0
 800c698:	d4e0      	bmi.n	800c65c <_fflush_r+0xc>
 800c69a:	89a3      	ldrh	r3, [r4, #12]
 800c69c:	059b      	lsls	r3, r3, #22
 800c69e:	d4dd      	bmi.n	800c65c <_fflush_r+0xc>
 800c6a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6a2:	f7fe fd3d 	bl	800b120 <__retarget_lock_release_recursive>
 800c6a6:	e7d9      	b.n	800c65c <_fflush_r+0xc>
 800c6a8:	4b05      	ldr	r3, [pc, #20]	; (800c6c0 <_fflush_r+0x70>)
 800c6aa:	429c      	cmp	r4, r3
 800c6ac:	d101      	bne.n	800c6b2 <_fflush_r+0x62>
 800c6ae:	68ac      	ldr	r4, [r5, #8]
 800c6b0:	e7df      	b.n	800c672 <_fflush_r+0x22>
 800c6b2:	4b04      	ldr	r3, [pc, #16]	; (800c6c4 <_fflush_r+0x74>)
 800c6b4:	429c      	cmp	r4, r3
 800c6b6:	bf08      	it	eq
 800c6b8:	68ec      	ldreq	r4, [r5, #12]
 800c6ba:	e7da      	b.n	800c672 <_fflush_r+0x22>
 800c6bc:	0800cc44 	.word	0x0800cc44
 800c6c0:	0800cc64 	.word	0x0800cc64
 800c6c4:	0800cc24 	.word	0x0800cc24

0800c6c8 <fiprintf>:
 800c6c8:	b40e      	push	{r1, r2, r3}
 800c6ca:	b503      	push	{r0, r1, lr}
 800c6cc:	4601      	mov	r1, r0
 800c6ce:	ab03      	add	r3, sp, #12
 800c6d0:	4805      	ldr	r0, [pc, #20]	; (800c6e8 <fiprintf+0x20>)
 800c6d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6d6:	6800      	ldr	r0, [r0, #0]
 800c6d8:	9301      	str	r3, [sp, #4]
 800c6da:	f7ff fc85 	bl	800bfe8 <_vfiprintf_r>
 800c6de:	b002      	add	sp, #8
 800c6e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6e4:	b003      	add	sp, #12
 800c6e6:	4770      	bx	lr
 800c6e8:	24000038 	.word	0x24000038

0800c6ec <_lseek_r>:
 800c6ec:	b538      	push	{r3, r4, r5, lr}
 800c6ee:	4d07      	ldr	r5, [pc, #28]	; (800c70c <_lseek_r+0x20>)
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	4608      	mov	r0, r1
 800c6f4:	4611      	mov	r1, r2
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	602a      	str	r2, [r5, #0]
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	f7f5 fcba 	bl	8002074 <_lseek>
 800c700:	1c43      	adds	r3, r0, #1
 800c702:	d102      	bne.n	800c70a <_lseek_r+0x1e>
 800c704:	682b      	ldr	r3, [r5, #0]
 800c706:	b103      	cbz	r3, 800c70a <_lseek_r+0x1e>
 800c708:	6023      	str	r3, [r4, #0]
 800c70a:	bd38      	pop	{r3, r4, r5, pc}
 800c70c:	24000574 	.word	0x24000574

0800c710 <__swhatbuf_r>:
 800c710:	b570      	push	{r4, r5, r6, lr}
 800c712:	460e      	mov	r6, r1
 800c714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c718:	2900      	cmp	r1, #0
 800c71a:	b096      	sub	sp, #88	; 0x58
 800c71c:	4614      	mov	r4, r2
 800c71e:	461d      	mov	r5, r3
 800c720:	da08      	bge.n	800c734 <__swhatbuf_r+0x24>
 800c722:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c726:	2200      	movs	r2, #0
 800c728:	602a      	str	r2, [r5, #0]
 800c72a:	061a      	lsls	r2, r3, #24
 800c72c:	d410      	bmi.n	800c750 <__swhatbuf_r+0x40>
 800c72e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c732:	e00e      	b.n	800c752 <__swhatbuf_r+0x42>
 800c734:	466a      	mov	r2, sp
 800c736:	f000 f8c1 	bl	800c8bc <_fstat_r>
 800c73a:	2800      	cmp	r0, #0
 800c73c:	dbf1      	blt.n	800c722 <__swhatbuf_r+0x12>
 800c73e:	9a01      	ldr	r2, [sp, #4]
 800c740:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c744:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c748:	425a      	negs	r2, r3
 800c74a:	415a      	adcs	r2, r3
 800c74c:	602a      	str	r2, [r5, #0]
 800c74e:	e7ee      	b.n	800c72e <__swhatbuf_r+0x1e>
 800c750:	2340      	movs	r3, #64	; 0x40
 800c752:	2000      	movs	r0, #0
 800c754:	6023      	str	r3, [r4, #0]
 800c756:	b016      	add	sp, #88	; 0x58
 800c758:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c75c <__smakebuf_r>:
 800c75c:	898b      	ldrh	r3, [r1, #12]
 800c75e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c760:	079d      	lsls	r5, r3, #30
 800c762:	4606      	mov	r6, r0
 800c764:	460c      	mov	r4, r1
 800c766:	d507      	bpl.n	800c778 <__smakebuf_r+0x1c>
 800c768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c76c:	6023      	str	r3, [r4, #0]
 800c76e:	6123      	str	r3, [r4, #16]
 800c770:	2301      	movs	r3, #1
 800c772:	6163      	str	r3, [r4, #20]
 800c774:	b002      	add	sp, #8
 800c776:	bd70      	pop	{r4, r5, r6, pc}
 800c778:	ab01      	add	r3, sp, #4
 800c77a:	466a      	mov	r2, sp
 800c77c:	f7ff ffc8 	bl	800c710 <__swhatbuf_r>
 800c780:	9900      	ldr	r1, [sp, #0]
 800c782:	4605      	mov	r5, r0
 800c784:	4630      	mov	r0, r6
 800c786:	f7ff fa35 	bl	800bbf4 <_malloc_r>
 800c78a:	b948      	cbnz	r0, 800c7a0 <__smakebuf_r+0x44>
 800c78c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c790:	059a      	lsls	r2, r3, #22
 800c792:	d4ef      	bmi.n	800c774 <__smakebuf_r+0x18>
 800c794:	f023 0303 	bic.w	r3, r3, #3
 800c798:	f043 0302 	orr.w	r3, r3, #2
 800c79c:	81a3      	strh	r3, [r4, #12]
 800c79e:	e7e3      	b.n	800c768 <__smakebuf_r+0xc>
 800c7a0:	4b0d      	ldr	r3, [pc, #52]	; (800c7d8 <__smakebuf_r+0x7c>)
 800c7a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c7a4:	89a3      	ldrh	r3, [r4, #12]
 800c7a6:	6020      	str	r0, [r4, #0]
 800c7a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7ac:	81a3      	strh	r3, [r4, #12]
 800c7ae:	9b00      	ldr	r3, [sp, #0]
 800c7b0:	6163      	str	r3, [r4, #20]
 800c7b2:	9b01      	ldr	r3, [sp, #4]
 800c7b4:	6120      	str	r0, [r4, #16]
 800c7b6:	b15b      	cbz	r3, 800c7d0 <__smakebuf_r+0x74>
 800c7b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7bc:	4630      	mov	r0, r6
 800c7be:	f000 f88f 	bl	800c8e0 <_isatty_r>
 800c7c2:	b128      	cbz	r0, 800c7d0 <__smakebuf_r+0x74>
 800c7c4:	89a3      	ldrh	r3, [r4, #12]
 800c7c6:	f023 0303 	bic.w	r3, r3, #3
 800c7ca:	f043 0301 	orr.w	r3, r3, #1
 800c7ce:	81a3      	strh	r3, [r4, #12]
 800c7d0:	89a0      	ldrh	r0, [r4, #12]
 800c7d2:	4305      	orrs	r5, r0
 800c7d4:	81a5      	strh	r5, [r4, #12]
 800c7d6:	e7cd      	b.n	800c774 <__smakebuf_r+0x18>
 800c7d8:	0800a895 	.word	0x0800a895

0800c7dc <memmove>:
 800c7dc:	4288      	cmp	r0, r1
 800c7de:	b510      	push	{r4, lr}
 800c7e0:	eb01 0402 	add.w	r4, r1, r2
 800c7e4:	d902      	bls.n	800c7ec <memmove+0x10>
 800c7e6:	4284      	cmp	r4, r0
 800c7e8:	4623      	mov	r3, r4
 800c7ea:	d807      	bhi.n	800c7fc <memmove+0x20>
 800c7ec:	1e43      	subs	r3, r0, #1
 800c7ee:	42a1      	cmp	r1, r4
 800c7f0:	d008      	beq.n	800c804 <memmove+0x28>
 800c7f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7fa:	e7f8      	b.n	800c7ee <memmove+0x12>
 800c7fc:	4402      	add	r2, r0
 800c7fe:	4601      	mov	r1, r0
 800c800:	428a      	cmp	r2, r1
 800c802:	d100      	bne.n	800c806 <memmove+0x2a>
 800c804:	bd10      	pop	{r4, pc}
 800c806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c80a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c80e:	e7f7      	b.n	800c800 <memmove+0x24>

0800c810 <__malloc_lock>:
 800c810:	4801      	ldr	r0, [pc, #4]	; (800c818 <__malloc_lock+0x8>)
 800c812:	f7fe bc84 	b.w	800b11e <__retarget_lock_acquire_recursive>
 800c816:	bf00      	nop
 800c818:	24000568 	.word	0x24000568

0800c81c <__malloc_unlock>:
 800c81c:	4801      	ldr	r0, [pc, #4]	; (800c824 <__malloc_unlock+0x8>)
 800c81e:	f7fe bc7f 	b.w	800b120 <__retarget_lock_release_recursive>
 800c822:	bf00      	nop
 800c824:	24000568 	.word	0x24000568

0800c828 <_realloc_r>:
 800c828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c82c:	4680      	mov	r8, r0
 800c82e:	4614      	mov	r4, r2
 800c830:	460e      	mov	r6, r1
 800c832:	b921      	cbnz	r1, 800c83e <_realloc_r+0x16>
 800c834:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c838:	4611      	mov	r1, r2
 800c83a:	f7ff b9db 	b.w	800bbf4 <_malloc_r>
 800c83e:	b92a      	cbnz	r2, 800c84c <_realloc_r+0x24>
 800c840:	f7ff f96c 	bl	800bb1c <_free_r>
 800c844:	4625      	mov	r5, r4
 800c846:	4628      	mov	r0, r5
 800c848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c84c:	f000 f858 	bl	800c900 <_malloc_usable_size_r>
 800c850:	4284      	cmp	r4, r0
 800c852:	4607      	mov	r7, r0
 800c854:	d802      	bhi.n	800c85c <_realloc_r+0x34>
 800c856:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c85a:	d812      	bhi.n	800c882 <_realloc_r+0x5a>
 800c85c:	4621      	mov	r1, r4
 800c85e:	4640      	mov	r0, r8
 800c860:	f7ff f9c8 	bl	800bbf4 <_malloc_r>
 800c864:	4605      	mov	r5, r0
 800c866:	2800      	cmp	r0, #0
 800c868:	d0ed      	beq.n	800c846 <_realloc_r+0x1e>
 800c86a:	42bc      	cmp	r4, r7
 800c86c:	4622      	mov	r2, r4
 800c86e:	4631      	mov	r1, r6
 800c870:	bf28      	it	cs
 800c872:	463a      	movcs	r2, r7
 800c874:	f7fe fc70 	bl	800b158 <memcpy>
 800c878:	4631      	mov	r1, r6
 800c87a:	4640      	mov	r0, r8
 800c87c:	f7ff f94e 	bl	800bb1c <_free_r>
 800c880:	e7e1      	b.n	800c846 <_realloc_r+0x1e>
 800c882:	4635      	mov	r5, r6
 800c884:	e7df      	b.n	800c846 <_realloc_r+0x1e>
	...

0800c888 <_read_r>:
 800c888:	b538      	push	{r3, r4, r5, lr}
 800c88a:	4d07      	ldr	r5, [pc, #28]	; (800c8a8 <_read_r+0x20>)
 800c88c:	4604      	mov	r4, r0
 800c88e:	4608      	mov	r0, r1
 800c890:	4611      	mov	r1, r2
 800c892:	2200      	movs	r2, #0
 800c894:	602a      	str	r2, [r5, #0]
 800c896:	461a      	mov	r2, r3
 800c898:	f7f5 fb8c 	bl	8001fb4 <_read>
 800c89c:	1c43      	adds	r3, r0, #1
 800c89e:	d102      	bne.n	800c8a6 <_read_r+0x1e>
 800c8a0:	682b      	ldr	r3, [r5, #0]
 800c8a2:	b103      	cbz	r3, 800c8a6 <_read_r+0x1e>
 800c8a4:	6023      	str	r3, [r4, #0]
 800c8a6:	bd38      	pop	{r3, r4, r5, pc}
 800c8a8:	24000574 	.word	0x24000574

0800c8ac <abort>:
 800c8ac:	b508      	push	{r3, lr}
 800c8ae:	2006      	movs	r0, #6
 800c8b0:	f000 f856 	bl	800c960 <raise>
 800c8b4:	2001      	movs	r0, #1
 800c8b6:	f7f5 fb73 	bl	8001fa0 <_exit>
	...

0800c8bc <_fstat_r>:
 800c8bc:	b538      	push	{r3, r4, r5, lr}
 800c8be:	4d07      	ldr	r5, [pc, #28]	; (800c8dc <_fstat_r+0x20>)
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	4608      	mov	r0, r1
 800c8c6:	4611      	mov	r1, r2
 800c8c8:	602b      	str	r3, [r5, #0]
 800c8ca:	f7f5 fbb8 	bl	800203e <_fstat>
 800c8ce:	1c43      	adds	r3, r0, #1
 800c8d0:	d102      	bne.n	800c8d8 <_fstat_r+0x1c>
 800c8d2:	682b      	ldr	r3, [r5, #0]
 800c8d4:	b103      	cbz	r3, 800c8d8 <_fstat_r+0x1c>
 800c8d6:	6023      	str	r3, [r4, #0]
 800c8d8:	bd38      	pop	{r3, r4, r5, pc}
 800c8da:	bf00      	nop
 800c8dc:	24000574 	.word	0x24000574

0800c8e0 <_isatty_r>:
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	4d06      	ldr	r5, [pc, #24]	; (800c8fc <_isatty_r+0x1c>)
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	4608      	mov	r0, r1
 800c8ea:	602b      	str	r3, [r5, #0]
 800c8ec:	f7f5 fbb7 	bl	800205e <_isatty>
 800c8f0:	1c43      	adds	r3, r0, #1
 800c8f2:	d102      	bne.n	800c8fa <_isatty_r+0x1a>
 800c8f4:	682b      	ldr	r3, [r5, #0]
 800c8f6:	b103      	cbz	r3, 800c8fa <_isatty_r+0x1a>
 800c8f8:	6023      	str	r3, [r4, #0]
 800c8fa:	bd38      	pop	{r3, r4, r5, pc}
 800c8fc:	24000574 	.word	0x24000574

0800c900 <_malloc_usable_size_r>:
 800c900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c904:	1f18      	subs	r0, r3, #4
 800c906:	2b00      	cmp	r3, #0
 800c908:	bfbc      	itt	lt
 800c90a:	580b      	ldrlt	r3, [r1, r0]
 800c90c:	18c0      	addlt	r0, r0, r3
 800c90e:	4770      	bx	lr

0800c910 <_raise_r>:
 800c910:	291f      	cmp	r1, #31
 800c912:	b538      	push	{r3, r4, r5, lr}
 800c914:	4604      	mov	r4, r0
 800c916:	460d      	mov	r5, r1
 800c918:	d904      	bls.n	800c924 <_raise_r+0x14>
 800c91a:	2316      	movs	r3, #22
 800c91c:	6003      	str	r3, [r0, #0]
 800c91e:	f04f 30ff 	mov.w	r0, #4294967295
 800c922:	bd38      	pop	{r3, r4, r5, pc}
 800c924:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c926:	b112      	cbz	r2, 800c92e <_raise_r+0x1e>
 800c928:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c92c:	b94b      	cbnz	r3, 800c942 <_raise_r+0x32>
 800c92e:	4620      	mov	r0, r4
 800c930:	f000 f830 	bl	800c994 <_getpid_r>
 800c934:	462a      	mov	r2, r5
 800c936:	4601      	mov	r1, r0
 800c938:	4620      	mov	r0, r4
 800c93a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c93e:	f000 b817 	b.w	800c970 <_kill_r>
 800c942:	2b01      	cmp	r3, #1
 800c944:	d00a      	beq.n	800c95c <_raise_r+0x4c>
 800c946:	1c59      	adds	r1, r3, #1
 800c948:	d103      	bne.n	800c952 <_raise_r+0x42>
 800c94a:	2316      	movs	r3, #22
 800c94c:	6003      	str	r3, [r0, #0]
 800c94e:	2001      	movs	r0, #1
 800c950:	e7e7      	b.n	800c922 <_raise_r+0x12>
 800c952:	2400      	movs	r4, #0
 800c954:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c958:	4628      	mov	r0, r5
 800c95a:	4798      	blx	r3
 800c95c:	2000      	movs	r0, #0
 800c95e:	e7e0      	b.n	800c922 <_raise_r+0x12>

0800c960 <raise>:
 800c960:	4b02      	ldr	r3, [pc, #8]	; (800c96c <raise+0xc>)
 800c962:	4601      	mov	r1, r0
 800c964:	6818      	ldr	r0, [r3, #0]
 800c966:	f7ff bfd3 	b.w	800c910 <_raise_r>
 800c96a:	bf00      	nop
 800c96c:	24000038 	.word	0x24000038

0800c970 <_kill_r>:
 800c970:	b538      	push	{r3, r4, r5, lr}
 800c972:	4d07      	ldr	r5, [pc, #28]	; (800c990 <_kill_r+0x20>)
 800c974:	2300      	movs	r3, #0
 800c976:	4604      	mov	r4, r0
 800c978:	4608      	mov	r0, r1
 800c97a:	4611      	mov	r1, r2
 800c97c:	602b      	str	r3, [r5, #0]
 800c97e:	f7f5 faff 	bl	8001f80 <_kill>
 800c982:	1c43      	adds	r3, r0, #1
 800c984:	d102      	bne.n	800c98c <_kill_r+0x1c>
 800c986:	682b      	ldr	r3, [r5, #0]
 800c988:	b103      	cbz	r3, 800c98c <_kill_r+0x1c>
 800c98a:	6023      	str	r3, [r4, #0]
 800c98c:	bd38      	pop	{r3, r4, r5, pc}
 800c98e:	bf00      	nop
 800c990:	24000574 	.word	0x24000574

0800c994 <_getpid_r>:
 800c994:	f7f5 baec 	b.w	8001f70 <_getpid>

0800c998 <_init>:
 800c998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99a:	bf00      	nop
 800c99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c99e:	bc08      	pop	{r3}
 800c9a0:	469e      	mov	lr, r3
 800c9a2:	4770      	bx	lr

0800c9a4 <_fini>:
 800c9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a6:	bf00      	nop
 800c9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9aa:	bc08      	pop	{r3}
 800c9ac:	469e      	mov	lr, r3
 800c9ae:	4770      	bx	lr
